{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8afedc33ba68572bd2c0d3658697d9f9ec2613e3","modified":1470754750000},{"_id":"themes/landscape/.DS_Store","hash":"587d186730946cd03f6ab9c54395471efc046b3e","modified":1469810298000},{"_id":"themes/landscape/_config.yml","hash":"ff5639a6d91e1f2c1b95334f7aab4afc7972688a","modified":1469810231000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1469804476000},{"_id":"themes/landscape/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1469804476000},{"_id":"themes/landscape/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469804476000},{"_id":"themes/landscape/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469804476000},{"_id":"themes/landscape/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469804476000},{"_id":"source/_posts/.DS_Store","hash":"e8f2c4b73d708d87ad29a1cea81f22b34be8ce29","modified":1470764407000},{"_id":"source/_posts/GCD队列.md","hash":"b1180be2b405fba0d73b21fef565f19ab1d6c9b0","modified":1470402987000},{"_id":"source/_posts/UIScrollView部分属性.md","hash":"2c73279627f10b6d59d5e03451b97162616497ca","modified":1470402987000},{"_id":"source/_posts/CALayer学习小结.md","hash":"4a4eccc70d51964acb2be517dff53868c69e3315","modified":1471773810000},{"_id":"source/_posts/ios动画.md","hash":"f2c39f386b92ab2ed65de21876d646731292014c","modified":1471773810000},{"_id":"source/_posts/collectionView.md","hash":"79eecfba9d37335fc32ced956e09fc8349fccab2","modified":1470753705000},{"_id":"source/_posts/ios编程（第四版.md","hash":"3964706aae7581e9dbe363c374c5ba75f748c724","modified":1470402987000},{"_id":"source/_posts/objectice-c.md","hash":"05620b740674734a9b11ae6552680e661f354565","modified":1470402987000},{"_id":"source/_posts/xib设置border.md","hash":"50e6968a25b6a7deee83d05d2d293d1dd9e4b0e5","modified":1470972138000},{"_id":"source/_posts/删除storyboard.md","hash":"9f5c65f267cb6aa434f079fdad6431c233d498f0","modified":1470972138000},{"_id":"source/_posts/图解TCP_IP.md","hash":"6cf8e97e0f8fb021dedb96b66294257c92277efc","modified":1470402987000},{"_id":"source/_posts/hello-world.md","hash":"41ae448b5fd217c29a7be87e56f8ca7c430cfadd","modified":1469804476000},{"_id":"source/about/index.md","hash":"0d3d216cb610b10447e97566fe3789d313cbbad4","modified":1469805658000},{"_id":"themes/landscape/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469804476000},{"_id":"source/tags/index.md","hash":"5a034eac201382d18d2e8f7b53e7868e6bd948e2","modified":1469804476000},{"_id":"source/categories/index.md","hash":"ca9ce2d6c165e3826b6fe70c4d6f21af059b99a2","modified":1469805705000},{"_id":"themes/landscape/images/.DS_Store","hash":"76b6280838f616ac513efdf185d0734d2ed1f390","modified":1469810279000},{"_id":"source/_posts/python语法.md","hash":"0dd140d6f01a8f1bf8d3839e5e7a10d5356441eb","modified":1471794441000},{"_id":"source/_posts/重新开始.md","hash":"0493e944f925fda5a1f0153fc43b708ff377b97c","modified":1469812623000},{"_id":"themes/landscape/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469804476000},{"_id":"themes/landscape/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469804476000},{"_id":"themes/landscape/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469804476000},{"_id":"themes/landscape/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469804476000},{"_id":"themes/landscape/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469804476000},{"_id":"themes/landscape/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469804476000},{"_id":"themes/landscape/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469804476000},{"_id":"themes/landscape/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469804476000},{"_id":"themes/landscape/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1469804476000},{"_id":"themes/landscape/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469804476000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469804476000},{"_id":"themes/landscape/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469804476000},{"_id":"themes/landscape/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1469804476000},{"_id":"themes/landscape/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469804476000},{"_id":"themes/landscape/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469804476000},{"_id":"themes/landscape/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469804476000},{"_id":"themes/landscape/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469804476000},{"_id":"themes/landscape/scripts/.DS_Store","hash":"03d32f408e26b8b8bb139cecde03a5fba842ebdf","modified":1469810298000},{"_id":"themes/landscape/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469804476000},{"_id":"themes/landscape/layout/.DS_Store","hash":"b9591ac71e3ba3b2b33f53b9e0e330bd8919ede3","modified":1469810308000},{"_id":"themes/landscape/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469804476000},{"_id":"themes/landscape/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469804476000},{"_id":"themes/landscape/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469804476000},{"_id":"themes/landscape/source/.DS_Store","hash":"21964455ce8ab9af847a30c5dd07e0ff2e3f0df0","modified":1469810292000},{"_id":"themes/landscape/images/author.png","hash":"5b9e9293ad03091a3094ee299ce2e36231b961dd","modified":1469804476000},{"_id":"themes/landscape/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469804476000},{"_id":"themes/landscape/images/logo.png","hash":"44201457192532a1ecadb7aacf85d987a67903e2","modified":1469804476000},{"_id":"themes/landscape/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469804476000},{"_id":"themes/landscape/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/layout/_macro/.DS_Store","hash":"3351890bd50e1f225cc338df4508eae90064197f","modified":1469810308000},{"_id":"themes/landscape/test/.DS_Store","hash":"86aaef889514f63213877b6166c2177fd70fc322","modified":1469799779000},{"_id":"themes/landscape/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469804476000},{"_id":"themes/landscape/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1469804476000},{"_id":"themes/landscape/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469804476000},{"_id":"themes/landscape/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469804476000},{"_id":"themes/landscape/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469804476000},{"_id":"themes/landscape/scripts/tags/.DS_Store","hash":"a527b0bb9926e259b1c3dd0e5b77fc58b24e1725","modified":1469810298000},{"_id":"themes/landscape/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469804476000},{"_id":"themes/landscape/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469804476000},{"_id":"themes/landscape/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469804476000},{"_id":"themes/landscape/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469804476000},{"_id":"themes/landscape/source/css/.DS_Store","hash":"e006b12670ce2936e381d5cf035fc921038f18c2","modified":1469810292000},{"_id":"themes/landscape/layout/_partials/.DS_Store","hash":"51827ecc85fee0fb2c831c63ff4a9790160f398b","modified":1469807213000},{"_id":"themes/landscape/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469804476000},{"_id":"themes/landscape/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469804476000},{"_id":"themes/landscape/source/images/.DS_Store","hash":"ee67d66a23f23181f4b7091f40ad1ceaa3e2a31a","modified":1469810285000},{"_id":"themes/landscape/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469804476000},{"_id":"themes/landscape/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469804476000},{"_id":"themes/landscape/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469804476000},{"_id":"themes/landscape/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469804476000},{"_id":"themes/landscape/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469804476000},{"_id":"themes/landscape/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469804476000},{"_id":"themes/landscape/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/head/.DS_Store","hash":"fd5aea08e64a85d559e92c727fe26d16c6864070","modified":1469807213000},{"_id":"themes/landscape/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469804476000},{"_id":"themes/landscape/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469804476000},{"_id":"themes/landscape/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469804476000},{"_id":"themes/landscape/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469804476000},{"_id":"themes/landscape/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469804476000},{"_id":"themes/landscape/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469804476000},{"_id":"themes/landscape/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469804476000},{"_id":"themes/landscape/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469804476000},{"_id":"themes/landscape/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469804476000},{"_id":"themes/landscape/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469804476000},{"_id":"themes/landscape/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469804476000},{"_id":"themes/landscape/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469804476000},{"_id":"themes/landscape/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469804476000},{"_id":"themes/landscape/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469804476000},{"_id":"themes/landscape/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469804476000},{"_id":"themes/landscape/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469804476000},{"_id":"themes/landscape/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469804476000},{"_id":"themes/landscape/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469804476000},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469804476000},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469804476000},{"_id":"themes/landscape/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469804476000},{"_id":"themes/landscape/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469804476000},{"_id":"themes/landscape/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469804476000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469804476000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469804476000},{"_id":"public/about/index.html","hash":"47404ab6f160eca89d82c1fafd2fc31da897e20e","modified":1471794344538},{"_id":"public/tags/index.html","hash":"bcc176024ee2c7e5d6b7c84f48fbb7b1ff7c2076","modified":1471794344538},{"_id":"public/categories/index.html","hash":"48ddf177b45a351c93aeaa9c3e20becae01f56ab","modified":1471794344543},{"_id":"public/2016/08/11/删除storyboard/index.html","hash":"eed6ab3f88dbecaa837026b87ab0c73081107b2c","modified":1471794344544},{"_id":"public/2016/08/10/xib设置border/index.html","hash":"1dade42c38760a078442594f86e9d7007c2e1b2f","modified":1471794344544},{"_id":"public/2016/08/04/UIScrollView部分属性/index.html","hash":"bbbabf726e9599881ee50178a1ab0fe8813a83e6","modified":1471794344544},{"_id":"public/2016/07/30/重新开始/index.html","hash":"198755841062305b8624a2cb5dba56ff49457457","modified":1471794344544},{"_id":"public/2016/07/29/hello-world/index.html","hash":"81eae48d79898be2bbe16e77b0fb0c76016ff880","modified":1471794344544},{"_id":"public/archives/page/2/index.html","hash":"a868e9ded3feb47b8daa969e1aa10294fc172c9d","modified":1471794344544},{"_id":"public/archives/2016/page/2/index.html","hash":"f0fb613dbe524c21eb159fd9b7042e33c187f2df","modified":1471794344544},{"_id":"public/archives/2016/07/index.html","hash":"30df38142f95da716a107ce0f921689dbd72fb17","modified":1471794344544},{"_id":"public/archives/2016/08/index.html","hash":"a98a06dd2d68ede40a8398ca84725b6b62ed6158","modified":1471794344544},{"_id":"public/categories/IOS/index.html","hash":"27154f892ab992244f15a99a3230e5b0a925402a","modified":1471794344544},{"_id":"public/categories/计算机/index.html","hash":"364106fd7b29994f6a7767028f92a838b86a7b96","modified":1471794344544},{"_id":"public/categories/无处置放/index.html","hash":"34cf88f1c639ff62ddf857508e42c312d11228fd","modified":1471794344544},{"_id":"public/categories/python/index.html","hash":"99d57dceab756f96d5b90d8c7041e4d9e74a610e","modified":1471794344544},{"_id":"public/tags/GCD/index.html","hash":"3ac537116c75dd68adaa6751311d16aea1f82e23","modified":1471794344544},{"_id":"public/tags/UIScrollView/index.html","hash":"ff77bbfeb15a2443364a32a515f1da1b1918fccd","modified":1471794344544},{"_id":"public/tags/Animation/index.html","hash":"bb2570ac947b6c539729fe909cd4e2e3e1fe4e85","modified":1471794344544},{"_id":"public/tags/UI/index.html","hash":"1820e52860854bfafedfd0d02b2541ee2726c8b2","modified":1471794344544},{"_id":"public/tags/UICollectionView/index.html","hash":"6eedea59202d01b887d95356f005241f609d6a6b","modified":1471794344544},{"_id":"public/tags/读书笔记/index.html","hash":"508d30066c5d3d810172d85a43d8664ad9fdbd18","modified":1471794344544},{"_id":"public/tags/objective-c/index.html","hash":"0c279ede2e5dd76fe5c9c5bf40923a43e596c931","modified":1471794344544},{"_id":"public/tags/runtime/index.html","hash":"32a7b10d85c2578579b984008084bfbe0921186a","modified":1471794344544},{"_id":"public/tags/hexo/index.html","hash":"c2449fe538ddf88bdea782771666bd8d08339989","modified":1471794344544},{"_id":"public/tags/xib/index.html","hash":"11a3d4dbf856d73d9e163806e09b39d304913506","modified":1471794344544},{"_id":"public/tags/杂谈/index.html","hash":"6af62ce17a864ab55f4f450024370b5c6c0225a9","modified":1471794344545},{"_id":"public/2016/08/16/ios动画/index.html","hash":"fea8eb48696c0f3c5ea7dfbdaeded136d359e91c","modified":1471794344545},{"_id":"public/2016/08/12/CALayer学习小结/index.html","hash":"4c1bdcb396e1207c49ff380ffcf3295adfb2c977","modified":1471794344545},{"_id":"public/2016/08/07/python语法/index.html","hash":"5ef2b9bb02bbed100eaab092ca15b0304c39e96f","modified":1471794453430},{"_id":"public/2016/08/05/collectionView/index.html","hash":"669d3a1b708cb87941acba198897e2a4b9394b48","modified":1471794344545},{"_id":"public/2016/08/02/GCD队列/index.html","hash":"7caae99e655abc1f20b1c7850bbd3017ab7b8578","modified":1471794344545},{"_id":"public/2016/07/31/图解TCP_IP/index.html","hash":"936582a4c6afebed2a366645d203509ad311b59a","modified":1471794344545},{"_id":"public/2016/07/31/ios编程（第四版/index.html","hash":"5d028e0804dcf602d50c31c7a67be85d5ad9563d","modified":1471794344545},{"_id":"public/2016/07/31/objectice-c/index.html","hash":"d5c7911ba7e9d49c1e2e6aa43c3f394bf4aae736","modified":1471794344545},{"_id":"public/archives/index.html","hash":"53668a9a20fac28f2bf6c5e6cfdbee71e7a42ba8","modified":1471794344545},{"_id":"public/archives/2016/index.html","hash":"50bf6d9269204814ed7b0897b99ea968e857ca88","modified":1471794344545},{"_id":"public/index.html","hash":"44a2ac228516379d84cb649d0937f0880f3d6aef","modified":1471794344545},{"_id":"public/page/2/index.html","hash":"3e0490b2cec862c9f6fd9495a483b78531ee8973","modified":1471794344545},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471794344563},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471794344563},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471794344563},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471794344563},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471794344563},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471794344563},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471794344563},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471794344563},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471794344564},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471794344564},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471794344564},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471794344564},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471794344564},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471794344564},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471794344564},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471794344564},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471794344564},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471794344564},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471794344564},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471794344564},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471794344564},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471794344564},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471794344564},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471794344564},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471794345304},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471794345308},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471794345308},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471794345311},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471794345312},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471794345312},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471794345312},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471794345312},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471794345312},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471794345312},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1471794345312},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1471794345312},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1471794345312},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1471794345312},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1471794345312},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1471794345312},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471794345312},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471794345312},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1471794345312},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471794345312},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471794345312},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471794345312},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471794345312},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471794345312},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471794345312},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471794345312},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471794345313},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471794345313},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471794345313},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471794345313},{"_id":"public/css/main.css","hash":"1244edb48508e8cb349e4512939682a2dd649b6d","modified":1471794345313},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471794345313},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471794345313},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471794345313},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471794345313},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471794345313},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471794345313},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471794345313},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471794345313},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1471794345313},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471794345313},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471794345319}],"Category":[{"name":"IOS","_id":"cis4scmqh0003werumtt68mk0"},{"name":"计算机","_id":"cis4scmr4000lweruxt1qkdld"},{"name":"无处置放","_id":"cis4scmr9000uweruz3n4pkco"},{"name":"python","_id":"cis4scmuz001nwerujy0d08rr"}],"Data":[],"Page":[{"title":"about","date":"2016-07-29T15:19:36.000Z","type":"about","_content":"\n欢迎来到我的空间。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-29 23:19:36\ntype: \"about\"\n\n---\n\n欢迎来到我的空间。","updated":"2016-07-29T15:20:58.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cis4scmun001gwerumpfr9w24","content":"<p>欢迎来到我的空间。</p>\n","excerpt":"","more":"<p>欢迎来到我的空间。</p>\n"},{"title":"tags","date":"2016-07-29T10:08:03.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-29 18:08:03\ntype: \"tags\"\n\n\n---\n\n","updated":"2016-07-29T15:01:16.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cis4scmuq001iweruckcc2p6t","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-07-29T15:21:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-29 23:21:33\ntype: \"categories\"\n\n---\n","updated":"2016-07-29T15:21:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cis4scmux001lweruj2ulcnhp","content":"","excerpt":"","more":""}],"Post":[{"title":"GCD队列 学习与整理","date":"2016-08-02T06:07:12.000Z","_content":"\nGrand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。\n\n<!--more-->\n\n### 基本概念\n- **Serial vs. Concurrent 串行 vs. 并发**\n这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。\n- **Synchronous vs. Asynchronous 同步 vs. 异步**\n在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。\n\n### 队列分类\n1. **Serial Queues 串行队列**\n这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。\n由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。\n2. **Concurrent Queues 并发队列**\n在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。\n\n### 队列类型\n1. **The main queue**\n与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。\n2. **Global queues**\n全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。\n3. **用户队列**\n用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。\n\n### 队列创建方式\n1. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.serial\", DISPATCH_QUEUE_SERIAL);**\n生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。\n2. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.concurrent\", DISPATCH_QUEUE_CONCURRENT);**\n生成一个并发执行队列。\n3. **dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);**\n获得全局队列。\n4. **dispatch_queue_t queue = dispatch_get_main_queue()**\n获得主线程队列。\n\n### 提交 Job\n向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。\n\n1. **dispatch_async**\ndispatch_async 函数会立即返回, block会在后台异步执行。\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        NSLog(@\"Done doing something long and involved\");\n});\n```\n\t在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [textField setStringValue:@\"Done doing something long and involved\"];\n        });\n});\n```\n2. **dispatch_sync**\ndispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。\n实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。\n\n**总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。**\n\n### 常用方法\n1. **dispatch_apply**\n重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_apply([array count], queue, ^(size_t index){\n    [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n});\n[self doSomethingWith:array];\n```\n\t如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    dispatch_apply([array count], queue, ^(size_t index){\n        [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n    });\n    [self doSomethingWith:array];\n});\n```\n\t那何时才适合用 dispatch_apply 呢？\n\n\t- 自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。\n\n\t- 主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。\n\n\t- 并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。\n\t\n2. **dispatch_after**\n延迟执行block\n```objc\ndouble delayInSeconds = 1.0; \ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n});\n```\n3. **dispatch_once**\n保证在APP运行期间，block中的代码只执行一次\n```objc\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\n    // code to be executed once\n});\n```\n\n4. **dispatch_group**\n一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。\n- *dispatch_group_create*创建一个调度任务组\n- *dispatch_group_async* 把一个任务异步提交到任务组里\n- *dispatch_group_notify* 用来监听任务组事件的执行完毕\n- *dispatch_group_wait* 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\nfor(id obj in array)\n    dispatch_group_async(group, queue, ^{\n        [self doSomethingIntensiveWith:obj];\n    });\ndispatch_group_notify(group, queue, ^{\n    [self doSomethingWith:array];\n});\n```\n\n","source":"_posts/GCD队列.md","raw":"title: GCD队列 学习与整理\ndate: 2016/8/2 14:07:12  \ncategories: IOS\ntags: [GCD]\n\n---\n\nGrand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。\n\n<!--more-->\n\n### 基本概念\n- **Serial vs. Concurrent 串行 vs. 并发**\n这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。\n- **Synchronous vs. Asynchronous 同步 vs. 异步**\n在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。\n\n### 队列分类\n1. **Serial Queues 串行队列**\n这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。\n由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。\n2. **Concurrent Queues 并发队列**\n在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。\n\n### 队列类型\n1. **The main queue**\n与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。\n2. **Global queues**\n全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。\n3. **用户队列**\n用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。\n\n### 队列创建方式\n1. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.serial\", DISPATCH_QUEUE_SERIAL);**\n生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。\n2. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.concurrent\", DISPATCH_QUEUE_CONCURRENT);**\n生成一个并发执行队列。\n3. **dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);**\n获得全局队列。\n4. **dispatch_queue_t queue = dispatch_get_main_queue()**\n获得主线程队列。\n\n### 提交 Job\n向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。\n\n1. **dispatch_async**\ndispatch_async 函数会立即返回, block会在后台异步执行。\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        NSLog(@\"Done doing something long and involved\");\n});\n```\n\t在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [textField setStringValue:@\"Done doing something long and involved\"];\n        });\n});\n```\n2. **dispatch_sync**\ndispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。\n实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。\n\n**总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。**\n\n### 常用方法\n1. **dispatch_apply**\n重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_apply([array count], queue, ^(size_t index){\n    [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n});\n[self doSomethingWith:array];\n```\n\t如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    dispatch_apply([array count], queue, ^(size_t index){\n        [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n    });\n    [self doSomethingWith:array];\n});\n```\n\t那何时才适合用 dispatch_apply 呢？\n\n\t- 自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。\n\n\t- 主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。\n\n\t- 并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。\n\t\n2. **dispatch_after**\n延迟执行block\n```objc\ndouble delayInSeconds = 1.0; \ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n});\n```\n3. **dispatch_once**\n保证在APP运行期间，block中的代码只执行一次\n```objc\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\n    // code to be executed once\n});\n```\n\n4. **dispatch_group**\n一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。\n- *dispatch_group_create*创建一个调度任务组\n- *dispatch_group_async* 把一个任务异步提交到任务组里\n- *dispatch_group_notify* 用来监听任务组事件的执行完毕\n- *dispatch_group_wait* 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\nfor(id obj in array)\n    dispatch_group_async(group, queue, ^{\n        [self doSomethingIntensiveWith:obj];\n    });\ndispatch_group_notify(group, queue, ^{\n    [self doSomethingWith:array];\n});\n```\n\n","slug":"GCD队列","published":1,"updated":"2016-08-05T13:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmq70000weru1mljah80","content":"<p>Grand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。</p>\n<a id=\"more\"></a>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>Serial vs. Concurrent 串行 vs. 并发</strong><br>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</li>\n<li><strong>Synchronous vs. Asynchronous 同步 vs. 异步</strong><br>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</li>\n</ul>\n<h3 id=\"队列分类\"><a href=\"#队列分类\" class=\"headerlink\" title=\"队列分类\"></a>队列分类</h3><ol>\n<li><strong>Serial Queues 串行队列</strong><br>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。<br>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。</li>\n<li><strong>Concurrent Queues 并发队列</strong><br>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</li>\n</ol>\n<h3 id=\"队列类型\"><a href=\"#队列类型\" class=\"headerlink\" title=\"队列类型\"></a>队列类型</h3><ol>\n<li><strong>The main queue</strong><br>与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。</li>\n<li><strong>Global queues</strong><br>全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。</li>\n<li><strong>用户队列</strong><br>用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。</li>\n</ol>\n<h3 id=\"队列创建方式\"><a href=\"#队列创建方式\" class=\"headerlink\" title=\"队列创建方式\"></a>队列创建方式</h3><ol>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.serial”, DISPATCH_QUEUE_SERIAL);</strong><br>生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。</li>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.concurrent”, DISPATCH_QUEUE_CONCURRENT);</strong><br>生成一个并发执行队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</strong><br>获得全局队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_main_queue()</strong><br>获得主线程队列。</li>\n</ol>\n<h3 id=\"提交-Job\"><a href=\"#提交-Job\" class=\"headerlink\" title=\"提交 Job\"></a>提交 Job</h3><p>向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。</p>\n<ol>\n<li><p><strong>dispatch_async</strong><br>dispatch_async 函数会立即返回, block会在后台异步执行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Done doing something long and involved\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [textField setStringValue:<span class=\"string\">@\"Done doing something long and involved\"</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_sync</strong><br>dispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。<br>实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。</p>\n</li>\n</ol>\n<p><strong>总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。</strong></p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ol>\n<li><p><strong>dispatch_apply</strong><br>重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">&#125;);</div><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWith:array];</div></pre></td></tr></table></figure>\n<p> 如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 那何时才适合用 dispatch_apply 呢？</p>\n<ul>\n<li><p>自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。</p>\n</li>\n<li><p>主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。</p>\n</li>\n<li><p>并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>dispatch_after</strong><br>延迟执行block</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">1.0</span>; </div><div class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</div><div class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</div><div class=\"line\">     <span class=\"comment\">// code to be executed on the main queue after delay</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_once</strong><br>保证在APP运行期间，block中的代码只执行一次</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\"><span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">    <span class=\"comment\">// code to be executed once</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_group</strong><br>一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。</p>\n</li>\n</ol>\n<ul>\n<li><em>dispatch_group_create</em>创建一个调度任务组</li>\n<li><em>dispatch_group_async</em> 把一个任务异步提交到任务组里</li>\n<li><em>dispatch_group_notify</em> 用来监听任务组事件的执行完毕</li>\n<li><em>dispatch_group_wait</em> 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_group_t group = dispatch_group_create();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> array)</div><div class=\"line\">    dispatch_group_async(group, queue, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:obj];</div><div class=\"line\">    &#125;);</div><div class=\"line\">dispatch_group_notify(group, queue, ^&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"<p>Grand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。</p>","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>Serial vs. Concurrent 串行 vs. 并发</strong><br>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</li>\n<li><strong>Synchronous vs. Asynchronous 同步 vs. 异步</strong><br>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</li>\n</ul>\n<h3 id=\"队列分类\"><a href=\"#队列分类\" class=\"headerlink\" title=\"队列分类\"></a>队列分类</h3><ol>\n<li><strong>Serial Queues 串行队列</strong><br>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。<br>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。</li>\n<li><strong>Concurrent Queues 并发队列</strong><br>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</li>\n</ol>\n<h3 id=\"队列类型\"><a href=\"#队列类型\" class=\"headerlink\" title=\"队列类型\"></a>队列类型</h3><ol>\n<li><strong>The main queue</strong><br>与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。</li>\n<li><strong>Global queues</strong><br>全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。</li>\n<li><strong>用户队列</strong><br>用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。</li>\n</ol>\n<h3 id=\"队列创建方式\"><a href=\"#队列创建方式\" class=\"headerlink\" title=\"队列创建方式\"></a>队列创建方式</h3><ol>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.serial”, DISPATCH_QUEUE_SERIAL);</strong><br>生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。</li>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.concurrent”, DISPATCH_QUEUE_CONCURRENT);</strong><br>生成一个并发执行队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</strong><br>获得全局队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_main_queue()</strong><br>获得主线程队列。</li>\n</ol>\n<h3 id=\"提交-Job\"><a href=\"#提交-Job\" class=\"headerlink\" title=\"提交 Job\"></a>提交 Job</h3><p>向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。</p>\n<ol>\n<li><p><strong>dispatch_async</strong><br>dispatch_async 函数会立即返回, block会在后台异步执行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Done doing something long and involved\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [textField setStringValue:<span class=\"string\">@\"Done doing something long and involved\"</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_sync</strong><br>dispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。<br>实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。</p>\n</li>\n</ol>\n<p><strong>总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。</strong></p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ol>\n<li><p><strong>dispatch_apply</strong><br>重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">&#125;);</div><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWith:array];</div></pre></td></tr></table></figure>\n<p> 如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 那何时才适合用 dispatch_apply 呢？</p>\n<ul>\n<li><p>自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。</p>\n</li>\n<li><p>主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。</p>\n</li>\n<li><p>并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>dispatch_after</strong><br>延迟执行block</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">1.0</span>; </div><div class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</div><div class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</div><div class=\"line\">     <span class=\"comment\">// code to be executed on the main queue after delay</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_once</strong><br>保证在APP运行期间，block中的代码只执行一次</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\"><span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">    <span class=\"comment\">// code to be executed once</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_group</strong><br>一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。</p>\n</li>\n</ol>\n<ul>\n<li><em>dispatch_group_create</em>创建一个调度任务组</li>\n<li><em>dispatch_group_async</em> 把一个任务异步提交到任务组里</li>\n<li><em>dispatch_group_notify</em> 用来监听任务组事件的执行完毕</li>\n<li><em>dispatch_group_wait</em> 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_group_t group = dispatch_group_create();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> array)</div><div class=\"line\">    dispatch_group_async(group, queue, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:obj];</div><div class=\"line\">    &#125;);</div><div class=\"line\">dispatch_group_notify(group, queue, ^&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"UIScrollView部分属性","date":"2016-08-04T06:07:12.000Z","_content":"\n碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。\n\n<!--more-->\n\n## **contentSize**、**contentInset**和**contentOffset**\n- contentSize: 就是scrollview可以滚动的区域.\n比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。\n- contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。\n比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 \n- contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。\n例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 \n\n/* 上拉刷新一般实现代码如下 */\n```objc\n- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{     \n    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  \n    float offset=scrollView.contentOffset.y;  \n    float contentHeight=scrollView.contentSize.height;  \n    float sub=contentHeight-offset;  \n    if ((scrollView.height-sub)>20) {//如果上拉距离超过20p，则加载更多数据  \n        //[self loadMoreData];//此处在view底部加载更多数据  \n    }  \n}\n```","source":"_posts/UIScrollView部分属性.md","raw":"title: UIScrollView部分属性\ndate: 2016/8/4 14:07:12  \ncategories: IOS\ntags: [UIScrollView]\n\n---\n\n碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。\n\n<!--more-->\n\n## **contentSize**、**contentInset**和**contentOffset**\n- contentSize: 就是scrollview可以滚动的区域.\n比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。\n- contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。\n比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 \n- contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。\n例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 \n\n/* 上拉刷新一般实现代码如下 */\n```objc\n- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{     \n    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  \n    float offset=scrollView.contentOffset.y;  \n    float contentHeight=scrollView.contentSize.height;  \n    float sub=contentHeight-offset;  \n    if ((scrollView.height-sub)>20) {//如果上拉距离超过20p，则加载更多数据  \n        //[self loadMoreData];//此处在view底部加载更多数据  \n    }  \n}\n```","slug":"UIScrollView部分属性","published":1,"updated":"2016-08-05T13:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqb0001weruukyhm08e","content":"<p>碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。</p>\n<a id=\"more\"></a>\n<h2 id=\"contentSize、contentInset和contentOffset\"><a href=\"#contentSize、contentInset和contentOffset\" class=\"headerlink\" title=\"contentSize、contentInset和contentOffset\"></a><strong>contentSize</strong>、<strong>contentInset</strong>和<strong>contentOffset</strong></h2><ul>\n<li>contentSize: 就是scrollview可以滚动的区域.<br>比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。</li>\n<li>contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。<br>比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 </li>\n<li>contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。<br>例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 </li>\n</ul>\n<p>/<em> 上拉刷新一般实现代码如下 </em>/<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate&#123;     </div><div class=\"line\">    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  </div><div class=\"line\">    <span class=\"keyword\">float</span> offset=scrollView.contentOffset.y;  </div><div class=\"line\">    <span class=\"keyword\">float</span> contentHeight=scrollView.contentSize.height;  </div><div class=\"line\">    <span class=\"keyword\">float</span> sub=contentHeight-offset;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((scrollView.height-sub)&gt;<span class=\"number\">20</span>) &#123;<span class=\"comment\">//如果上拉距离超过20p，则加载更多数据  </span></div><div class=\"line\">        <span class=\"comment\">//[self loadMoreData];//此处在view底部加载更多数据  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。</p>","more":"<h2 id=\"contentSize、contentInset和contentOffset\"><a href=\"#contentSize、contentInset和contentOffset\" class=\"headerlink\" title=\"contentSize、contentInset和contentOffset\"></a><strong>contentSize</strong>、<strong>contentInset</strong>和<strong>contentOffset</strong></h2><ul>\n<li>contentSize: 就是scrollview可以滚动的区域.<br>比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。</li>\n<li>contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。<br>比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 </li>\n<li>contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。<br>例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 </li>\n</ul>\n<p>/<em> 上拉刷新一般实现代码如下 </em>/<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate&#123;     </div><div class=\"line\">    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  </div><div class=\"line\">    <span class=\"keyword\">float</span> offset=scrollView.contentOffset.y;  </div><div class=\"line\">    <span class=\"keyword\">float</span> contentHeight=scrollView.contentSize.height;  </div><div class=\"line\">    <span class=\"keyword\">float</span> sub=contentHeight-offset;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((scrollView.height-sub)&gt;<span class=\"number\">20</span>) &#123;<span class=\"comment\">//如果上拉距离超过20p，则加载更多数据  </span></div><div class=\"line\">        <span class=\"comment\">//[self loadMoreData];//此处在view底部加载更多数据  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"CALayer学习小结","date":"2016-08-12T06:07:12.000Z","_content":"\n这两天想大致学习下animation的使用方法。看了[文顶顶的ios开发UI篇](http://www.cnblogs.com/wendingding/tag/UI高级/)专题，写的很好，学习了很多。再摘录部分，以作备忘。\n\n<!--more-->\n\n## CALayer简介\n### 简介\nUIView之所以能显示在屏幕上，因为内部的layer。创建UIView的时候自动创建CALayer对象。\n当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示。\nUIView本身不具备显示的功能，拥有显示功能的是它内部的图层。\n\n### 使用\n通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。\n```objc\n//设置边框的宽度为20\nself.customView.layer.borderWidth=20;\n//设置边框的颜色(borderColor是CGColor类型)\nself.customView.layer.borderColor=[UIColor greenColor].CGColor;\n\n//设置layer的圆角\nself.customView.layer.cornerRadius=20;\n//设置超过子图层的部分裁减掉\nself.iconView.layer.masksToBounds=YES;\n\n//在view的图层上添加一个image，contents表示接受内容\nself.customView.layer.contents=(id)[UIImage imageNamed:@\"me\"].CGImage;\n\n//设置阴影的颜色\nself.customView.layer.shadowColor=[UIColor blackColor].CGColor;\n//设置阴影的偏移量，如果为正数，则代表为往右边偏移\nself.customView.layer.shadowOffset=CGSizeMake(15, 5);\n//设置阴影的透明度(0~1之间，0表示完全透明)\nself.customView.layer.shadowOpacity=0.6;\n\n//通过uiview设置（2D效果）\nself.iconView.transform=CGAffineTransformMakeTranslation(0, -100);\n//通过layer来设置（3D效果,x，y，z三个方向）\nself.iconView.layer.transform=CATransform3DMakeTranslation(100, 20, 0);\n//旋转\nself.iconView.layer.transform=CATransform3DMakeRotation(M_PI_4, 1, 1, 0.5);\n```\n\n## 创建图层\n### 基本方法\n```objc\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    //创建一个layer\n    CALayer *Mylayer=[CALayer layer];\n    //设置layer的属性\n    Mylayer.bounds=CGRectMake(100, 100, 100, 100);\n    Mylayer.position=CGPointMake(100, 100);\n    \n    //设置需要显示的图片\n    Mylayer.contents=(id)[UIImage imageNamed:@\"me\"].CGImage;\n    //设置圆角半径为10\n    Mylayer.cornerRadius=10;\n    //如果设置了图片，那么需要设置这个属性为YES才能显示圆角效果\n    Mylayer.masksToBounds=YES;\n    //设置边框\n    Mylayer.borderWidth=3;\n    Mylayer.borderColor=[UIColor brownColor].CGColor;\n    \n    //把layer添加到界面上\n    [self.view.layer addSublayer:Mylayer];\n}\n```\n\n### 总结\n对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以。\n如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以\n\n## CAlayer属性\n### position和anchorPoint\n- position:设置CALayer在父层中的位置，这个位置要和锚点重合。\n- anchorPoint:决定着CALayer身上的哪个点会在position属性所指的位置。以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，**默认值为（0.5, 0.5）**\n\n### 隐式动画\n每个View内部都关联着一个Root Layer。所有非rootlayer都存在着隐式动画。隐式动画就是对于layer的部分属性进行修改时，默认会产生的一些动画。\n\n常见的动画属性：\n- bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画\n- backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画\n- position：用于设置CALayer的位置。修改这个属性会产生平移动画\n\n## 自定义layer\n### 新建layer类\n想要在view中画东西，需要自定义view,创建一个类与之关联，让这个类继承自UIView，然后重写它的DrawRect：方法，然后在该方法中画图。\n\n如果在layer上画东西，与上面的过程类似。\n```objc\n#import \"YYMylayer.h\"\n@implementation YYMylayer\n//重写该方法，在该方法内绘制图形\n-(void)drawInContext:(CGContextRef)ctx\n{\n    //1.绘制图形\n    //画一个圆\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n//    [[UIColor yellowColor]set];\t不能这样设置\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);\n     //2.渲染\n    CGContextFillPath(ctx);\n}\n@end\n```\n注意：\n1. 默认为无色，不会显示。要想让绘制的图形显示出来，还需要设置图形的颜色。注意不能直接使用UI框架中的类\n2. 在自定义layer中的-(void)drawInContext:方法不会自己调用，只能自己通过setNeedDisplay方法调用，在view中画东西DrawRect:方法在view第一次显示的时候会自动调用。\n\n在view中绘图：\n```objc\n#import \"YYVIEW.h\"\n@implementation YYVIEW\n- (void)drawRect:(CGRect)rect\n{\n    //1.获取上下文\n    CGContextRef ctx=UIGraphicsGetCurrentContext();\n    //2.绘制图形\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n    //    [[UIColor yellowColor]set];\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);\n    //3.渲染\n    CGContextFillPath(ctx);\n    //在执行渲染操作的时候，本质上它的内部相当于调用了下面的方法\n    //[self.layer drawInContext:ctx];\n}\n```\n\n### 实现delegate方法\n设置viewcontroller为CALayer的delegate，然后让delegate实现drawLayer:inContext:方法，当CALayer需要绘图时，会调用delegate的drawLayer:inContext:方法进行绘图。\n```objc\n@implementation YYViewController\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //1.创建自定义的layer\n    CALayer *layer=[CALayer layer];\n    //2.设置layer的属性\n\t...\n    //设置代理\n    layer.delegate=self;\n    [layer setNeedsDisplay];\n    //3.添加layer\n    [self.view.layer addSublayer:layer];\n}\n-(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx{\n    //1.绘制图形\n    //画一个圆\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n    //    [[UIColor yellowColor]set];\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);   \n    //2.渲染\n    CGContextFillPath(ctx);\n}\n@end\n```\n注意：\n1. 在设置代理的时候，它并不要求我们遵守协议，说明这个方法是nsobject中的，就不需要再额外的显示遵守协议了。\n2. 不能再将某个UIView设置为CALayer的delegate，因为UIView对象已经是它内部根层的delegate，再次设置为其他层的delegate就会出问题。\n\n### 补充\n1. 无论采取哪种方法来自定义层，都必须调用CALayer的setNeedsDisplay方法才能正常绘图。\n2. **当UIView需要显示时**，它内部的层会准备好一个CGContextRef(图形上下文)，然后**调用delegate(这里就是UIView)**的drawLayer:inContext:方法，并且传入已经准备好的CGContextRef对象。而UIView在drawLayer:inContext:方法中又会调用自己的drawRect:方法。平时在drawRect:中通过UIGraphicsGetCurrentContext()获取的就是由层传入的CGContextRef对象，在drawRect:中完成的所有绘图都会填入层的CGContextRef中，然后被拷贝至屏幕。\n\n\n","source":"_posts/CALayer学习小结.md","raw":"title: CALayer学习小结\ndate: 2016/8/12 14:07:12  \ncategories: IOS\ntags: \n\t- Animation\n\t- UI\n\t\n---\n\n这两天想大致学习下animation的使用方法。看了[文顶顶的ios开发UI篇](http://www.cnblogs.com/wendingding/tag/UI高级/)专题，写的很好，学习了很多。再摘录部分，以作备忘。\n\n<!--more-->\n\n## CALayer简介\n### 简介\nUIView之所以能显示在屏幕上，因为内部的layer。创建UIView的时候自动创建CALayer对象。\n当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示。\nUIView本身不具备显示的功能，拥有显示功能的是它内部的图层。\n\n### 使用\n通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。\n```objc\n//设置边框的宽度为20\nself.customView.layer.borderWidth=20;\n//设置边框的颜色(borderColor是CGColor类型)\nself.customView.layer.borderColor=[UIColor greenColor].CGColor;\n\n//设置layer的圆角\nself.customView.layer.cornerRadius=20;\n//设置超过子图层的部分裁减掉\nself.iconView.layer.masksToBounds=YES;\n\n//在view的图层上添加一个image，contents表示接受内容\nself.customView.layer.contents=(id)[UIImage imageNamed:@\"me\"].CGImage;\n\n//设置阴影的颜色\nself.customView.layer.shadowColor=[UIColor blackColor].CGColor;\n//设置阴影的偏移量，如果为正数，则代表为往右边偏移\nself.customView.layer.shadowOffset=CGSizeMake(15, 5);\n//设置阴影的透明度(0~1之间，0表示完全透明)\nself.customView.layer.shadowOpacity=0.6;\n\n//通过uiview设置（2D效果）\nself.iconView.transform=CGAffineTransformMakeTranslation(0, -100);\n//通过layer来设置（3D效果,x，y，z三个方向）\nself.iconView.layer.transform=CATransform3DMakeTranslation(100, 20, 0);\n//旋转\nself.iconView.layer.transform=CATransform3DMakeRotation(M_PI_4, 1, 1, 0.5);\n```\n\n## 创建图层\n### 基本方法\n```objc\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    //创建一个layer\n    CALayer *Mylayer=[CALayer layer];\n    //设置layer的属性\n    Mylayer.bounds=CGRectMake(100, 100, 100, 100);\n    Mylayer.position=CGPointMake(100, 100);\n    \n    //设置需要显示的图片\n    Mylayer.contents=(id)[UIImage imageNamed:@\"me\"].CGImage;\n    //设置圆角半径为10\n    Mylayer.cornerRadius=10;\n    //如果设置了图片，那么需要设置这个属性为YES才能显示圆角效果\n    Mylayer.masksToBounds=YES;\n    //设置边框\n    Mylayer.borderWidth=3;\n    Mylayer.borderColor=[UIColor brownColor].CGColor;\n    \n    //把layer添加到界面上\n    [self.view.layer addSublayer:Mylayer];\n}\n```\n\n### 总结\n对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以。\n如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以\n\n## CAlayer属性\n### position和anchorPoint\n- position:设置CALayer在父层中的位置，这个位置要和锚点重合。\n- anchorPoint:决定着CALayer身上的哪个点会在position属性所指的位置。以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，**默认值为（0.5, 0.5）**\n\n### 隐式动画\n每个View内部都关联着一个Root Layer。所有非rootlayer都存在着隐式动画。隐式动画就是对于layer的部分属性进行修改时，默认会产生的一些动画。\n\n常见的动画属性：\n- bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画\n- backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画\n- position：用于设置CALayer的位置。修改这个属性会产生平移动画\n\n## 自定义layer\n### 新建layer类\n想要在view中画东西，需要自定义view,创建一个类与之关联，让这个类继承自UIView，然后重写它的DrawRect：方法，然后在该方法中画图。\n\n如果在layer上画东西，与上面的过程类似。\n```objc\n#import \"YYMylayer.h\"\n@implementation YYMylayer\n//重写该方法，在该方法内绘制图形\n-(void)drawInContext:(CGContextRef)ctx\n{\n    //1.绘制图形\n    //画一个圆\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n//    [[UIColor yellowColor]set];\t不能这样设置\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);\n     //2.渲染\n    CGContextFillPath(ctx);\n}\n@end\n```\n注意：\n1. 默认为无色，不会显示。要想让绘制的图形显示出来，还需要设置图形的颜色。注意不能直接使用UI框架中的类\n2. 在自定义layer中的-(void)drawInContext:方法不会自己调用，只能自己通过setNeedDisplay方法调用，在view中画东西DrawRect:方法在view第一次显示的时候会自动调用。\n\n在view中绘图：\n```objc\n#import \"YYVIEW.h\"\n@implementation YYVIEW\n- (void)drawRect:(CGRect)rect\n{\n    //1.获取上下文\n    CGContextRef ctx=UIGraphicsGetCurrentContext();\n    //2.绘制图形\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n    //    [[UIColor yellowColor]set];\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);\n    //3.渲染\n    CGContextFillPath(ctx);\n    //在执行渲染操作的时候，本质上它的内部相当于调用了下面的方法\n    //[self.layer drawInContext:ctx];\n}\n```\n\n### 实现delegate方法\n设置viewcontroller为CALayer的delegate，然后让delegate实现drawLayer:inContext:方法，当CALayer需要绘图时，会调用delegate的drawLayer:inContext:方法进行绘图。\n```objc\n@implementation YYViewController\n- (void)viewDidLoad{\n    [super viewDidLoad];\n    //1.创建自定义的layer\n    CALayer *layer=[CALayer layer];\n    //2.设置layer的属性\n\t...\n    //设置代理\n    layer.delegate=self;\n    [layer setNeedsDisplay];\n    //3.添加layer\n    [self.view.layer addSublayer:layer];\n}\n-(void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx{\n    //1.绘制图形\n    //画一个圆\n    CGContextAddEllipseInRect(ctx, CGRectMake(50, 50, 100, 100));\n    //设置属性（颜色）\n    //    [[UIColor yellowColor]set];\n    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);   \n    //2.渲染\n    CGContextFillPath(ctx);\n}\n@end\n```\n注意：\n1. 在设置代理的时候，它并不要求我们遵守协议，说明这个方法是nsobject中的，就不需要再额外的显示遵守协议了。\n2. 不能再将某个UIView设置为CALayer的delegate，因为UIView对象已经是它内部根层的delegate，再次设置为其他层的delegate就会出问题。\n\n### 补充\n1. 无论采取哪种方法来自定义层，都必须调用CALayer的setNeedsDisplay方法才能正常绘图。\n2. **当UIView需要显示时**，它内部的层会准备好一个CGContextRef(图形上下文)，然后**调用delegate(这里就是UIView)**的drawLayer:inContext:方法，并且传入已经准备好的CGContextRef对象。而UIView在drawLayer:inContext:方法中又会调用自己的drawRect:方法。平时在drawRect:中通过UIGraphicsGetCurrentContext()获取的就是由层传入的CGContextRef对象，在drawRect:中完成的所有绘图都会填入层的CGContextRef中，然后被拷贝至屏幕。\n\n\n","slug":"CALayer学习小结","published":1,"updated":"2016-08-21T10:03:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqi0004werulfwlo10n","content":"<p>这两天想大致学习下animation的使用方法。看了<a href=\"http://www.cnblogs.com/wendingding/tag/UI高级/\" target=\"_blank\" rel=\"external\">文顶顶的ios开发UI篇</a>专题，写的很好，学习了很多。再摘录部分，以作备忘。</p>\n<a id=\"more\"></a>\n<h2 id=\"CALayer简介\"><a href=\"#CALayer简介\" class=\"headerlink\" title=\"CALayer简介\"></a>CALayer简介</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>UIView之所以能显示在屏幕上，因为内部的layer。创建UIView的时候自动创建CALayer对象。<br>当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示。<br>UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置边框的宽度为20</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.borderWidth=<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"comment\">//设置边框的颜色(borderColor是CGColor类型)</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.borderColor=[<span class=\"built_in\">UIColor</span> greenColor].CGColor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置layer的圆角</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.cornerRadius=<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"comment\">//设置超过子图层的部分裁减掉</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.masksToBounds=<span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在view的图层上添加一个image，contents表示接受内容</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.contents=(<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"me\"</span>].CGImage;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置阴影的颜色</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowColor=[<span class=\"built_in\">UIColor</span> blackColor].CGColor;</div><div class=\"line\"><span class=\"comment\">//设置阴影的偏移量，如果为正数，则代表为往右边偏移</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowOffset=<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">15</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">//设置阴影的透明度(0~1之间，0表示完全透明)</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowOpacity=<span class=\"number\">0.6</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//通过uiview设置（2D效果）</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.transform=<span class=\"built_in\">CGAffineTransformMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">-100</span>);</div><div class=\"line\"><span class=\"comment\">//通过layer来设置（3D效果,x，y，z三个方向）</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.transform=<span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">100</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">//旋转</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.transform=<span class=\"built_in\">CATransform3DMakeRotation</span>(M_PI_4, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建图层\"><a href=\"#创建图层\" class=\"headerlink\" title=\"创建图层\"></a>创建图层</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">//创建一个layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *Mylayer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//设置layer的属性</span></div><div class=\"line\">    Mylayer.bounds=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    Mylayer.position=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置需要显示的图片</span></div><div class=\"line\">    Mylayer.contents=(<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"me\"</span>].CGImage;</div><div class=\"line\">    <span class=\"comment\">//设置圆角半径为10</span></div><div class=\"line\">    Mylayer.cornerRadius=<span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"comment\">//如果设置了图片，那么需要设置这个属性为YES才能显示圆角效果</span></div><div class=\"line\">    Mylayer.masksToBounds=<span class=\"literal\">YES</span>;</div><div class=\"line\">    <span class=\"comment\">//设置边框</span></div><div class=\"line\">    Mylayer.borderWidth=<span class=\"number\">3</span>;</div><div class=\"line\">    Mylayer.borderColor=[<span class=\"built_in\">UIColor</span> brownColor].CGColor;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//把layer添加到界面上</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:Mylayer];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以。<br>如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以</p>\n<h2 id=\"CAlayer属性\"><a href=\"#CAlayer属性\" class=\"headerlink\" title=\"CAlayer属性\"></a>CAlayer属性</h2><h3 id=\"position和anchorPoint\"><a href=\"#position和anchorPoint\" class=\"headerlink\" title=\"position和anchorPoint\"></a>position和anchorPoint</h3><ul>\n<li>position:设置CALayer在父层中的位置，这个位置要和锚点重合。</li>\n<li>anchorPoint:决定着CALayer身上的哪个点会在position属性所指的位置。以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，<strong>默认值为（0.5, 0.5）</strong></li>\n</ul>\n<h3 id=\"隐式动画\"><a href=\"#隐式动画\" class=\"headerlink\" title=\"隐式动画\"></a>隐式动画</h3><p>每个View内部都关联着一个Root Layer。所有非rootlayer都存在着隐式动画。隐式动画就是对于layer的部分属性进行修改时，默认会产生的一些动画。</p>\n<p>常见的动画属性：</p>\n<ul>\n<li>bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画</li>\n<li>backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画</li>\n<li>position：用于设置CALayer的位置。修改这个属性会产生平移动画</li>\n</ul>\n<h2 id=\"自定义layer\"><a href=\"#自定义layer\" class=\"headerlink\" title=\"自定义layer\"></a>自定义layer</h2><h3 id=\"新建layer类\"><a href=\"#新建layer类\" class=\"headerlink\" title=\"新建layer类\"></a>新建layer类</h3><p>想要在view中画东西，需要自定义view,创建一个类与之关联，让这个类继承自UIView，然后重写它的DrawRect：方法，然后在该方法中画图。</p>\n<p>如果在layer上画东西，与上面的过程类似。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYMylayer.h\"</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYMylayer</span></span></div><div class=\"line\"><span class=\"comment\">//重写该方法，在该方法内绘制图形</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)drawInContext:(<span class=\"built_in\">CGContextRef</span>)ctx</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.绘制图形</span></div><div class=\"line\">    <span class=\"comment\">//画一个圆</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\"><span class=\"comment\">//    [[UIColor yellowColor]set];\t不能这样设置</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">     <span class=\"comment\">//2.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>默认为无色，不会显示。要想让绘制的图形显示出来，还需要设置图形的颜色。注意不能直接使用UI框架中的类</li>\n<li>在自定义layer中的-(void)drawInContext:方法不会自己调用，只能自己通过setNeedDisplay方法调用，在view中画东西DrawRect:方法在view第一次显示的时候会自动调用。</li>\n</ol>\n<p>在view中绘图：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYVIEW.h\"</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYVIEW</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.获取上下文</span></div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> ctx=<span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"comment\">//2.绘制图形</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\">    <span class=\"comment\">//    [[UIColor yellowColor]set];</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"comment\">//3.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">    <span class=\"comment\">//在执行渲染操作的时候，本质上它的内部相当于调用了下面的方法</span></div><div class=\"line\">    <span class=\"comment\">//[self.layer drawInContext:ctx];</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现delegate方法\"><a href=\"#实现delegate方法\" class=\"headerlink\" title=\"实现delegate方法\"></a>实现delegate方法</h3><p>设置viewcontroller为CALayer的delegate，然后让delegate实现drawLayer:inContext:方法，当CALayer需要绘图时，会调用delegate的drawLayer:inContext:方法进行绘图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYViewController</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">//1.创建自定义的layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *layer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//2.设置layer的属性</span></div><div class=\"line\">\t...</div><div class=\"line\">    <span class=\"comment\">//设置代理</span></div><div class=\"line\">    layer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    [layer setNeedsDisplay];</div><div class=\"line\">    <span class=\"comment\">//3.添加layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:layer];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)drawLayer:(<span class=\"built_in\">CALayer</span> *)layer inContext:(<span class=\"built_in\">CGContextRef</span>)ctx&#123;</div><div class=\"line\">    <span class=\"comment\">//1.绘制图形</span></div><div class=\"line\">    <span class=\"comment\">//画一个圆</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\">    <span class=\"comment\">//    [[UIColor yellowColor]set];</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);   </div><div class=\"line\">    <span class=\"comment\">//2.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>在设置代理的时候，它并不要求我们遵守协议，说明这个方法是nsobject中的，就不需要再额外的显示遵守协议了。</li>\n<li>不能再将某个UIView设置为CALayer的delegate，因为UIView对象已经是它内部根层的delegate，再次设置为其他层的delegate就会出问题。</li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ol>\n<li>无论采取哪种方法来自定义层，都必须调用CALayer的setNeedsDisplay方法才能正常绘图。</li>\n<li><strong>当UIView需要显示时</strong>，它内部的层会准备好一个CGContextRef(图形上下文)，然后<strong>调用delegate(这里就是UIView)</strong>的drawLayer:inContext:方法，并且传入已经准备好的CGContextRef对象。而UIView在drawLayer:inContext:方法中又会调用自己的drawRect:方法。平时在drawRect:中通过UIGraphicsGetCurrentContext()获取的就是由层传入的CGContextRef对象，在drawRect:中完成的所有绘图都会填入层的CGContextRef中，然后被拷贝至屏幕。</li>\n</ol>\n","excerpt":"<p>这两天想大致学习下animation的使用方法。看了<a href=\"http://www.cnblogs.com/wendingding/tag/UI高级/\">文顶顶的ios开发UI篇</a>专题，写的很好，学习了很多。再摘录部分，以作备忘。</p>","more":"<h2 id=\"CALayer简介\"><a href=\"#CALayer简介\" class=\"headerlink\" title=\"CALayer简介\"></a>CALayer简介</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>UIView之所以能显示在屏幕上，因为内部的layer。创建UIView的时候自动创建CALayer对象。<br>当UIView需要显示到屏幕上时，会调用drawRect:方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示。<br>UIView本身不具备显示的功能，拥有显示功能的是它内部的图层。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>通过操作这个CALayer对象，可以很方便地调整UIView的一些界面属性，比如：阴影、圆角大小、边框宽度和颜色等。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置边框的宽度为20</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.borderWidth=<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"comment\">//设置边框的颜色(borderColor是CGColor类型)</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.borderColor=[<span class=\"built_in\">UIColor</span> greenColor].CGColor;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置layer的圆角</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.cornerRadius=<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"comment\">//设置超过子图层的部分裁减掉</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.masksToBounds=<span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在view的图层上添加一个image，contents表示接受内容</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.contents=(<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"me\"</span>].CGImage;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置阴影的颜色</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowColor=[<span class=\"built_in\">UIColor</span> blackColor].CGColor;</div><div class=\"line\"><span class=\"comment\">//设置阴影的偏移量，如果为正数，则代表为往右边偏移</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowOffset=<span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">15</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">//设置阴影的透明度(0~1之间，0表示完全透明)</span></div><div class=\"line\"><span class=\"keyword\">self</span>.customView.layer.shadowOpacity=<span class=\"number\">0.6</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//通过uiview设置（2D效果）</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.transform=<span class=\"built_in\">CGAffineTransformMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">-100</span>);</div><div class=\"line\"><span class=\"comment\">//通过layer来设置（3D效果,x，y，z三个方向）</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.transform=<span class=\"built_in\">CATransform3DMakeTranslation</span>(<span class=\"number\">100</span>, <span class=\"number\">20</span>, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">//旋转</span></div><div class=\"line\"><span class=\"keyword\">self</span>.iconView.layer.transform=<span class=\"built_in\">CATransform3DMakeRotation</span>(M_PI_4, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0.5</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建图层\"><a href=\"#创建图层\" class=\"headerlink\" title=\"创建图层\"></a>创建图层</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">//创建一个layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *Mylayer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//设置layer的属性</span></div><div class=\"line\">    Mylayer.bounds=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    Mylayer.position=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置需要显示的图片</span></div><div class=\"line\">    Mylayer.contents=(<span class=\"keyword\">id</span>)[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"me\"</span>].CGImage;</div><div class=\"line\">    <span class=\"comment\">//设置圆角半径为10</span></div><div class=\"line\">    Mylayer.cornerRadius=<span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"comment\">//如果设置了图片，那么需要设置这个属性为YES才能显示圆角效果</span></div><div class=\"line\">    Mylayer.masksToBounds=<span class=\"literal\">YES</span>;</div><div class=\"line\">    <span class=\"comment\">//设置边框</span></div><div class=\"line\">    Mylayer.borderWidth=<span class=\"number\">3</span>;</div><div class=\"line\">    Mylayer.borderColor=[<span class=\"built_in\">UIColor</span> brownColor].CGColor;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//把layer添加到界面上</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:Mylayer];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>对比CALayer，UIView多了一个事件处理的功能。也就是说，CALayer不能处理用户的触摸事件，而UIView可以。<br>如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以</p>\n<h2 id=\"CAlayer属性\"><a href=\"#CAlayer属性\" class=\"headerlink\" title=\"CAlayer属性\"></a>CAlayer属性</h2><h3 id=\"position和anchorPoint\"><a href=\"#position和anchorPoint\" class=\"headerlink\" title=\"position和anchorPoint\"></a>position和anchorPoint</h3><ul>\n<li>position:设置CALayer在父层中的位置，这个位置要和锚点重合。</li>\n<li>anchorPoint:决定着CALayer身上的哪个点会在position属性所指的位置。以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，<strong>默认值为（0.5, 0.5）</strong></li>\n</ul>\n<h3 id=\"隐式动画\"><a href=\"#隐式动画\" class=\"headerlink\" title=\"隐式动画\"></a>隐式动画</h3><p>每个View内部都关联着一个Root Layer。所有非rootlayer都存在着隐式动画。隐式动画就是对于layer的部分属性进行修改时，默认会产生的一些动画。</p>\n<p>常见的动画属性：</p>\n<ul>\n<li>bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画</li>\n<li>backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画</li>\n<li>position：用于设置CALayer的位置。修改这个属性会产生平移动画</li>\n</ul>\n<h2 id=\"自定义layer\"><a href=\"#自定义layer\" class=\"headerlink\" title=\"自定义layer\"></a>自定义layer</h2><h3 id=\"新建layer类\"><a href=\"#新建layer类\" class=\"headerlink\" title=\"新建layer类\"></a>新建layer类</h3><p>想要在view中画东西，需要自定义view,创建一个类与之关联，让这个类继承自UIView，然后重写它的DrawRect：方法，然后在该方法中画图。</p>\n<p>如果在layer上画东西，与上面的过程类似。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYMylayer.h\"</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYMylayer</span></span></div><div class=\"line\"><span class=\"comment\">//重写该方法，在该方法内绘制图形</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)drawInContext:(<span class=\"built_in\">CGContextRef</span>)ctx</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.绘制图形</span></div><div class=\"line\">    <span class=\"comment\">//画一个圆</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\"><span class=\"comment\">//    [[UIColor yellowColor]set];\t不能这样设置</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">     <span class=\"comment\">//2.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>默认为无色，不会显示。要想让绘制的图形显示出来，还需要设置图形的颜色。注意不能直接使用UI框架中的类</li>\n<li>在自定义layer中的-(void)drawInContext:方法不会自己调用，只能自己通过setNeedDisplay方法调用，在view中画东西DrawRect:方法在view第一次显示的时候会自动调用。</li>\n</ol>\n<p>在view中绘图：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYVIEW.h\"</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYVIEW</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)drawRect:(<span class=\"built_in\">CGRect</span>)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.获取上下文</span></div><div class=\"line\">    <span class=\"built_in\">CGContextRef</span> ctx=<span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</div><div class=\"line\">    <span class=\"comment\">//2.绘制图形</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\">    <span class=\"comment\">//    [[UIColor yellowColor]set];</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"comment\">//3.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">    <span class=\"comment\">//在执行渲染操作的时候，本质上它的内部相当于调用了下面的方法</span></div><div class=\"line\">    <span class=\"comment\">//[self.layer drawInContext:ctx];</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"实现delegate方法\"><a href=\"#实现delegate方法\" class=\"headerlink\" title=\"实现delegate方法\"></a>实现delegate方法</h3><p>设置viewcontroller为CALayer的delegate，然后让delegate实现drawLayer:inContext:方法，当CALayer需要绘图时，会调用delegate的drawLayer:inContext:方法进行绘图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYViewController</span></span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">//1.创建自定义的layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *layer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//2.设置layer的属性</span></div><div class=\"line\">\t...</div><div class=\"line\">    <span class=\"comment\">//设置代理</span></div><div class=\"line\">    layer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    [layer setNeedsDisplay];</div><div class=\"line\">    <span class=\"comment\">//3.添加layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:layer];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)drawLayer:(<span class=\"built_in\">CALayer</span> *)layer inContext:(<span class=\"built_in\">CGContextRef</span>)ctx&#123;</div><div class=\"line\">    <span class=\"comment\">//1.绘制图形</span></div><div class=\"line\">    <span class=\"comment\">//画一个圆</span></div><div class=\"line\">    <span class=\"built_in\">CGContextAddEllipseInRect</span>(ctx, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    <span class=\"comment\">//设置属性（颜色）</span></div><div class=\"line\">    <span class=\"comment\">//    [[UIColor yellowColor]set];</span></div><div class=\"line\">    <span class=\"built_in\">CGContextSetRGBFillColor</span>(ctx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);   </div><div class=\"line\">    <span class=\"comment\">//2.渲染</span></div><div class=\"line\">    <span class=\"built_in\">CGContextFillPath</span>(ctx);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>在设置代理的时候，它并不要求我们遵守协议，说明这个方法是nsobject中的，就不需要再额外的显示遵守协议了。</li>\n<li>不能再将某个UIView设置为CALayer的delegate，因为UIView对象已经是它内部根层的delegate，再次设置为其他层的delegate就会出问题。</li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ol>\n<li>无论采取哪种方法来自定义层，都必须调用CALayer的setNeedsDisplay方法才能正常绘图。</li>\n<li><strong>当UIView需要显示时</strong>，它内部的层会准备好一个CGContextRef(图形上下文)，然后<strong>调用delegate(这里就是UIView)</strong>的drawLayer:inContext:方法，并且传入已经准备好的CGContextRef对象。而UIView在drawLayer:inContext:方法中又会调用自己的drawRect:方法。平时在drawRect:中通过UIGraphicsGetCurrentContext()获取的就是由层传入的CGContextRef对象，在drawRect:中完成的所有绘图都会填入层的CGContextRef中，然后被拷贝至屏幕。</li>\n</ol>"},{"title":"UICollectionView 使用方法总结","date":"2016-08-05T06:07:12.000Z","_content":"\nUICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。\n\n<!--more-->\n\n## 视图\nUICollectionView上面显示内容的视图有三种**Cell**视图、**Supplementary View**和**Decoration View**。\n- Cell视图\nCollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。\n- Supplementary View\n它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。\n例如flow layout当中的headers和footers就是可选的Supplementary View。\n- Decoration View\n这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。\n\n## 注册与重用\n### 注册\n在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。\n- registerClass: forCellWithReuseIdentifier:\n- registerNib: forCellWithReuseIdentifier:\n- registerClass: forSupplementaryViewOfKind: withReuseIdentifier:\n- registerNib: forSupplementaryViewOfKind: withReuseIdentifier:\n\n前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。\n\n### 重用\n注册后，调用一下方法进行重用:\n- dequeueReusableCellWithReuseIdentifier:forIndexPath:\n- dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:\n\n## 数据源方法\n### 基本方法\n数据源方法与UITableView类似，主要有：\n- numberOfSectionsInCollectionView:\n- collectionView: numberOfItemsInSection:\n- collectionView: cellForItemAtIndexPath:\n- collectionView: viewForSupplementaryElementOfKind: atIndexPath:\n\n### 添加头部和尾部视图\ncollection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。\n```objc\n-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{\n    if ([kind isEqual:UICollectionElementKindSectionFooter] ) {\n        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];\n        mineTicketListReusableView.delegate = self;\n        return mineTicketListReusableView;\n    }else{\n    \treturn nil;\n    }\n}\n\n```\n\n## 部分代理方法\n###  移动cell\n```objc\n//返回YES允许其item移动\n- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n//移动item时回调\n- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath {\n}\n\n//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势\nUILongPressGestureRecognizer *longGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handlelongGesture:)];\n    [self.collectionView addGestureRecognizer:longGesture];\n    \n//再实现手势操作\n- (void)handlelongGesture:(UILongPressGestureRecognizer *)longGesture {\n    //判断手势状态\n    switch (longGesture.state) {\n        case UIGestureRecognizerStateBegan:{\n            //判断手势落点位置是否在路径上\n            NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:[longGesture locationInView:self.collectionView]];\n            if (indexPath == nil) {\n                break;\n            }\n            //在路径上则开始移动该路径上的cell\n            [self.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];\n        }\n            break;\n        case UIGestureRecognizerStateChanged:\n            //移动过程当中随时更新cell位置\n            [self.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:self.collectionView]];\n            break;\n        case UIGestureRecognizerStateEnded:\n            //移动结束后关闭cell移动\n            [self.collectionView endInteractiveMovement];\n            break;\n        default:\n            [self.collectionView cancelInteractiveMovement];\n            break;\n    }\n}\n\n```\n\n### 点击cell高亮\n```objc\n// 允许选中时，高亮\n-(BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n// 高亮完成后回调  \n// 放大缩小效果\n-(void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(2.0f, 2.0f);\n    }];\n}\n\n// 由高亮转成非高亮完成时的回调  \n-(void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(1.0f, 1.0f);\n    }];\n}\n```\n\n### 点击cell选中\n```objc\n// 设置是否允许选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 设置是否允许取消选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n  \n// 取消选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n```\n\n## FlowLayout代理方法\n### 设置每个item大小\n- @property (CGSize)itemSize\n- -collectionView:ayout:sizeForItemAtIndexPath:\n\n可以设置全局属性也可以对某个cell定制尺寸。\n\n\n### item间隔\n- @property (CGSize) minimumInteritemSpacing\n- @property (CGSize) minimumLineSpacing\n- -collectionView:layout:minimumInteritemSpacingForSectionAtIndex:\n- -collectionView:layout:minimumLineSpacingForSectionAtIndex:\n\n同itemsize，可以设置全局属性也可以定制。\n\n### 缩进（padding）\n- @property UIEdgeInsets sectionInset;\n- -collectionView:layout:insetForSectionAtIndex:\n\n同上。\n\n### 设置headerview的layout\n- @property (CGSize) headerReferenceSize\n- @property (CGSize) footerReferenceSize\n- -collectionView:layout:referenceSizeForHeaderInSection:\n- -collectionView:layout:referenceSizeForFooterInSection:\n\n同上。\n\n## UICollectionViewLayout子类\n## 基本方法\nUICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。\n\n子类需要覆盖父类以下3个方法：\n- prepareLayout\n- layoutAttributesForElementsInRect:(CGRect)rect\n- collectionViewContentSize\n\n---\n应用场景示例：\n为了实现大小不同的cell，可以应用在上文实现UICollectionViewDelegateFlowLayout的协议方法collectionView:layout:sizeForItemAtIndexPath:。但是它会计算每排的最大高度，并不是一个流式视图。\n因此就需要继承UICollectionViewLayout来自己实现一个流式布局的效果。\n\n---\n\n### -(void)prepareLayout\n初始化参数\n\n### -(CGSize)collectionViewContentSize\n布局首先要提供的信息就是滚动区域大小，这样collection view才能正确的管理滚动。布局对象必须在此时计算它内容的总大小，包括supplementary views和decoration views。\n\n### -(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect\n实现必须返回一个包含**UICollectionViewLayoutAttributes**对象的数组.其中包括：中心(center)，尺寸(size)，透明度(alpha)，层级(zIndex)，动画效果(transform3D),隐藏(hidden)等。UICollectionViewLayoutAttributes对象决定了cell的摆设位置（frame）。\n\n传入参数rect是一个包含要显示区域的块。这个块的大小一般为2倍的collectionview的长度，只有滑动即将超过rect的范围，rect才会改变数值，保证了显示范围内的所有元素都在rect内。这个参数只是框定了显示范围，自定义layout的时候并不需要用到这个参数，而是使用contentOffset等属性，设置位置信息。\n\n## 其他设置\n### 对齐 \n- **-(CGPoint)targetContentOffsetForProposedContentOffset:withScrollingVelocity：**\n当手放开时调用，返回值以及参数proposedContentOffset决定了collectionview停止滚动时的偏移量。velocity是滚动速率，有x和y两个分量，正表示向右或向下运动。\n每次移动整数个view的长度，示例代码：\n```objc\n- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity {\n    CGFloat index = roundf((self.scrollDirection == UICollectionViewScrollDirectionVertical ? proposedContentOffset.y : proposedContentOffset.x)/ _itemHeight);\n    if (self.scrollDirection == UICollectionViewScrollDirectionVertical) {\n        proposedContentOffset.y = _itemHeight * index;\n    } else {\n        proposedContentOffset.x = _itemHeight * index;\n    }\n    return proposedContentOffset;\n}\n```\n\n### 对item缩放翻转\n在layoutAttributesForElementsInRect:(CGRect)rect方法中设置**transform3D**的值。transform3D是一个4*4的矩阵，用来控制view的形状。其中：\n- m11主要负责x轴缩放\n- m22主要负责y轴缩放\n- m33主要负责z轴缩放\n- 其余值综合控制旋转与翻折\n\n具体使用方法以后再写。\n\n### 是否刷新布局\n```objc\n-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds\n{\n    return !CGRectEqualToRect(newBounds, self.collectionView.bounds);\n}\n```\n划出范围就会调用该方法，控制是否刷新视图。如果返回no，那么久不会再调用prepareLayout以及layoutAttributesForElementsInRect等方法。\n\n### 删除item\n```\n-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    [self.dataArr removeObjectAtIndex:indexPath.item];\n    //TODO:  这个方法 特别注意 删除item的方法\n    [self.myCollectionView deleteItemsAtIndexPaths:@[indexPath]];\n}\n```\n\n\n\n\n","source":"_posts/collectionView.md","raw":"title: UICollectionView 使用方法总结\ndate: 2016/8/5 14:07:12  \ncategories: IOS\ntags: [UICollectionView]\n\n---\n\nUICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。\n\n<!--more-->\n\n## 视图\nUICollectionView上面显示内容的视图有三种**Cell**视图、**Supplementary View**和**Decoration View**。\n- Cell视图\nCollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。\n- Supplementary View\n它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。\n例如flow layout当中的headers和footers就是可选的Supplementary View。\n- Decoration View\n这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。\n\n## 注册与重用\n### 注册\n在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。\n- registerClass: forCellWithReuseIdentifier:\n- registerNib: forCellWithReuseIdentifier:\n- registerClass: forSupplementaryViewOfKind: withReuseIdentifier:\n- registerNib: forSupplementaryViewOfKind: withReuseIdentifier:\n\n前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。\n\n### 重用\n注册后，调用一下方法进行重用:\n- dequeueReusableCellWithReuseIdentifier:forIndexPath:\n- dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:\n\n## 数据源方法\n### 基本方法\n数据源方法与UITableView类似，主要有：\n- numberOfSectionsInCollectionView:\n- collectionView: numberOfItemsInSection:\n- collectionView: cellForItemAtIndexPath:\n- collectionView: viewForSupplementaryElementOfKind: atIndexPath:\n\n### 添加头部和尾部视图\ncollection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。\n```objc\n-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{\n    if ([kind isEqual:UICollectionElementKindSectionFooter] ) {\n        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];\n        mineTicketListReusableView.delegate = self;\n        return mineTicketListReusableView;\n    }else{\n    \treturn nil;\n    }\n}\n\n```\n\n## 部分代理方法\n###  移动cell\n```objc\n//返回YES允许其item移动\n- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n//移动item时回调\n- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath {\n}\n\n//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势\nUILongPressGestureRecognizer *longGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handlelongGesture:)];\n    [self.collectionView addGestureRecognizer:longGesture];\n    \n//再实现手势操作\n- (void)handlelongGesture:(UILongPressGestureRecognizer *)longGesture {\n    //判断手势状态\n    switch (longGesture.state) {\n        case UIGestureRecognizerStateBegan:{\n            //判断手势落点位置是否在路径上\n            NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:[longGesture locationInView:self.collectionView]];\n            if (indexPath == nil) {\n                break;\n            }\n            //在路径上则开始移动该路径上的cell\n            [self.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];\n        }\n            break;\n        case UIGestureRecognizerStateChanged:\n            //移动过程当中随时更新cell位置\n            [self.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:self.collectionView]];\n            break;\n        case UIGestureRecognizerStateEnded:\n            //移动结束后关闭cell移动\n            [self.collectionView endInteractiveMovement];\n            break;\n        default:\n            [self.collectionView cancelInteractiveMovement];\n            break;\n    }\n}\n\n```\n\n### 点击cell高亮\n```objc\n// 允许选中时，高亮\n-(BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n// 高亮完成后回调  \n// 放大缩小效果\n-(void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(2.0f, 2.0f);\n    }];\n}\n\n// 由高亮转成非高亮完成时的回调  \n-(void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(1.0f, 1.0f);\n    }];\n}\n```\n\n### 点击cell选中\n```objc\n// 设置是否允许选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 设置是否允许取消选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n  \n// 取消选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n```\n\n## FlowLayout代理方法\n### 设置每个item大小\n- @property (CGSize)itemSize\n- -collectionView:ayout:sizeForItemAtIndexPath:\n\n可以设置全局属性也可以对某个cell定制尺寸。\n\n\n### item间隔\n- @property (CGSize) minimumInteritemSpacing\n- @property (CGSize) minimumLineSpacing\n- -collectionView:layout:minimumInteritemSpacingForSectionAtIndex:\n- -collectionView:layout:minimumLineSpacingForSectionAtIndex:\n\n同itemsize，可以设置全局属性也可以定制。\n\n### 缩进（padding）\n- @property UIEdgeInsets sectionInset;\n- -collectionView:layout:insetForSectionAtIndex:\n\n同上。\n\n### 设置headerview的layout\n- @property (CGSize) headerReferenceSize\n- @property (CGSize) footerReferenceSize\n- -collectionView:layout:referenceSizeForHeaderInSection:\n- -collectionView:layout:referenceSizeForFooterInSection:\n\n同上。\n\n## UICollectionViewLayout子类\n## 基本方法\nUICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。\n\n子类需要覆盖父类以下3个方法：\n- prepareLayout\n- layoutAttributesForElementsInRect:(CGRect)rect\n- collectionViewContentSize\n\n---\n应用场景示例：\n为了实现大小不同的cell，可以应用在上文实现UICollectionViewDelegateFlowLayout的协议方法collectionView:layout:sizeForItemAtIndexPath:。但是它会计算每排的最大高度，并不是一个流式视图。\n因此就需要继承UICollectionViewLayout来自己实现一个流式布局的效果。\n\n---\n\n### -(void)prepareLayout\n初始化参数\n\n### -(CGSize)collectionViewContentSize\n布局首先要提供的信息就是滚动区域大小，这样collection view才能正确的管理滚动。布局对象必须在此时计算它内容的总大小，包括supplementary views和decoration views。\n\n### -(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect\n实现必须返回一个包含**UICollectionViewLayoutAttributes**对象的数组.其中包括：中心(center)，尺寸(size)，透明度(alpha)，层级(zIndex)，动画效果(transform3D),隐藏(hidden)等。UICollectionViewLayoutAttributes对象决定了cell的摆设位置（frame）。\n\n传入参数rect是一个包含要显示区域的块。这个块的大小一般为2倍的collectionview的长度，只有滑动即将超过rect的范围，rect才会改变数值，保证了显示范围内的所有元素都在rect内。这个参数只是框定了显示范围，自定义layout的时候并不需要用到这个参数，而是使用contentOffset等属性，设置位置信息。\n\n## 其他设置\n### 对齐 \n- **-(CGPoint)targetContentOffsetForProposedContentOffset:withScrollingVelocity：**\n当手放开时调用，返回值以及参数proposedContentOffset决定了collectionview停止滚动时的偏移量。velocity是滚动速率，有x和y两个分量，正表示向右或向下运动。\n每次移动整数个view的长度，示例代码：\n```objc\n- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity {\n    CGFloat index = roundf((self.scrollDirection == UICollectionViewScrollDirectionVertical ? proposedContentOffset.y : proposedContentOffset.x)/ _itemHeight);\n    if (self.scrollDirection == UICollectionViewScrollDirectionVertical) {\n        proposedContentOffset.y = _itemHeight * index;\n    } else {\n        proposedContentOffset.x = _itemHeight * index;\n    }\n    return proposedContentOffset;\n}\n```\n\n### 对item缩放翻转\n在layoutAttributesForElementsInRect:(CGRect)rect方法中设置**transform3D**的值。transform3D是一个4*4的矩阵，用来控制view的形状。其中：\n- m11主要负责x轴缩放\n- m22主要负责y轴缩放\n- m33主要负责z轴缩放\n- 其余值综合控制旋转与翻折\n\n具体使用方法以后再写。\n\n### 是否刷新布局\n```objc\n-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds\n{\n    return !CGRectEqualToRect(newBounds, self.collectionView.bounds);\n}\n```\n划出范围就会调用该方法，控制是否刷新视图。如果返回no，那么久不会再调用prepareLayout以及layoutAttributesForElementsInRect等方法。\n\n### 删除item\n```\n-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    [self.dataArr removeObjectAtIndex:indexPath.item];\n    //TODO:  这个方法 特别注意 删除item的方法\n    [self.myCollectionView deleteItemsAtIndexPaths:@[indexPath]];\n}\n```\n\n\n\n\n","slug":"collectionView","published":1,"updated":"2016-08-09T14:41:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqk0005weruab9r7l6v","content":"<p>UICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>UICollectionView上面显示内容的视图有三种<strong>Cell</strong>视图、<strong>Supplementary View</strong>和<strong>Decoration View</strong>。</p>\n<ul>\n<li>Cell视图<br>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</li>\n<li>Supplementary View<br>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。<br>例如flow layout当中的headers和footers就是可选的Supplementary View。</li>\n<li>Decoration View<br>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</li>\n</ul>\n<h2 id=\"注册与重用\"><a href=\"#注册与重用\" class=\"headerlink\" title=\"注册与重用\"></a>注册与重用</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。</p>\n<ul>\n<li>registerClass: forCellWithReuseIdentifier:</li>\n<li>registerNib: forCellWithReuseIdentifier:</li>\n<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n<li>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n</ul>\n<p>前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。</p>\n<h3 id=\"重用\"><a href=\"#重用\" class=\"headerlink\" title=\"重用\"></a>重用</h3><p>注册后，调用一下方法进行重用:</p>\n<ul>\n<li>dequeueReusableCellWithReuseIdentifier:forIndexPath:</li>\n<li>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</li>\n</ul>\n<h2 id=\"数据源方法\"><a href=\"#数据源方法\" class=\"headerlink\" title=\"数据源方法\"></a>数据源方法</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><p>数据源方法与UITableView类似，主要有：</p>\n<ul>\n<li>numberOfSectionsInCollectionView:</li>\n<li>collectionView: numberOfItemsInSection:</li>\n<li>collectionView: cellForItemAtIndexPath:</li>\n<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>\n</ul>\n<h3 id=\"添加头部和尾部视图\"><a href=\"#添加头部和尾部视图\" class=\"headerlink\" title=\"添加头部和尾部视图\"></a>添加头部和尾部视图</h3><p>collection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UICollectionReusableView</span> *)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView viewForSupplementaryElementOfKind:(<span class=\"built_in\">NSString</span> *)kind atIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([kind isEqual:<span class=\"built_in\">UICollectionElementKindSectionFooter</span>] ) &#123;</div><div class=\"line\">        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:<span class=\"built_in\">UICollectionElementKindSectionFooter</span> withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];</div><div class=\"line\">        mineTicketListReusableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> mineTicketListReusableView;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"部分代理方法\"><a href=\"#部分代理方法\" class=\"headerlink\" title=\"部分代理方法\"></a>部分代理方法</h2><h3 id=\"移动cell\"><a href=\"#移动cell\" class=\"headerlink\" title=\"移动cell\"></a>移动cell</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回YES允许其item移动</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView canMoveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移动item时回调</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView moveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)destinationIndexPath &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势</span></div><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longGesture = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(handlelongGesture:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.collectionView addGestureRecognizer:longGesture];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//再实现手势操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)handlelongGesture:(<span class=\"built_in\">UILongPressGestureRecognizer</span> *)longGesture &#123;</div><div class=\"line\">    <span class=\"comment\">//判断手势状态</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (longGesture.state) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateBegan</span>:&#123;</div><div class=\"line\">            <span class=\"comment\">//判断手势落点位置是否在路径上</span></div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.collectionView indexPathForItemAtPoint:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (indexPath == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//在路径上则开始移动该路径上的cell</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];</div><div class=\"line\">        &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateChanged</span>:</div><div class=\"line\">            <span class=\"comment\">//移动过程当中随时更新cell位置</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateEnded</span>:</div><div class=\"line\">            <span class=\"comment\">//移动结束后关闭cell移动</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView endInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView cancelInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell高亮\"><a href=\"#点击cell高亮\" class=\"headerlink\" title=\"点击cell高亮\"></a>点击cell高亮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 允许选中时，高亮</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 高亮完成后回调  </span></div><div class=\"line\"><span class=\"comment\">// 放大缩小效果</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">2.0</span>f, <span class=\"number\">2.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由高亮转成非高亮完成时的回调  </span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didUnhighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell选中\"><a href=\"#点击cell选中\" class=\"headerlink\" title=\"点击cell选中\"></a>点击cell选中</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置是否允许选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 设置是否允许取消选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 取消选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"FlowLayout代理方法\"><a href=\"#FlowLayout代理方法\" class=\"headerlink\" title=\"FlowLayout代理方法\"></a>FlowLayout代理方法</h2><h3 id=\"设置每个item大小\"><a href=\"#设置每个item大小\" class=\"headerlink\" title=\"设置每个item大小\"></a>设置每个item大小</h3><ul>\n<li>@property (CGSize)itemSize</li>\n<li>-collectionView:ayout:sizeForItemAtIndexPath:</li>\n</ul>\n<p>可以设置全局属性也可以对某个cell定制尺寸。</p>\n<h3 id=\"item间隔\"><a href=\"#item间隔\" class=\"headerlink\" title=\"item间隔\"></a>item间隔</h3><ul>\n<li>@property (CGSize) minimumInteritemSpacing</li>\n<li>@property (CGSize) minimumLineSpacing</li>\n<li>-collectionView:layout:minimumInteritemSpacingForSectionAtIndex:</li>\n<li>-collectionView:layout:minimumLineSpacingForSectionAtIndex:</li>\n</ul>\n<p>同itemsize，可以设置全局属性也可以定制。</p>\n<h3 id=\"缩进（padding）\"><a href=\"#缩进（padding）\" class=\"headerlink\" title=\"缩进（padding）\"></a>缩进（padding）</h3><ul>\n<li>@property UIEdgeInsets sectionInset;</li>\n<li>-collectionView:layout:insetForSectionAtIndex:</li>\n</ul>\n<p>同上。</p>\n<h3 id=\"设置headerview的layout\"><a href=\"#设置headerview的layout\" class=\"headerlink\" title=\"设置headerview的layout\"></a>设置headerview的layout</h3><ul>\n<li>@property (CGSize) headerReferenceSize</li>\n<li>@property (CGSize) footerReferenceSize</li>\n<li>-collectionView:layout:referenceSizeForHeaderInSection:</li>\n<li>-collectionView:layout:referenceSizeForFooterInSection:</li>\n</ul>\n<p>同上。</p>\n<h2 id=\"UICollectionViewLayout子类\"><a href=\"#UICollectionViewLayout子类\" class=\"headerlink\" title=\"UICollectionViewLayout子类\"></a>UICollectionViewLayout子类</h2><h2 id=\"基本方法-1\"><a href=\"#基本方法-1\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h2><p>UICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。</p>\n<p>子类需要覆盖父类以下3个方法：</p>\n<ul>\n<li>prepareLayout</li>\n<li>layoutAttributesForElementsInRect:(CGRect)rect</li>\n<li>collectionViewContentSize</li>\n</ul>\n<hr>\n<p>应用场景示例：<br>为了实现大小不同的cell，可以应用在上文实现UICollectionViewDelegateFlowLayout的协议方法collectionView:layout:sizeForItemAtIndexPath:。但是它会计算每排的最大高度，并不是一个流式视图。<br>因此就需要继承UICollectionViewLayout来自己实现一个流式布局的效果。</p>\n<hr>\n<h3 id=\"void-prepareLayout\"><a href=\"#void-prepareLayout\" class=\"headerlink\" title=\"-(void)prepareLayout\"></a>-(void)prepareLayout</h3><p>初始化参数</p>\n<h3 id=\"CGSize-collectionViewContentSize\"><a href=\"#CGSize-collectionViewContentSize\" class=\"headerlink\" title=\"-(CGSize)collectionViewContentSize\"></a>-(CGSize)collectionViewContentSize</h3><p>布局首先要提供的信息就是滚动区域大小，这样collection view才能正确的管理滚动。布局对象必须在此时计算它内容的总大小，包括supplementary views和decoration views。</p>\n<h3 id=\"NSArray-layoutAttributesForElementsInRect-CGRect-rect\"><a href=\"#NSArray-layoutAttributesForElementsInRect-CGRect-rect\" class=\"headerlink\" title=\"-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect\"></a>-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect</h3><p>实现必须返回一个包含<strong>UICollectionViewLayoutAttributes</strong>对象的数组.其中包括：中心(center)，尺寸(size)，透明度(alpha)，层级(zIndex)，动画效果(transform3D),隐藏(hidden)等。UICollectionViewLayoutAttributes对象决定了cell的摆设位置（frame）。</p>\n<p>传入参数rect是一个包含要显示区域的块。这个块的大小一般为2倍的collectionview的长度，只有滑动即将超过rect的范围，rect才会改变数值，保证了显示范围内的所有元素都在rect内。这个参数只是框定了显示范围，自定义layout的时候并不需要用到这个参数，而是使用contentOffset等属性，设置位置信息。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h3><ul>\n<li><strong>-(CGPoint)targetContentOffsetForProposedContentOffset:withScrollingVelocity：</strong><br>当手放开时调用，返回值以及参数proposedContentOffset决定了collectionview停止滚动时的偏移量。velocity是滚动速率，有x和y两个分量，正表示向右或向下运动。<br>每次移动整数个view的长度，示例代码：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)targetContentOffsetForProposedContentOffset:(<span class=\"built_in\">CGPoint</span>)proposedContentOffset withScrollingVelocity:(<span class=\"built_in\">CGPoint</span>)velocity &#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> index = roundf((<span class=\"keyword\">self</span>.scrollDirection == <span class=\"built_in\">UICollectionViewScrollDirectionVertical</span> ? proposedContentOffset.y : proposedContentOffset.x)/ _itemHeight);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.scrollDirection == <span class=\"built_in\">UICollectionViewScrollDirectionVertical</span>) &#123;</div><div class=\"line\">        proposedContentOffset.y = _itemHeight * index;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        proposedContentOffset.x = _itemHeight * index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> proposedContentOffset;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"对item缩放翻转\"><a href=\"#对item缩放翻转\" class=\"headerlink\" title=\"对item缩放翻转\"></a>对item缩放翻转</h3><p>在layoutAttributesForElementsInRect:(CGRect)rect方法中设置<strong>transform3D</strong>的值。transform3D是一个4*4的矩阵，用来控制view的形状。其中：</p>\n<ul>\n<li>m11主要负责x轴缩放</li>\n<li>m22主要负责y轴缩放</li>\n<li>m33主要负责z轴缩放</li>\n<li>其余值综合控制旋转与翻折</li>\n</ul>\n<p>具体使用方法以后再写。</p>\n<h3 id=\"是否刷新布局\"><a href=\"#是否刷新布局\" class=\"headerlink\" title=\"是否刷新布局\"></a>是否刷新布局</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)shouldInvalidateLayoutForBoundsChange:(<span class=\"built_in\">CGRect</span>)newBounds</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">CGRectEqualToRect</span>(newBounds, <span class=\"keyword\">self</span>.collectionView.bounds);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>划出范围就会调用该方法，控制是否刷新视图。如果返回no，那么久不会再调用prepareLayout以及layoutAttributesForElementsInRect等方法。</p>\n<h3 id=\"删除item\"><a href=\"#删除item\" class=\"headerlink\" title=\"删除item\"></a>删除item</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    [self.dataArr removeObjectAtIndex:indexPath.item];</div><div class=\"line\">    //TODO:  这个方法 特别注意 删除item的方法</div><div class=\"line\">    [self.myCollectionView deleteItemsAtIndexPaths:@[indexPath]];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>UICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。</p>","more":"<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>UICollectionView上面显示内容的视图有三种<strong>Cell</strong>视图、<strong>Supplementary View</strong>和<strong>Decoration View</strong>。</p>\n<ul>\n<li>Cell视图<br>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</li>\n<li>Supplementary View<br>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。<br>例如flow layout当中的headers和footers就是可选的Supplementary View。</li>\n<li>Decoration View<br>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</li>\n</ul>\n<h2 id=\"注册与重用\"><a href=\"#注册与重用\" class=\"headerlink\" title=\"注册与重用\"></a>注册与重用</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。</p>\n<ul>\n<li>registerClass: forCellWithReuseIdentifier:</li>\n<li>registerNib: forCellWithReuseIdentifier:</li>\n<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n<li>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n</ul>\n<p>前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。</p>\n<h3 id=\"重用\"><a href=\"#重用\" class=\"headerlink\" title=\"重用\"></a>重用</h3><p>注册后，调用一下方法进行重用:</p>\n<ul>\n<li>dequeueReusableCellWithReuseIdentifier:forIndexPath:</li>\n<li>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</li>\n</ul>\n<h2 id=\"数据源方法\"><a href=\"#数据源方法\" class=\"headerlink\" title=\"数据源方法\"></a>数据源方法</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><p>数据源方法与UITableView类似，主要有：</p>\n<ul>\n<li>numberOfSectionsInCollectionView:</li>\n<li>collectionView: numberOfItemsInSection:</li>\n<li>collectionView: cellForItemAtIndexPath:</li>\n<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>\n</ul>\n<h3 id=\"添加头部和尾部视图\"><a href=\"#添加头部和尾部视图\" class=\"headerlink\" title=\"添加头部和尾部视图\"></a>添加头部和尾部视图</h3><p>collection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UICollectionReusableView</span> *)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView viewForSupplementaryElementOfKind:(<span class=\"built_in\">NSString</span> *)kind atIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([kind isEqual:<span class=\"built_in\">UICollectionElementKindSectionFooter</span>] ) &#123;</div><div class=\"line\">        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:<span class=\"built_in\">UICollectionElementKindSectionFooter</span> withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];</div><div class=\"line\">        mineTicketListReusableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> mineTicketListReusableView;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"部分代理方法\"><a href=\"#部分代理方法\" class=\"headerlink\" title=\"部分代理方法\"></a>部分代理方法</h2><h3 id=\"移动cell\"><a href=\"#移动cell\" class=\"headerlink\" title=\"移动cell\"></a>移动cell</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回YES允许其item移动</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView canMoveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移动item时回调</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView moveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)destinationIndexPath &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势</span></div><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longGesture = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(handlelongGesture:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.collectionView addGestureRecognizer:longGesture];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//再实现手势操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)handlelongGesture:(<span class=\"built_in\">UILongPressGestureRecognizer</span> *)longGesture &#123;</div><div class=\"line\">    <span class=\"comment\">//判断手势状态</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (longGesture.state) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateBegan</span>:&#123;</div><div class=\"line\">            <span class=\"comment\">//判断手势落点位置是否在路径上</span></div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.collectionView indexPathForItemAtPoint:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (indexPath == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//在路径上则开始移动该路径上的cell</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];</div><div class=\"line\">        &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateChanged</span>:</div><div class=\"line\">            <span class=\"comment\">//移动过程当中随时更新cell位置</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateEnded</span>:</div><div class=\"line\">            <span class=\"comment\">//移动结束后关闭cell移动</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView endInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView cancelInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell高亮\"><a href=\"#点击cell高亮\" class=\"headerlink\" title=\"点击cell高亮\"></a>点击cell高亮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 允许选中时，高亮</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 高亮完成后回调  </span></div><div class=\"line\"><span class=\"comment\">// 放大缩小效果</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">2.0</span>f, <span class=\"number\">2.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由高亮转成非高亮完成时的回调  </span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didUnhighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell选中\"><a href=\"#点击cell选中\" class=\"headerlink\" title=\"点击cell选中\"></a>点击cell选中</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置是否允许选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 设置是否允许取消选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 取消选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"FlowLayout代理方法\"><a href=\"#FlowLayout代理方法\" class=\"headerlink\" title=\"FlowLayout代理方法\"></a>FlowLayout代理方法</h2><h3 id=\"设置每个item大小\"><a href=\"#设置每个item大小\" class=\"headerlink\" title=\"设置每个item大小\"></a>设置每个item大小</h3><ul>\n<li>@property (CGSize)itemSize</li>\n<li>-collectionView:ayout:sizeForItemAtIndexPath:</li>\n</ul>\n<p>可以设置全局属性也可以对某个cell定制尺寸。</p>\n<h3 id=\"item间隔\"><a href=\"#item间隔\" class=\"headerlink\" title=\"item间隔\"></a>item间隔</h3><ul>\n<li>@property (CGSize) minimumInteritemSpacing</li>\n<li>@property (CGSize) minimumLineSpacing</li>\n<li>-collectionView:layout:minimumInteritemSpacingForSectionAtIndex:</li>\n<li>-collectionView:layout:minimumLineSpacingForSectionAtIndex:</li>\n</ul>\n<p>同itemsize，可以设置全局属性也可以定制。</p>\n<h3 id=\"缩进（padding）\"><a href=\"#缩进（padding）\" class=\"headerlink\" title=\"缩进（padding）\"></a>缩进（padding）</h3><ul>\n<li>@property UIEdgeInsets sectionInset;</li>\n<li>-collectionView:layout:insetForSectionAtIndex:</li>\n</ul>\n<p>同上。</p>\n<h3 id=\"设置headerview的layout\"><a href=\"#设置headerview的layout\" class=\"headerlink\" title=\"设置headerview的layout\"></a>设置headerview的layout</h3><ul>\n<li>@property (CGSize) headerReferenceSize</li>\n<li>@property (CGSize) footerReferenceSize</li>\n<li>-collectionView:layout:referenceSizeForHeaderInSection:</li>\n<li>-collectionView:layout:referenceSizeForFooterInSection:</li>\n</ul>\n<p>同上。</p>\n<h2 id=\"UICollectionViewLayout子类\"><a href=\"#UICollectionViewLayout子类\" class=\"headerlink\" title=\"UICollectionViewLayout子类\"></a>UICollectionViewLayout子类</h2><h2 id=\"基本方法-1\"><a href=\"#基本方法-1\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h2><p>UICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。</p>\n<p>子类需要覆盖父类以下3个方法：</p>\n<ul>\n<li>prepareLayout</li>\n<li>layoutAttributesForElementsInRect:(CGRect)rect</li>\n<li>collectionViewContentSize</li>\n</ul>\n<hr>\n<p>应用场景示例：<br>为了实现大小不同的cell，可以应用在上文实现UICollectionViewDelegateFlowLayout的协议方法collectionView:layout:sizeForItemAtIndexPath:。但是它会计算每排的最大高度，并不是一个流式视图。<br>因此就需要继承UICollectionViewLayout来自己实现一个流式布局的效果。</p>\n<hr>\n<h3 id=\"void-prepareLayout\"><a href=\"#void-prepareLayout\" class=\"headerlink\" title=\"-(void)prepareLayout\"></a>-(void)prepareLayout</h3><p>初始化参数</p>\n<h3 id=\"CGSize-collectionViewContentSize\"><a href=\"#CGSize-collectionViewContentSize\" class=\"headerlink\" title=\"-(CGSize)collectionViewContentSize\"></a>-(CGSize)collectionViewContentSize</h3><p>布局首先要提供的信息就是滚动区域大小，这样collection view才能正确的管理滚动。布局对象必须在此时计算它内容的总大小，包括supplementary views和decoration views。</p>\n<h3 id=\"NSArray-layoutAttributesForElementsInRect-CGRect-rect\"><a href=\"#NSArray-layoutAttributesForElementsInRect-CGRect-rect\" class=\"headerlink\" title=\"-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect\"></a>-(NSArray *)layoutAttributesForElementsInRect:(CGRect)rect</h3><p>实现必须返回一个包含<strong>UICollectionViewLayoutAttributes</strong>对象的数组.其中包括：中心(center)，尺寸(size)，透明度(alpha)，层级(zIndex)，动画效果(transform3D),隐藏(hidden)等。UICollectionViewLayoutAttributes对象决定了cell的摆设位置（frame）。</p>\n<p>传入参数rect是一个包含要显示区域的块。这个块的大小一般为2倍的collectionview的长度，只有滑动即将超过rect的范围，rect才会改变数值，保证了显示范围内的所有元素都在rect内。这个参数只是框定了显示范围，自定义layout的时候并不需要用到这个参数，而是使用contentOffset等属性，设置位置信息。</p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a>其他设置</h2><h3 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h3><ul>\n<li><strong>-(CGPoint)targetContentOffsetForProposedContentOffset:withScrollingVelocity：</strong><br>当手放开时调用，返回值以及参数proposedContentOffset决定了collectionview停止滚动时的偏移量。velocity是滚动速率，有x和y两个分量，正表示向右或向下运动。<br>每次移动整数个view的长度，示例代码：<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)targetContentOffsetForProposedContentOffset:(<span class=\"built_in\">CGPoint</span>)proposedContentOffset withScrollingVelocity:(<span class=\"built_in\">CGPoint</span>)velocity &#123;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> index = roundf((<span class=\"keyword\">self</span>.scrollDirection == <span class=\"built_in\">UICollectionViewScrollDirectionVertical</span> ? proposedContentOffset.y : proposedContentOffset.x)/ _itemHeight);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.scrollDirection == <span class=\"built_in\">UICollectionViewScrollDirectionVertical</span>) &#123;</div><div class=\"line\">        proposedContentOffset.y = _itemHeight * index;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        proposedContentOffset.x = _itemHeight * index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> proposedContentOffset;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"对item缩放翻转\"><a href=\"#对item缩放翻转\" class=\"headerlink\" title=\"对item缩放翻转\"></a>对item缩放翻转</h3><p>在layoutAttributesForElementsInRect:(CGRect)rect方法中设置<strong>transform3D</strong>的值。transform3D是一个4*4的矩阵，用来控制view的形状。其中：</p>\n<ul>\n<li>m11主要负责x轴缩放</li>\n<li>m22主要负责y轴缩放</li>\n<li>m33主要负责z轴缩放</li>\n<li>其余值综合控制旋转与翻折</li>\n</ul>\n<p>具体使用方法以后再写。</p>\n<h3 id=\"是否刷新布局\"><a href=\"#是否刷新布局\" class=\"headerlink\" title=\"是否刷新布局\"></a>是否刷新布局</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)shouldInvalidateLayoutForBoundsChange:(<span class=\"built_in\">CGRect</span>)newBounds</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">CGRectEqualToRect</span>(newBounds, <span class=\"keyword\">self</span>.collectionView.bounds);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>划出范围就会调用该方法，控制是否刷新视图。如果返回no，那么久不会再调用prepareLayout以及layoutAttributesForElementsInRect等方法。</p>\n<h3 id=\"删除item\"><a href=\"#删除item\" class=\"headerlink\" title=\"删除item\"></a>删除item</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    [self.dataArr removeObjectAtIndex:indexPath.item];</div><div class=\"line\">    //TODO:  这个方法 特别注意 删除item的方法</div><div class=\"line\">    [self.myCollectionView deleteItemsAtIndexPaths:@[indexPath]];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ios编程(第四版) 学习笔记","date":"2016-07-31T06:07:12.000Z","_content":"\n本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。\n\n<!--more-->\n## 第一个ios应用\n### 声明插座变量\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n声明了一个叫questionLabel的插座变量.  \n**IBOutlet**告诉Xcode需要使用Interface Builder关联该插座变量。\n\n### 声明动作方法\n```objc\n- (IBAction)showQuestion:(id)sender{\n\t……\n}\n```\n**IBAction**关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。\n\n### 应用图标\nImages.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。\n\n## objective-c\n### 类方法\n实例方法使用的字符是-，类方法使用字符+。  \n类方法作用通常是创建对象，获取类的某些全局属性。\n\n## 通过ARC管理内存\n### copy\n当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。  \n当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。\n\n## 视图与视图层次结构\n### 视图层次结构\n任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。\n层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。\n\n### 创建UIView子类\nUIView子类模板会自动生成一个方法 **initWithFrame:**，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。\n\n```objc\n@property （nonatomic） CGRect frame；\n```\n\nCGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。    \n创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；\n  \n可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。  \n每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。  \nbounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。\n\n### 图形绘制\n没看\n\n## 视图：重绘与UIScrollView\n### ScrollView\n设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。  \n在scrollview中addSubView。\n\n## 视图控制器\n### 视图控制器\n视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。\n使用UITabBarController的类在两个视图控制器间切换。  \n\nUIViewController有一个重要属性：\n\n```objc \n@property (nonatomic, strong) UIView *view;\n```\n\n这个view就是视图的根视图。\n\n### 创建视图层次结构\n1. 覆盖UIViewController的loadView方法\n```objc\n-(void)loadView{\n        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];\n        self.view = backgroundView;\n}\n```\n\n\t此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。\n2. 通过xib创建\n.m中声明各个控件(注意控件使用弱引用)\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n\n\t再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。\n\n### 设置根视图控制器\nUIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。\n```objc\nBNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];\nself.window.rootViewController = hvc;\n```\n\nsetRootViewController其实就是将ViewController的view设置为其subview。\n\n### 加载nib文件\n加载不同名的nib文件时，需要使用**initWithNibName:Bundle:**方法。该方法的两个参数，分别用于指定NIB文件文件名和其**所在的程序包**。如果是Bundle传入nil默认是[NSBundle mainBundle];\n\n### UITabBarController\nUITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   \n\n在APPDelegate中创建两个视图控制器，加入Tabbar的**viewControllers**属性中，并将tabbar设置为rootViewController\n```objc\nUITabBarController *tabBarController = [[UITabBarController alloc] init];\ntabBarController.viewControllers = @[hvc,rvc] //两个viewController 可以写在tabbarController的viewDidLoad方法里\nself.window.rootViewController = tabBarController;\n```\n\n设置标签项，使用**tabBarItem**属性：\n\n```objc\n    UIImage *orderImage = [UIImage imageNamed:@\"tab_order\"];\n    UIImage *orderImageSel = [UIImage imageNamed:@\"tab_order_active\"];\n    orderImage = [orderImage imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    orderImageSel = [orderImageSel imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    UITabBarItem *orderTabBarItem = [[UITabBarItem alloc] initWithTitle:@\"订单\" image:orderImage selectedImage:orderImageSel];\n    orderNav.tabBarItem = orderTabBarItem;\n```\n\n为tabbar添加subview，UITabBarController里有一个**tabBar**的view\n\n```objc\nUIView *backview = [[UIView alloc] initWithFrame:self.tabBar.bounds];\n[backview setBackgroundColor:[UIColor whiteColor]];\n[self.tabBar addSubview:backview];\n```\n\n\n### 本地通知\n本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。\n```objc\nUILocalNotification *note = [][UILocalNotification alloc] init];\nnote.alertBody = @\"xxx\";\nnote.fireDate = date;\n[[UIApplication sharedApplication] scheduleLocalNotification:note];\n```\n\n### 加载和显示视图\nviewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。  \n另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。\n  \n如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。\n\n### 与视图控制器及其视图交互\n**application:didFinishLaunchingWithOptions:**\t该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。      \n**initWithNibName：bundle：**该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。  \n**loadView：**覆盖该方法，使用代码方式设置视图控制的的view属性。  \n**viewDidLoad：**该方法会在视图控制器加载完视图后被调用。  \n**viewWillAppear：**该方法会在视图控制器的view显示在屏幕上时被调用。  \n\n## 委托与文本输入\n### 委托（代理模式）\n当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。  \n例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  \n\n类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。\n\n### 协议\n凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  \n\n协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束  \n使用@optional指令，可以将写在指令后的全部声明为可选的。  \n发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  \n\n声明示例：\n```objc\n@interface BNRHypnosisViewController()<UITextFieldDelegate>\n@end\n```\n### 设置异常断点\n当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。\n\n### 类方法与实例方法\n这里需要注意：\n1. 类方法可以调用类方法。\n2. 类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。\n3. 类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。\n + 实例方法里面的self，是对象的首地址。\n + 类方法里面的self，是Class.\n4. 类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。\n\n## UITableView与UITableViewController\n### UITableView 的样式\n1. UITableViewStylePlain\n2. UITableViewStyleGrouped\n\n```objc\nUITableView *tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyle];\n```\n\n其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源.  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议\n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n@property (nonatomic) UITableView *taskTable;\n@property (nonatomic) NSMutable Array *tasks;\n@end\n```\n\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n\n```objc\nself.taskTable.dataSource = self;\n```\n\nUITableViewDataSource设置了两个必须方法：\n\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t    return [self.tasks count];\n}\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n        UITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”];\n\t    //重用cell\n\t    NSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t    c.textLabel.text = item;\n\t    return c;\n}\n```\n\n刷新表格：`[self.taskTable reloadData];`\n\n### 重用UITableViewCell对象\n需要将自定义的cell类和identifier进行关联。  \n在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell\n```objc\n-(void)viewDidLoad{\n\t[super viewDidLoad];\n\t[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@“UITableViewCell”];\n}\n```\n\n这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联\n```objc\n[self.tableView registerNib:[UINib nibWithNibName:@\"MineUserInfoCell\" bundle:nil]  forCellReuseIdentifier:@\"MineUserInfoCellIdentifier\"];\n```\n\n## 编辑UITableView\n### TableView表头视图\n表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。\n```objc\nUIView *headerView = [[[NSBundle mainBundle] loadNibNamed:@\"HotelReviewsHeaderView\" owner:nil options:nil]lastObject];\n```\n\n**loadNibNamed:owner:options:**返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。\n```objc\n- (void)viewDidLoad{\n\tUIView *header = self.headerView;\n\t[self.tableView setTableHeaderView:header];\n}\n```\n\n加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 **(UIView *)tableView:viewForHeaderInSection:**方法中设置，当只有一个section时效果相同。\n\n### TableView 插入行\n添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。\n```objc\n[self.dataSource addObject:comment];\nNSInteger lastRow = [self.tableView numberOfRowsInSection:0];\nNSIndexPath *indexPath2 = [NSIndexPath indexPathForRow:lastRow inSection:0];\n[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:UITableViewRowAnimationTop];\n```\n\n也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。\n\n### TableView 删除行\n实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。  \n第一个实参是发送该消息的UITableView对象。  \n第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。  \n第三个实参是一个NSIndexPath对象。\n```objc\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        [self.dataSource removeObjectAtIndex:indexPath.row];\n        [self.tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];\n    }\n}\n```\n\n### TableView 移动行\n使用**setEditing:animated:**方法让tableView进入编辑模式.\n实现tableView:moveRowAtIndexPath:方法\n```objc\n- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath{\n    if(sourceIndexPath == destinationIndexPath){\n        return ;\n    }else{\n        Comment *comment = [self.dataSource objectAtIndex:sourceIndexPath.row];\n        [self.dataSource removeObjectAtIndex:sourceIndexPath.row];\n        [self.dataSource insertObject:comment atIndex:destinationIndexPath.row];\n    }\n}\n```\n\n### TableView 编辑行\n使用**setEditing:animated:**方法让tableView进入编辑模式.可以使用**tableView:canEditRowAtIndexPath**方法筛选能进入编辑模式的行：\n```objc\n- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {\n    if(indexPath.row == (10 | 12 | 14)){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n如果不实现该方法，默认为YES。\n\n### TableView 修改删除按钮\n```objc\n- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath{\n    return @\"删除\";\n}\n```\n\n## UINavigationController\n### UINavigationController对象\nUINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。\n\nUINavigationController对象有一个名为**viewControllers**的属性，指向一个负责保存视图控制器的数组。**topViewController**属性是一个指针，指向当前位于栈顶的视图控制器。\n\nUINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有**两个子视图**：一个是**UINavigationBar对象**，一个是**topViewController的视图**。\n\n初始化UINavigationController对象：\n```objc\nUINavigationController *navController = [[UINavigationController alloc]initWithRootViewController:viewController];\n```\n\n### 关联xib\n不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）\n\n在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。\n\n设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。\n\n### 将视图控制器压入栈\n使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。\n```objc\n[self.navigationController pushViewController:detailController animated:YES];\n```\n视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。\n\n### 视图控制器间传递数据\n\n### NavigationBar\nUIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。\n\nUINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。\n\n创建一个buttonItem：\n```objc\n- (void)initNavigationView{\n    UIButton *backBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 26, 44)];\n    [backBtn setImage:[UIImage imageNamed:@\"systemback\"] forState:UIControlStateNormal];\n    [backBtn addTarget:self action:@selector(backButtonPressedForOrder:) forControlEvents:UIControlEventTouchUpInside];\n    UIBarButtonItem *leftItem  = [[UIBarButtonItem alloc]initWithCustomView:backBtn];\n    [self.navigationItem setLeftBarButtonItem:leftItem];\n}\n```\n","source":"_posts/ios编程（第四版.md","raw":"title: ios编程(第四版) 学习笔记\ndate: 2016/7/31 14:07:12  \ncategories: IOS\ntags: [读书笔记]\n\n---\n\n本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。\n\n<!--more-->\n## 第一个ios应用\n### 声明插座变量\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n声明了一个叫questionLabel的插座变量.  \n**IBOutlet**告诉Xcode需要使用Interface Builder关联该插座变量。\n\n### 声明动作方法\n```objc\n- (IBAction)showQuestion:(id)sender{\n\t……\n}\n```\n**IBAction**关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。\n\n### 应用图标\nImages.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。\n\n## objective-c\n### 类方法\n实例方法使用的字符是-，类方法使用字符+。  \n类方法作用通常是创建对象，获取类的某些全局属性。\n\n## 通过ARC管理内存\n### copy\n当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。  \n当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。\n\n## 视图与视图层次结构\n### 视图层次结构\n任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。\n层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。\n\n### 创建UIView子类\nUIView子类模板会自动生成一个方法 **initWithFrame:**，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。\n\n```objc\n@property （nonatomic） CGRect frame；\n```\n\nCGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。    \n创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；\n  \n可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。  \n每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。  \nbounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。\n\n### 图形绘制\n没看\n\n## 视图：重绘与UIScrollView\n### ScrollView\n设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。  \n在scrollview中addSubView。\n\n## 视图控制器\n### 视图控制器\n视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。\n使用UITabBarController的类在两个视图控制器间切换。  \n\nUIViewController有一个重要属性：\n\n```objc \n@property (nonatomic, strong) UIView *view;\n```\n\n这个view就是视图的根视图。\n\n### 创建视图层次结构\n1. 覆盖UIViewController的loadView方法\n```objc\n-(void)loadView{\n        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];\n        self.view = backgroundView;\n}\n```\n\n\t此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。\n2. 通过xib创建\n.m中声明各个控件(注意控件使用弱引用)\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n\n\t再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。\n\n### 设置根视图控制器\nUIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。\n```objc\nBNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];\nself.window.rootViewController = hvc;\n```\n\nsetRootViewController其实就是将ViewController的view设置为其subview。\n\n### 加载nib文件\n加载不同名的nib文件时，需要使用**initWithNibName:Bundle:**方法。该方法的两个参数，分别用于指定NIB文件文件名和其**所在的程序包**。如果是Bundle传入nil默认是[NSBundle mainBundle];\n\n### UITabBarController\nUITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   \n\n在APPDelegate中创建两个视图控制器，加入Tabbar的**viewControllers**属性中，并将tabbar设置为rootViewController\n```objc\nUITabBarController *tabBarController = [[UITabBarController alloc] init];\ntabBarController.viewControllers = @[hvc,rvc] //两个viewController 可以写在tabbarController的viewDidLoad方法里\nself.window.rootViewController = tabBarController;\n```\n\n设置标签项，使用**tabBarItem**属性：\n\n```objc\n    UIImage *orderImage = [UIImage imageNamed:@\"tab_order\"];\n    UIImage *orderImageSel = [UIImage imageNamed:@\"tab_order_active\"];\n    orderImage = [orderImage imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    orderImageSel = [orderImageSel imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    UITabBarItem *orderTabBarItem = [[UITabBarItem alloc] initWithTitle:@\"订单\" image:orderImage selectedImage:orderImageSel];\n    orderNav.tabBarItem = orderTabBarItem;\n```\n\n为tabbar添加subview，UITabBarController里有一个**tabBar**的view\n\n```objc\nUIView *backview = [[UIView alloc] initWithFrame:self.tabBar.bounds];\n[backview setBackgroundColor:[UIColor whiteColor]];\n[self.tabBar addSubview:backview];\n```\n\n\n### 本地通知\n本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。\n```objc\nUILocalNotification *note = [][UILocalNotification alloc] init];\nnote.alertBody = @\"xxx\";\nnote.fireDate = date;\n[[UIApplication sharedApplication] scheduleLocalNotification:note];\n```\n\n### 加载和显示视图\nviewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。  \n另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。\n  \n如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。\n\n### 与视图控制器及其视图交互\n**application:didFinishLaunchingWithOptions:**\t该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。      \n**initWithNibName：bundle：**该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。  \n**loadView：**覆盖该方法，使用代码方式设置视图控制的的view属性。  \n**viewDidLoad：**该方法会在视图控制器加载完视图后被调用。  \n**viewWillAppear：**该方法会在视图控制器的view显示在屏幕上时被调用。  \n\n## 委托与文本输入\n### 委托（代理模式）\n当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。  \n例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  \n\n类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。\n\n### 协议\n凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  \n\n协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束  \n使用@optional指令，可以将写在指令后的全部声明为可选的。  \n发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  \n\n声明示例：\n```objc\n@interface BNRHypnosisViewController()<UITextFieldDelegate>\n@end\n```\n### 设置异常断点\n当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。\n\n### 类方法与实例方法\n这里需要注意：\n1. 类方法可以调用类方法。\n2. 类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。\n3. 类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。\n + 实例方法里面的self，是对象的首地址。\n + 类方法里面的self，是Class.\n4. 类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。\n\n## UITableView与UITableViewController\n### UITableView 的样式\n1. UITableViewStylePlain\n2. UITableViewStyleGrouped\n\n```objc\nUITableView *tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyle];\n```\n\n其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源.  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议\n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n@property (nonatomic) UITableView *taskTable;\n@property (nonatomic) NSMutable Array *tasks;\n@end\n```\n\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n\n```objc\nself.taskTable.dataSource = self;\n```\n\nUITableViewDataSource设置了两个必须方法：\n\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t    return [self.tasks count];\n}\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n        UITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”];\n\t    //重用cell\n\t    NSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t    c.textLabel.text = item;\n\t    return c;\n}\n```\n\n刷新表格：`[self.taskTable reloadData];`\n\n### 重用UITableViewCell对象\n需要将自定义的cell类和identifier进行关联。  \n在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell\n```objc\n-(void)viewDidLoad{\n\t[super viewDidLoad];\n\t[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@“UITableViewCell”];\n}\n```\n\n这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联\n```objc\n[self.tableView registerNib:[UINib nibWithNibName:@\"MineUserInfoCell\" bundle:nil]  forCellReuseIdentifier:@\"MineUserInfoCellIdentifier\"];\n```\n\n## 编辑UITableView\n### TableView表头视图\n表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。\n```objc\nUIView *headerView = [[[NSBundle mainBundle] loadNibNamed:@\"HotelReviewsHeaderView\" owner:nil options:nil]lastObject];\n```\n\n**loadNibNamed:owner:options:**返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。\n```objc\n- (void)viewDidLoad{\n\tUIView *header = self.headerView;\n\t[self.tableView setTableHeaderView:header];\n}\n```\n\n加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 **(UIView *)tableView:viewForHeaderInSection:**方法中设置，当只有一个section时效果相同。\n\n### TableView 插入行\n添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。\n```objc\n[self.dataSource addObject:comment];\nNSInteger lastRow = [self.tableView numberOfRowsInSection:0];\nNSIndexPath *indexPath2 = [NSIndexPath indexPathForRow:lastRow inSection:0];\n[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:UITableViewRowAnimationTop];\n```\n\n也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。\n\n### TableView 删除行\n实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。  \n第一个实参是发送该消息的UITableView对象。  \n第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。  \n第三个实参是一个NSIndexPath对象。\n```objc\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        [self.dataSource removeObjectAtIndex:indexPath.row];\n        [self.tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];\n    }\n}\n```\n\n### TableView 移动行\n使用**setEditing:animated:**方法让tableView进入编辑模式.\n实现tableView:moveRowAtIndexPath:方法\n```objc\n- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath{\n    if(sourceIndexPath == destinationIndexPath){\n        return ;\n    }else{\n        Comment *comment = [self.dataSource objectAtIndex:sourceIndexPath.row];\n        [self.dataSource removeObjectAtIndex:sourceIndexPath.row];\n        [self.dataSource insertObject:comment atIndex:destinationIndexPath.row];\n    }\n}\n```\n\n### TableView 编辑行\n使用**setEditing:animated:**方法让tableView进入编辑模式.可以使用**tableView:canEditRowAtIndexPath**方法筛选能进入编辑模式的行：\n```objc\n- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {\n    if(indexPath.row == (10 | 12 | 14)){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n如果不实现该方法，默认为YES。\n\n### TableView 修改删除按钮\n```objc\n- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath{\n    return @\"删除\";\n}\n```\n\n## UINavigationController\n### UINavigationController对象\nUINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。\n\nUINavigationController对象有一个名为**viewControllers**的属性，指向一个负责保存视图控制器的数组。**topViewController**属性是一个指针，指向当前位于栈顶的视图控制器。\n\nUINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有**两个子视图**：一个是**UINavigationBar对象**，一个是**topViewController的视图**。\n\n初始化UINavigationController对象：\n```objc\nUINavigationController *navController = [[UINavigationController alloc]initWithRootViewController:viewController];\n```\n\n### 关联xib\n不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）\n\n在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。\n\n设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。\n\n### 将视图控制器压入栈\n使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。\n```objc\n[self.navigationController pushViewController:detailController animated:YES];\n```\n视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。\n\n### 视图控制器间传递数据\n\n### NavigationBar\nUIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。\n\nUINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。\n\n创建一个buttonItem：\n```objc\n- (void)initNavigationView{\n    UIButton *backBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 26, 44)];\n    [backBtn setImage:[UIImage imageNamed:@\"systemback\"] forState:UIControlStateNormal];\n    [backBtn addTarget:self action:@selector(backButtonPressedForOrder:) forControlEvents:UIControlEventTouchUpInside];\n    UIBarButtonItem *leftItem  = [[UIBarButtonItem alloc]initWithCustomView:backBtn];\n    [self.navigationItem setLeftBarButtonItem:leftItem];\n}\n```\n","slug":"ios编程（第四版","published":1,"updated":"2016-08-05T13:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqq0007weru57434z2u","content":"<p>本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。</p>\n<a id=\"more\"></a>\n<h2 id=\"第一个ios应用\"><a href=\"#第一个ios应用\" class=\"headerlink\" title=\"第一个ios应用\"></a>第一个ios应用</h2><h3 id=\"声明插座变量\"><a href=\"#声明插座变量\" class=\"headerlink\" title=\"声明插座变量\"></a>声明插座变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p>声明了一个叫questionLabel的插座变量.<br><strong>IBOutlet</strong>告诉Xcode需要使用Interface Builder关联该插座变量。</p>\n<h3 id=\"声明动作方法\"><a href=\"#声明动作方法\" class=\"headerlink\" title=\"声明动作方法\"></a>声明动作方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showQuestion:(<span class=\"keyword\">id</span>)sender&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>IBAction</strong>关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。</p>\n<h3 id=\"应用图标\"><a href=\"#应用图标\" class=\"headerlink\" title=\"应用图标\"></a>应用图标</h3><p>Images.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。</p>\n<h2 id=\"objective-c\"><a href=\"#objective-c\" class=\"headerlink\" title=\"objective-c\"></a>objective-c</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>实例方法使用的字符是-，类方法使用字符+。<br>类方法作用通常是创建对象，获取类的某些全局属性。</p>\n<h2 id=\"通过ARC管理内存\"><a href=\"#通过ARC管理内存\" class=\"headerlink\" title=\"通过ARC管理内存\"></a>通过ARC管理内存</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。<br>当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。</p>\n<h2 id=\"视图与视图层次结构\"><a href=\"#视图与视图层次结构\" class=\"headerlink\" title=\"视图与视图层次结构\"></a>视图与视图层次结构</h2><h3 id=\"视图层次结构\"><a href=\"#视图层次结构\" class=\"headerlink\" title=\"视图层次结构\"></a>视图层次结构</h3><p>任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。<br>层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。</p>\n<h3 id=\"创建UIView子类\"><a href=\"#创建UIView子类\" class=\"headerlink\" title=\"创建UIView子类\"></a>创建UIView子类</h3><p>UIView子类模板会自动生成一个方法 <strong>initWithFrame:</strong>，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> （<span class=\"keyword\">nonatomic</span>） <span class=\"built_in\">CGRect</span> frame；</div></pre></td></tr></table></figure>\n<p>CGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。<br>创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；</p>\n<p>可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。<br>每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。<br>bounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。</p>\n<h3 id=\"图形绘制\"><a href=\"#图形绘制\" class=\"headerlink\" title=\"图形绘制\"></a>图形绘制</h3><p>没看</p>\n<h2 id=\"视图：重绘与UIScrollView\"><a href=\"#视图：重绘与UIScrollView\" class=\"headerlink\" title=\"视图：重绘与UIScrollView\"></a>视图：重绘与UIScrollView</h2><h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p>设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。<br>在scrollview中addSubView。</p>\n<h2 id=\"视图控制器\"><a href=\"#视图控制器\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h2><h3 id=\"视图控制器-1\"><a href=\"#视图控制器-1\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h3><p>视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。<br>使用UITabBarController的类在两个视图控制器间切换。  </p>\n<p>UIViewController有一个重要属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIView</span> *view;</div></pre></td></tr></table></figure>\n<p>这个view就是视图的根视图。</p>\n<h3 id=\"创建视图层次结构\"><a href=\"#创建视图层次结构\" class=\"headerlink\" title=\"创建视图层次结构\"></a>创建视图层次结构</h3><ol>\n<li><p>覆盖UIViewController的loadView方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)loadView&#123;</div><div class=\"line\">        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = backgroundView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。</p>\n</li>\n<li><p>通过xib创建<br>.m中声明各个控件(注意控件使用弱引用)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p> 再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。</p>\n</li>\n</ol>\n<h3 id=\"设置根视图控制器\"><a href=\"#设置根视图控制器\" class=\"headerlink\" title=\"设置根视图控制器\"></a>设置根视图控制器</h3><p>UIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = hvc;</div></pre></td></tr></table></figure></p>\n<p>setRootViewController其实就是将ViewController的view设置为其subview。</p>\n<h3 id=\"加载nib文件\"><a href=\"#加载nib文件\" class=\"headerlink\" title=\"加载nib文件\"></a>加载nib文件</h3><p>加载不同名的nib文件时，需要使用<strong>initWithNibName:Bundle:</strong>方法。该方法的两个参数，分别用于指定NIB文件文件名和其<strong>所在的程序包</strong>。如果是Bundle传入nil默认是[NSBundle mainBundle];</p>\n<h3 id=\"UITabBarController\"><a href=\"#UITabBarController\" class=\"headerlink\" title=\"UITabBarController\"></a>UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   </p>\n<p>在APPDelegate中创建两个视图控制器，加入Tabbar的<strong>viewControllers</strong>属性中，并将tabbar设置为rootViewController<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITabBarController</span> *tabBarController = [[<span class=\"built_in\">UITabBarController</span> alloc] init];</div><div class=\"line\">tabBarController.viewControllers = @[hvc,rvc] <span class=\"comment\">//两个viewController 可以写在tabbarController的viewDidLoad方法里</span></div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = tabBarController;</div></pre></td></tr></table></figure></p>\n<p>设置标签项，使用<strong>tabBarItem</strong>属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order\"</span>];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImageSel = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order_active\"</span>];</div><div class=\"line\">orderImage = [orderImage imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\">orderImageSel = [orderImageSel imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\"><span class=\"built_in\">UITabBarItem</span> *orderTabBarItem = [[<span class=\"built_in\">UITabBarItem</span> alloc] initWithTitle:<span class=\"string\">@\"订单\"</span> image:orderImage selectedImage:orderImageSel];</div><div class=\"line\">orderNav.tabBarItem = orderTabBarItem;</div></pre></td></tr></table></figure>\n<p>为tabbar添加subview，UITabBarController里有一个<strong>tabBar</strong>的view</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *backview = [[<span class=\"built_in\">UIView</span> alloc] initWithFrame:<span class=\"keyword\">self</span>.tabBar.bounds];</div><div class=\"line\">[backview setBackgroundColor:[<span class=\"built_in\">UIColor</span> whiteColor]];</div><div class=\"line\">[<span class=\"keyword\">self</span>.tabBar addSubview:backview];</div></pre></td></tr></table></figure>\n<h3 id=\"本地通知\"><a href=\"#本地通知\" class=\"headerlink\" title=\"本地通知\"></a>本地通知</h3><p>本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILocalNotification</span> *note = [][<span class=\"built_in\">UILocalNotification</span> alloc] init];</div><div class=\"line\">note.alertBody = <span class=\"string\">@\"xxx\"</span>;</div><div class=\"line\">note.fireDate = date;</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] scheduleLocalNotification:note];</div></pre></td></tr></table></figure></p>\n<h3 id=\"加载和显示视图\"><a href=\"#加载和显示视图\" class=\"headerlink\" title=\"加载和显示视图\"></a>加载和显示视图</h3><p>viewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。<br>另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。</p>\n<p>如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。</p>\n<h3 id=\"与视图控制器及其视图交互\"><a href=\"#与视图控制器及其视图交互\" class=\"headerlink\" title=\"与视图控制器及其视图交互\"></a>与视图控制器及其视图交互</h3><p><strong>application:didFinishLaunchingWithOptions:</strong>    该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。<br><strong>initWithNibName：bundle：</strong>该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。<br><strong>loadView：</strong>覆盖该方法，使用代码方式设置视图控制的的view属性。<br><strong>viewDidLoad：</strong>该方法会在视图控制器加载完视图后被调用。<br><strong>viewWillAppear：</strong>该方法会在视图控制器的view显示在屏幕上时被调用。  </p>\n<h2 id=\"委托与文本输入\"><a href=\"#委托与文本输入\" class=\"headerlink\" title=\"委托与文本输入\"></a>委托与文本输入</h2><h3 id=\"委托（代理模式）\"><a href=\"#委托（代理模式）\" class=\"headerlink\" title=\"委托（代理模式）\"></a>委托（代理模式）</h3><p>当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。<br>例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  </p>\n<p>类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  </p>\n<p>协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束<br>使用@optional指令，可以将写在指令后的全部声明为可选的。<br>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  </p>\n<p>声明示例：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRHypnosisViewController</span>()&lt;<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"设置异常断点\"><a href=\"#设置异常断点\" class=\"headerlink\" title=\"设置异常断点\"></a>设置异常断点</h3><p>当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。</p>\n<h3 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h3><p>这里需要注意：</p>\n<ol>\n<li>类方法可以调用类方法。</li>\n<li>类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。</li>\n<li>类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。<ul>\n<li>实例方法里面的self，是对象的首地址。</li>\n<li>类方法里面的self，是Class.</li>\n</ul>\n</li>\n<li>类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。</li>\n</ol>\n<h2 id=\"UITableView与UITableViewController\"><a href=\"#UITableView与UITableViewController\" class=\"headerlink\" title=\"UITableView与UITableViewController\"></a>UITableView与UITableViewController</h2><h3 id=\"UITableView-的样式\"><a href=\"#UITableView-的样式\" class=\"headerlink\" title=\"UITableView 的样式\"></a>UITableView 的样式</h3><ol>\n<li>UITableViewStylePlain</li>\n<li>UITableViewStyleGrouped</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITableView</span> *tableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span> style:<span class=\"built_in\">UITableViewStyle</span>];</div></pre></td></tr></table></figure>\n<p>其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。</p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源.<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutable</span> Array *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”];</div><div class=\"line\">\t    <span class=\"comment\">//重用cell</span></div><div class=\"line\">\t    <span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t    c.textLabel.text = item;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：<code>[self.taskTable reloadData];</code></p>\n<h3 id=\"重用UITableViewCell对象\"><a href=\"#重用UITableViewCell对象\" class=\"headerlink\" title=\"重用UITableViewCell对象\"></a>重用UITableViewCell对象</h3><p>需要将自定义的cell类和identifier进行关联。<br>在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t[<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView registerClass:[<span class=\"built_in\">UITableViewCell</span> <span class=\"keyword\">class</span>] forCellReuseIdentifier:@“<span class=\"built_in\">UITableViewCell</span>”];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"MineUserInfoCell\"</span> bundle:<span class=\"literal\">nil</span>]  forCellReuseIdentifier:<span class=\"string\">@\"MineUserInfoCellIdentifier\"</span>];</div></pre></td></tr></table></figure></p>\n<h2 id=\"编辑UITableView\"><a href=\"#编辑UITableView\" class=\"headerlink\" title=\"编辑UITableView\"></a>编辑UITableView</h2><h3 id=\"TableView表头视图\"><a href=\"#TableView表头视图\" class=\"headerlink\" title=\"TableView表头视图\"></a>TableView表头视图</h3><p>表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *headerView = [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"HotelReviewsHeaderView\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>]lastObject];</div></pre></td></tr></table></figure></p>\n<p><strong>loadNibNamed:owner:options:</strong>返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t<span class=\"built_in\">UIView</span> *header = <span class=\"keyword\">self</span>.headerView;</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView setTableHeaderView:header];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 <strong>(UIView *)tableView:viewForHeaderInSection:</strong>方法中设置，当只有一个section时效果相同。</p>\n<h3 id=\"TableView-插入行\"><a href=\"#TableView-插入行\" class=\"headerlink\" title=\"TableView 插入行\"></a>TableView 插入行</h3><p>添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataSource addObject:comment];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> lastRow = [<span class=\"keyword\">self</span>.tableView numberOfRowsInSection:<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">NSIndexPath</span> *indexPath2 = [<span class=\"built_in\">NSIndexPath</span> indexPathForRow:lastRow inSection:<span class=\"number\">0</span>];</div><div class=\"line\">[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationTop</span>];</div></pre></td></tr></table></figure></p>\n<p>也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。</p>\n<h3 id=\"TableView-删除行\"><a href=\"#TableView-删除行\" class=\"headerlink\" title=\"TableView 删除行\"></a>TableView 删除行</h3><p>实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。<br>第一个实参是发送该消息的UITableView对象。<br>第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。<br>第三个实参是一个NSIndexPath对象。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView deleteRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-移动行\"><a href=\"#TableView-移动行\" class=\"headerlink\" title=\"TableView 移动行\"></a>TableView 移动行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.<br>实现tableView:moveRowAtIndexPath:方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView moveRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)destinationIndexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sourceIndexPath == destinationIndexPath)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Comment *comment = [<span class=\"keyword\">self</span>.dataSource objectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource insertObject:comment atIndex:destinationIndexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-编辑行\"><a href=\"#TableView-编辑行\" class=\"headerlink\" title=\"TableView 编辑行\"></a>TableView 编辑行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.可以使用<strong>tableView:canEditRowAtIndexPath</strong>方法筛选能进入编辑模式的行：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(indexPath.row == (<span class=\"number\">10</span> | <span class=\"number\">12</span> | <span class=\"number\">14</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不实现该方法，默认为YES。</p>\n<h3 id=\"TableView-修改删除按钮\"><a href=\"#TableView-修改删除按钮\" class=\"headerlink\" title=\"TableView 修改删除按钮\"></a>TableView 修改删除按钮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"删除\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UINavigationController\"><a href=\"#UINavigationController\" class=\"headerlink\" title=\"UINavigationController\"></a>UINavigationController</h2><h3 id=\"UINavigationController对象\"><a href=\"#UINavigationController对象\" class=\"headerlink\" title=\"UINavigationController对象\"></a>UINavigationController对象</h3><p>UINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。</p>\n<p>UINavigationController对象有一个名为<strong>viewControllers</strong>的属性，指向一个负责保存视图控制器的数组。<strong>topViewController</strong>属性是一个指针，指向当前位于栈顶的视图控制器。</p>\n<p>UINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有<strong>两个子视图</strong>：一个是<strong>UINavigationBar对象</strong>，一个是<strong>topViewController的视图</strong>。</p>\n<p>初始化UINavigationController对象：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UINavigationController</span> *navController = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:viewController];</div></pre></td></tr></table></figure></p>\n<h3 id=\"关联xib\"><a href=\"#关联xib\" class=\"headerlink\" title=\"关联xib\"></a>关联xib</h3><p>不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）</p>\n<p>在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。</p>\n<p>设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。</p>\n<h3 id=\"将视图控制器压入栈\"><a href=\"#将视图控制器压入栈\" class=\"headerlink\" title=\"将视图控制器压入栈\"></a>将视图控制器压入栈</h3><p>使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.navigationController pushViewController:detailController animated:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure></p>\n<p>视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。</p>\n<h3 id=\"视图控制器间传递数据\"><a href=\"#视图控制器间传递数据\" class=\"headerlink\" title=\"视图控制器间传递数据\"></a>视图控制器间传递数据</h3><h3 id=\"NavigationBar\"><a href=\"#NavigationBar\" class=\"headerlink\" title=\"NavigationBar\"></a>NavigationBar</h3><p>UIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。</p>\n<p>UINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。</p>\n<p>创建一个buttonItem：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initNavigationView&#123;</div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *backBtn = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">26</span>, <span class=\"number\">44</span>)];</div><div class=\"line\">    [backBtn setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"systemback\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [backBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backButtonPressedForOrder:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    <span class=\"built_in\">UIBarButtonItem</span> *leftItem  = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:backBtn];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationItem setLeftBarButtonItem:leftItem];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。</p>","more":"<h2 id=\"第一个ios应用\"><a href=\"#第一个ios应用\" class=\"headerlink\" title=\"第一个ios应用\"></a>第一个ios应用</h2><h3 id=\"声明插座变量\"><a href=\"#声明插座变量\" class=\"headerlink\" title=\"声明插座变量\"></a>声明插座变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p>声明了一个叫questionLabel的插座变量.<br><strong>IBOutlet</strong>告诉Xcode需要使用Interface Builder关联该插座变量。</p>\n<h3 id=\"声明动作方法\"><a href=\"#声明动作方法\" class=\"headerlink\" title=\"声明动作方法\"></a>声明动作方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showQuestion:(<span class=\"keyword\">id</span>)sender&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>IBAction</strong>关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。</p>\n<h3 id=\"应用图标\"><a href=\"#应用图标\" class=\"headerlink\" title=\"应用图标\"></a>应用图标</h3><p>Images.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。</p>\n<h2 id=\"objective-c\"><a href=\"#objective-c\" class=\"headerlink\" title=\"objective-c\"></a>objective-c</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>实例方法使用的字符是-，类方法使用字符+。<br>类方法作用通常是创建对象，获取类的某些全局属性。</p>\n<h2 id=\"通过ARC管理内存\"><a href=\"#通过ARC管理内存\" class=\"headerlink\" title=\"通过ARC管理内存\"></a>通过ARC管理内存</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。<br>当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。</p>\n<h2 id=\"视图与视图层次结构\"><a href=\"#视图与视图层次结构\" class=\"headerlink\" title=\"视图与视图层次结构\"></a>视图与视图层次结构</h2><h3 id=\"视图层次结构\"><a href=\"#视图层次结构\" class=\"headerlink\" title=\"视图层次结构\"></a>视图层次结构</h3><p>任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。<br>层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。</p>\n<h3 id=\"创建UIView子类\"><a href=\"#创建UIView子类\" class=\"headerlink\" title=\"创建UIView子类\"></a>创建UIView子类</h3><p>UIView子类模板会自动生成一个方法 <strong>initWithFrame:</strong>，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> （<span class=\"keyword\">nonatomic</span>） <span class=\"built_in\">CGRect</span> frame；</div></pre></td></tr></table></figure>\n<p>CGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。<br>创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；</p>\n<p>可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。<br>每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。<br>bounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。</p>\n<h3 id=\"图形绘制\"><a href=\"#图形绘制\" class=\"headerlink\" title=\"图形绘制\"></a>图形绘制</h3><p>没看</p>\n<h2 id=\"视图：重绘与UIScrollView\"><a href=\"#视图：重绘与UIScrollView\" class=\"headerlink\" title=\"视图：重绘与UIScrollView\"></a>视图：重绘与UIScrollView</h2><h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p>设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。<br>在scrollview中addSubView。</p>\n<h2 id=\"视图控制器\"><a href=\"#视图控制器\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h2><h3 id=\"视图控制器-1\"><a href=\"#视图控制器-1\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h3><p>视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。<br>使用UITabBarController的类在两个视图控制器间切换。  </p>\n<p>UIViewController有一个重要属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIView</span> *view;</div></pre></td></tr></table></figure>\n<p>这个view就是视图的根视图。</p>\n<h3 id=\"创建视图层次结构\"><a href=\"#创建视图层次结构\" class=\"headerlink\" title=\"创建视图层次结构\"></a>创建视图层次结构</h3><ol>\n<li><p>覆盖UIViewController的loadView方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)loadView&#123;</div><div class=\"line\">        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = backgroundView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。</p>\n</li>\n<li><p>通过xib创建<br>.m中声明各个控件(注意控件使用弱引用)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p> 再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。</p>\n</li>\n</ol>\n<h3 id=\"设置根视图控制器\"><a href=\"#设置根视图控制器\" class=\"headerlink\" title=\"设置根视图控制器\"></a>设置根视图控制器</h3><p>UIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = hvc;</div></pre></td></tr></table></figure></p>\n<p>setRootViewController其实就是将ViewController的view设置为其subview。</p>\n<h3 id=\"加载nib文件\"><a href=\"#加载nib文件\" class=\"headerlink\" title=\"加载nib文件\"></a>加载nib文件</h3><p>加载不同名的nib文件时，需要使用<strong>initWithNibName:Bundle:</strong>方法。该方法的两个参数，分别用于指定NIB文件文件名和其<strong>所在的程序包</strong>。如果是Bundle传入nil默认是[NSBundle mainBundle];</p>\n<h3 id=\"UITabBarController\"><a href=\"#UITabBarController\" class=\"headerlink\" title=\"UITabBarController\"></a>UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   </p>\n<p>在APPDelegate中创建两个视图控制器，加入Tabbar的<strong>viewControllers</strong>属性中，并将tabbar设置为rootViewController<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITabBarController</span> *tabBarController = [[<span class=\"built_in\">UITabBarController</span> alloc] init];</div><div class=\"line\">tabBarController.viewControllers = @[hvc,rvc] <span class=\"comment\">//两个viewController 可以写在tabbarController的viewDidLoad方法里</span></div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = tabBarController;</div></pre></td></tr></table></figure></p>\n<p>设置标签项，使用<strong>tabBarItem</strong>属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order\"</span>];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImageSel = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order_active\"</span>];</div><div class=\"line\">orderImage = [orderImage imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\">orderImageSel = [orderImageSel imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\"><span class=\"built_in\">UITabBarItem</span> *orderTabBarItem = [[<span class=\"built_in\">UITabBarItem</span> alloc] initWithTitle:<span class=\"string\">@\"订单\"</span> image:orderImage selectedImage:orderImageSel];</div><div class=\"line\">orderNav.tabBarItem = orderTabBarItem;</div></pre></td></tr></table></figure>\n<p>为tabbar添加subview，UITabBarController里有一个<strong>tabBar</strong>的view</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *backview = [[<span class=\"built_in\">UIView</span> alloc] initWithFrame:<span class=\"keyword\">self</span>.tabBar.bounds];</div><div class=\"line\">[backview setBackgroundColor:[<span class=\"built_in\">UIColor</span> whiteColor]];</div><div class=\"line\">[<span class=\"keyword\">self</span>.tabBar addSubview:backview];</div></pre></td></tr></table></figure>\n<h3 id=\"本地通知\"><a href=\"#本地通知\" class=\"headerlink\" title=\"本地通知\"></a>本地通知</h3><p>本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILocalNotification</span> *note = [][<span class=\"built_in\">UILocalNotification</span> alloc] init];</div><div class=\"line\">note.alertBody = <span class=\"string\">@\"xxx\"</span>;</div><div class=\"line\">note.fireDate = date;</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] scheduleLocalNotification:note];</div></pre></td></tr></table></figure></p>\n<h3 id=\"加载和显示视图\"><a href=\"#加载和显示视图\" class=\"headerlink\" title=\"加载和显示视图\"></a>加载和显示视图</h3><p>viewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。<br>另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。</p>\n<p>如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。</p>\n<h3 id=\"与视图控制器及其视图交互\"><a href=\"#与视图控制器及其视图交互\" class=\"headerlink\" title=\"与视图控制器及其视图交互\"></a>与视图控制器及其视图交互</h3><p><strong>application:didFinishLaunchingWithOptions:</strong>    该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。<br><strong>initWithNibName：bundle：</strong>该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。<br><strong>loadView：</strong>覆盖该方法，使用代码方式设置视图控制的的view属性。<br><strong>viewDidLoad：</strong>该方法会在视图控制器加载完视图后被调用。<br><strong>viewWillAppear：</strong>该方法会在视图控制器的view显示在屏幕上时被调用。  </p>\n<h2 id=\"委托与文本输入\"><a href=\"#委托与文本输入\" class=\"headerlink\" title=\"委托与文本输入\"></a>委托与文本输入</h2><h3 id=\"委托（代理模式）\"><a href=\"#委托（代理模式）\" class=\"headerlink\" title=\"委托（代理模式）\"></a>委托（代理模式）</h3><p>当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。<br>例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  </p>\n<p>类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  </p>\n<p>协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束<br>使用@optional指令，可以将写在指令后的全部声明为可选的。<br>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  </p>\n<p>声明示例：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRHypnosisViewController</span>()&lt;<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"设置异常断点\"><a href=\"#设置异常断点\" class=\"headerlink\" title=\"设置异常断点\"></a>设置异常断点</h3><p>当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。</p>\n<h3 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h3><p>这里需要注意：</p>\n<ol>\n<li>类方法可以调用类方法。</li>\n<li>类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。</li>\n<li>类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。<ul>\n<li>实例方法里面的self，是对象的首地址。</li>\n<li>类方法里面的self，是Class.</li>\n</ul>\n</li>\n<li>类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。</li>\n</ol>\n<h2 id=\"UITableView与UITableViewController\"><a href=\"#UITableView与UITableViewController\" class=\"headerlink\" title=\"UITableView与UITableViewController\"></a>UITableView与UITableViewController</h2><h3 id=\"UITableView-的样式\"><a href=\"#UITableView-的样式\" class=\"headerlink\" title=\"UITableView 的样式\"></a>UITableView 的样式</h3><ol>\n<li>UITableViewStylePlain</li>\n<li>UITableViewStyleGrouped</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITableView</span> *tableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span> style:<span class=\"built_in\">UITableViewStyle</span>];</div></pre></td></tr></table></figure>\n<p>其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。</p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源.<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutable</span> Array *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”];</div><div class=\"line\">\t    <span class=\"comment\">//重用cell</span></div><div class=\"line\">\t    <span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t    c.textLabel.text = item;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：<code>[self.taskTable reloadData];</code></p>\n<h3 id=\"重用UITableViewCell对象\"><a href=\"#重用UITableViewCell对象\" class=\"headerlink\" title=\"重用UITableViewCell对象\"></a>重用UITableViewCell对象</h3><p>需要将自定义的cell类和identifier进行关联。<br>在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t[<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView registerClass:[<span class=\"built_in\">UITableViewCell</span> <span class=\"keyword\">class</span>] forCellReuseIdentifier:@“<span class=\"built_in\">UITableViewCell</span>”];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"MineUserInfoCell\"</span> bundle:<span class=\"literal\">nil</span>]  forCellReuseIdentifier:<span class=\"string\">@\"MineUserInfoCellIdentifier\"</span>];</div></pre></td></tr></table></figure></p>\n<h2 id=\"编辑UITableView\"><a href=\"#编辑UITableView\" class=\"headerlink\" title=\"编辑UITableView\"></a>编辑UITableView</h2><h3 id=\"TableView表头视图\"><a href=\"#TableView表头视图\" class=\"headerlink\" title=\"TableView表头视图\"></a>TableView表头视图</h3><p>表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *headerView = [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"HotelReviewsHeaderView\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>]lastObject];</div></pre></td></tr></table></figure></p>\n<p><strong>loadNibNamed:owner:options:</strong>返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t<span class=\"built_in\">UIView</span> *header = <span class=\"keyword\">self</span>.headerView;</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView setTableHeaderView:header];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 <strong>(UIView *)tableView:viewForHeaderInSection:</strong>方法中设置，当只有一个section时效果相同。</p>\n<h3 id=\"TableView-插入行\"><a href=\"#TableView-插入行\" class=\"headerlink\" title=\"TableView 插入行\"></a>TableView 插入行</h3><p>添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataSource addObject:comment];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> lastRow = [<span class=\"keyword\">self</span>.tableView numberOfRowsInSection:<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">NSIndexPath</span> *indexPath2 = [<span class=\"built_in\">NSIndexPath</span> indexPathForRow:lastRow inSection:<span class=\"number\">0</span>];</div><div class=\"line\">[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationTop</span>];</div></pre></td></tr></table></figure></p>\n<p>也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。</p>\n<h3 id=\"TableView-删除行\"><a href=\"#TableView-删除行\" class=\"headerlink\" title=\"TableView 删除行\"></a>TableView 删除行</h3><p>实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。<br>第一个实参是发送该消息的UITableView对象。<br>第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。<br>第三个实参是一个NSIndexPath对象。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView deleteRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-移动行\"><a href=\"#TableView-移动行\" class=\"headerlink\" title=\"TableView 移动行\"></a>TableView 移动行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.<br>实现tableView:moveRowAtIndexPath:方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView moveRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)destinationIndexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sourceIndexPath == destinationIndexPath)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Comment *comment = [<span class=\"keyword\">self</span>.dataSource objectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource insertObject:comment atIndex:destinationIndexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-编辑行\"><a href=\"#TableView-编辑行\" class=\"headerlink\" title=\"TableView 编辑行\"></a>TableView 编辑行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.可以使用<strong>tableView:canEditRowAtIndexPath</strong>方法筛选能进入编辑模式的行：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(indexPath.row == (<span class=\"number\">10</span> | <span class=\"number\">12</span> | <span class=\"number\">14</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不实现该方法，默认为YES。</p>\n<h3 id=\"TableView-修改删除按钮\"><a href=\"#TableView-修改删除按钮\" class=\"headerlink\" title=\"TableView 修改删除按钮\"></a>TableView 修改删除按钮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"删除\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UINavigationController\"><a href=\"#UINavigationController\" class=\"headerlink\" title=\"UINavigationController\"></a>UINavigationController</h2><h3 id=\"UINavigationController对象\"><a href=\"#UINavigationController对象\" class=\"headerlink\" title=\"UINavigationController对象\"></a>UINavigationController对象</h3><p>UINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。</p>\n<p>UINavigationController对象有一个名为<strong>viewControllers</strong>的属性，指向一个负责保存视图控制器的数组。<strong>topViewController</strong>属性是一个指针，指向当前位于栈顶的视图控制器。</p>\n<p>UINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有<strong>两个子视图</strong>：一个是<strong>UINavigationBar对象</strong>，一个是<strong>topViewController的视图</strong>。</p>\n<p>初始化UINavigationController对象：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UINavigationController</span> *navController = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:viewController];</div></pre></td></tr></table></figure></p>\n<h3 id=\"关联xib\"><a href=\"#关联xib\" class=\"headerlink\" title=\"关联xib\"></a>关联xib</h3><p>不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）</p>\n<p>在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。</p>\n<p>设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。</p>\n<h3 id=\"将视图控制器压入栈\"><a href=\"#将视图控制器压入栈\" class=\"headerlink\" title=\"将视图控制器压入栈\"></a>将视图控制器压入栈</h3><p>使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.navigationController pushViewController:detailController animated:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure></p>\n<p>视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。</p>\n<h3 id=\"视图控制器间传递数据\"><a href=\"#视图控制器间传递数据\" class=\"headerlink\" title=\"视图控制器间传递数据\"></a>视图控制器间传递数据</h3><h3 id=\"NavigationBar\"><a href=\"#NavigationBar\" class=\"headerlink\" title=\"NavigationBar\"></a>NavigationBar</h3><p>UIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。</p>\n<p>UINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。</p>\n<p>创建一个buttonItem：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initNavigationView&#123;</div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *backBtn = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">26</span>, <span class=\"number\">44</span>)];</div><div class=\"line\">    [backBtn setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"systemback\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [backBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backButtonPressedForOrder:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    <span class=\"built_in\">UIBarButtonItem</span> *leftItem  = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:backBtn];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationItem setLeftBarButtonItem:leftItem];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"objective-c 学习笔记","date":"2016-07-31T02:07:12.000Z","_content":"\n开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。\n\n<!--more-->\n\n### 函数\n函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。\n\n### 全局变量\n在函数外声明的变量，只要类被import就能使用。  \nJava中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。  \n为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。  \n**那么这和@property有什么区别？**静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。\n\n### 指针\n&表示取地址，*表示取值。  \n空指针用nil而不是null。\n\n### 结构\n使用结构保存多个相关数据。\n```objc\nstruct Person{\n\tfloat height；\n\tint age；\n}；\n```\n使用：`struct Person mikey；`  \n使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。\n```objc\ntypedef struct {\n\tfloat height；\n\tint age；\n} Person；\n```\n使用：`Person mikey；`\n\n### 获取结构中的属性：\n当结构的使用者是一个指针时，使用->表示先获取指针p指向的数据结构，然后返回该结构的成员变量。  \n当结构的使用者是一个实例时，使用.表示访问属性。\n\n### id %@\nid表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。\nInstanceType表示方法的返回类型。  \n%@表示占位符，代表指针，会向相应指针变量对象发送description消息。\n\n### ARC\n@“…”表示创建一个NSString对象。需要知道字符串完整内容。  \n也可使用stringWithFormat方法动态创建：\n```objc\nNSString *dateString = [NSString stringWithFormat:@“The date is %@”, now]\n```\n\n### NSArray\n创建：\n```objc\nNSArray *dateList = @[now, tomorrow ,yesterday];\n```\nNSArray是无法改变的，被创建后无法添加删除以及改变顺序。  \n快速遍历数组： \n```objc\nfor(NSDate *d in daeList){}\n```\n\n### NSMutableArray\n可变数组，可添加删除和修改顺序。  \ninsertObject：atIndex在指定位置插入  \nremoveObject：atIndex删除数组中对象  \n快速遍历时不能添加删除数组内数据。\n\n### 自定义一个类\n头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始\n取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。\n\n### self\nself是指针，指向运行当前方法的对象。\n\n### 属性\n属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。  \n使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。\n\n### 继承\nNSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。\n\n### @class\n一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.  \n如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB\n\n### 类拓展\n类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。\n```objc\n\t#import “BNREmployee.h”\n\t@interface BNREmployee()\t\n\t@property (nonatomic) unsigned int officeAlarmCode;\n\t@end\n```\n注意要有括号，写在implement前面。  \n头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。\n\n### 弱引用\n通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。\n\n### Collection类\nNSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。  \nNSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。  \nNSMutable是NS的子类。  \ncollection不能保存nil。如果要保存nil则要保存NSNull类的实例。\n```objc\n[hotel addObject:[NSNull null]];\n```\n\n### 常量\n可以通过两种途径定义常量，#define和全局变量。  \n1. #define A B 告诉编译器看到A用B替换\n2. extern NSString const *NSLocaleCurrencyCode；  \nconst表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义\n\n### #include和#import\nimport会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。\n\n### enum\n定义一组常量。\n```objc\ntypedef enum{\n\tBlenderSpeedStir=1，\n\tBlenderSpeedChop=2，\n} BlenderSpeed；\n```\n还可以写成这样：\n```objc\ntypedef NS_ENUM(NSInteger, BlenderSpeed) {\n//以下是枚举成员\n    Test1A = 0,\n    Test1B = 1,\n    Test1C = 2,\n    Test1D = 3\n};\n```\n使用： BlenderSpeed speed；\n\n### 通过NSString和NSData写入文件\n没看\n\n### 回调\n没看\n\n### Block\n```objc\n^(double dividend){\n\tdouble quotient = dividend / divisor;\n\treturn quotient;\n}\n```\nBlock对象可以被当做一个实参来传递给可以接收block的方法。\n\n### 声明block变量:\n```objc \nvoid (^devowelizer)(id, NSUInteger, BOOL*);\n```\nvoid 表示返回类型  \n^ 表示是一个block对象  \ndevowelizer 表示block变量的名称  \n后面的是实参类型  \n方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block\n\n### 编写Block对象\n```objc\ndevowelizer = ^(id string,NSUInteger i, BOOL *stop){\n\t……\n};\n```\n\n### 调用block变量\n```objc\ndevowelizer(string,i,stop);\n```\n### typedef\n不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。\n```objc\ntypedef void(^ArrayEnumerationBlock)(id,NSUInteger,BOOL *);\n```\n需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。\n```objc\nArrayEnumerationBlock devowelizer；\n```\n\n### 外部变量\n在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。\n\n### 在Block中使用self\n如果要写一个使用self的Block对象，需要避免强引用循环。  \n在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。\n```objc\n_weak BNREmployee *weakSelf = self;\t//弱引用指针\n\tmyBlock = ^{\n\t\tNSLog(@“Employee:%@”,weakSelf);\n\t};\n```\n### 修改外部变量\n如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。\n\n### 协议\n协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。  \nUITableView数据源协议是UITableViewDataSource，方法声明如下：\n```objc\n@protocal UITableViewDataSource<NSObject>\n@required\n- (NSInteger)tableView:(UITableView *)tv\n\tnumberOfRowsInSection:(NSInteger) section;\n@optional\n……. \n```\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议  \n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n\t@property (nonatomic) UITableView *taskTable;\n\t@property (nonatomic) NSMutableArray *tasks;\n@end\n```\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n```objc\nself.taskTable.dataSource = self;\n```\nUITableViewDataSource设置了两个必须方法：\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n\t- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t\treturn [self.tasks count];\n\t}\n\t- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\t\tUITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t//重用cell\n\t\tNSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t\tc.textLabel.text = item;\n\t\treturn c;\n\t}\n```\n刷新表格：[self.taskTable reloadData];\n\n### 范畴\n通过范畴（category）可以为任何已有的类添加方法。  \n创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。  \n打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。\n声明示例：NSString+MD5.h\n```objc\n@interface NSString (MD5)\n+ (NSString *)md5:(NSString *)originalStr;\n@end\n```\n\n### KVC，KVO\n动态编程 ，暂时没看\n\n### 内省\n能够让他对象在程序运行时候回答关于自身的问题。\n\n\n\n\n","source":"_posts/objectice-c.md","raw":"title: objective-c 学习笔记\ndate: 2016/7/31 10:07:12  \ncategories: IOS\ntags:\n\t- objective-c\n\t- 读书笔记\n\n---\n\n开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。\n\n<!--more-->\n\n### 函数\n函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。\n\n### 全局变量\n在函数外声明的变量，只要类被import就能使用。  \nJava中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。  \n为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。  \n**那么这和@property有什么区别？**静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。\n\n### 指针\n&表示取地址，*表示取值。  \n空指针用nil而不是null。\n\n### 结构\n使用结构保存多个相关数据。\n```objc\nstruct Person{\n\tfloat height；\n\tint age；\n}；\n```\n使用：`struct Person mikey；`  \n使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。\n```objc\ntypedef struct {\n\tfloat height；\n\tint age；\n} Person；\n```\n使用：`Person mikey；`\n\n### 获取结构中的属性：\n当结构的使用者是一个指针时，使用->表示先获取指针p指向的数据结构，然后返回该结构的成员变量。  \n当结构的使用者是一个实例时，使用.表示访问属性。\n\n### id %@\nid表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。\nInstanceType表示方法的返回类型。  \n%@表示占位符，代表指针，会向相应指针变量对象发送description消息。\n\n### ARC\n@“…”表示创建一个NSString对象。需要知道字符串完整内容。  \n也可使用stringWithFormat方法动态创建：\n```objc\nNSString *dateString = [NSString stringWithFormat:@“The date is %@”, now]\n```\n\n### NSArray\n创建：\n```objc\nNSArray *dateList = @[now, tomorrow ,yesterday];\n```\nNSArray是无法改变的，被创建后无法添加删除以及改变顺序。  \n快速遍历数组： \n```objc\nfor(NSDate *d in daeList){}\n```\n\n### NSMutableArray\n可变数组，可添加删除和修改顺序。  \ninsertObject：atIndex在指定位置插入  \nremoveObject：atIndex删除数组中对象  \n快速遍历时不能添加删除数组内数据。\n\n### 自定义一个类\n头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始\n取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。\n\n### self\nself是指针，指向运行当前方法的对象。\n\n### 属性\n属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。  \n使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。\n\n### 继承\nNSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。\n\n### @class\n一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.  \n如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB\n\n### 类拓展\n类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。\n```objc\n\t#import “BNREmployee.h”\n\t@interface BNREmployee()\t\n\t@property (nonatomic) unsigned int officeAlarmCode;\n\t@end\n```\n注意要有括号，写在implement前面。  \n头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。\n\n### 弱引用\n通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。\n\n### Collection类\nNSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。  \nNSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。  \nNSMutable是NS的子类。  \ncollection不能保存nil。如果要保存nil则要保存NSNull类的实例。\n```objc\n[hotel addObject:[NSNull null]];\n```\n\n### 常量\n可以通过两种途径定义常量，#define和全局变量。  \n1. #define A B 告诉编译器看到A用B替换\n2. extern NSString const *NSLocaleCurrencyCode；  \nconst表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义\n\n### #include和#import\nimport会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。\n\n### enum\n定义一组常量。\n```objc\ntypedef enum{\n\tBlenderSpeedStir=1，\n\tBlenderSpeedChop=2，\n} BlenderSpeed；\n```\n还可以写成这样：\n```objc\ntypedef NS_ENUM(NSInteger, BlenderSpeed) {\n//以下是枚举成员\n    Test1A = 0,\n    Test1B = 1,\n    Test1C = 2,\n    Test1D = 3\n};\n```\n使用： BlenderSpeed speed；\n\n### 通过NSString和NSData写入文件\n没看\n\n### 回调\n没看\n\n### Block\n```objc\n^(double dividend){\n\tdouble quotient = dividend / divisor;\n\treturn quotient;\n}\n```\nBlock对象可以被当做一个实参来传递给可以接收block的方法。\n\n### 声明block变量:\n```objc \nvoid (^devowelizer)(id, NSUInteger, BOOL*);\n```\nvoid 表示返回类型  \n^ 表示是一个block对象  \ndevowelizer 表示block变量的名称  \n后面的是实参类型  \n方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block\n\n### 编写Block对象\n```objc\ndevowelizer = ^(id string,NSUInteger i, BOOL *stop){\n\t……\n};\n```\n\n### 调用block变量\n```objc\ndevowelizer(string,i,stop);\n```\n### typedef\n不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。\n```objc\ntypedef void(^ArrayEnumerationBlock)(id,NSUInteger,BOOL *);\n```\n需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。\n```objc\nArrayEnumerationBlock devowelizer；\n```\n\n### 外部变量\n在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。\n\n### 在Block中使用self\n如果要写一个使用self的Block对象，需要避免强引用循环。  \n在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。\n```objc\n_weak BNREmployee *weakSelf = self;\t//弱引用指针\n\tmyBlock = ^{\n\t\tNSLog(@“Employee:%@”,weakSelf);\n\t};\n```\n### 修改外部变量\n如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。\n\n### 协议\n协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。  \nUITableView数据源协议是UITableViewDataSource，方法声明如下：\n```objc\n@protocal UITableViewDataSource<NSObject>\n@required\n- (NSInteger)tableView:(UITableView *)tv\n\tnumberOfRowsInSection:(NSInteger) section;\n@optional\n……. \n```\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议  \n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n\t@property (nonatomic) UITableView *taskTable;\n\t@property (nonatomic) NSMutableArray *tasks;\n@end\n```\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n```objc\nself.taskTable.dataSource = self;\n```\nUITableViewDataSource设置了两个必须方法：\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n\t- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t\treturn [self.tasks count];\n\t}\n\t- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\t\tUITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t//重用cell\n\t\tNSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t\tc.textLabel.text = item;\n\t\treturn c;\n\t}\n```\n刷新表格：[self.taskTable reloadData];\n\n### 范畴\n通过范畴（category）可以为任何已有的类添加方法。  \n创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。  \n打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。\n声明示例：NSString+MD5.h\n```objc\n@interface NSString (MD5)\n+ (NSString *)md5:(NSString *)originalStr;\n@end\n```\n\n### KVC，KVO\n动态编程 ，暂时没看\n\n### 内省\n能够让他对象在程序运行时候回答关于自身的问题。\n\n\n\n\n","slug":"objectice-c","published":1,"updated":"2016-08-05T13:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqt000aweru8xnfv4nk","content":"<p>开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。</p>\n<a id=\"more\"></a>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>在函数外声明的变量，只要类被import就能使用。<br>Java中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。<br>为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。<br><strong>那么这和@property有什么区别？</strong>静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>&amp;表示取地址，*表示取值。<br>空指针用nil而不是null。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>使用结构保存多个相关数据。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Person&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125;；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>struct Person mikey；</code><br>使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125; Person；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>Person mikey；</code></p>\n<h3 id=\"获取结构中的属性：\"><a href=\"#获取结构中的属性：\" class=\"headerlink\" title=\"获取结构中的属性：\"></a>获取结构中的属性：</h3><p>当结构的使用者是一个指针时，使用-&gt;表示先获取指针p指向的数据结构，然后返回该结构的成员变量。<br>当结构的使用者是一个实例时，使用.表示访问属性。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id %@\"></a>id %@</h3><p>id表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。<br>InstanceType表示方法的返回类型。<br>%@表示占位符，代表指针，会向相应指针变量对象发送description消息。</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>@“…”表示创建一个NSString对象。需要知道字符串完整内容。<br>也可使用stringWithFormat方法动态创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [<span class=\"built_in\">NSString</span> stringWithFormat:@“The date is %@”, now]</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h3><p>创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *dateList = @[now, tomorrow ,yesterday];</div></pre></td></tr></table></figure></p>\n<p>NSArray是无法改变的，被创建后无法添加删除以及改变顺序。<br>快速遍历数组：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">NSDate</span> *d <span class=\"keyword\">in</span> daeList)&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h3><p>可变数组，可添加删除和修改顺序。<br>insertObject：atIndex在指定位置插入<br>removeObject：atIndex删除数组中对象<br>快速遍历时不能添加删除数组内数据。</p>\n<h3 id=\"自定义一个类\"><a href=\"#自定义一个类\" class=\"headerlink\" title=\"自定义一个类\"></a>自定义一个类</h3><p>头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始<br>取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>self是指针，指向运行当前方法的对象。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。<br>使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>NSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"@class\"></a>@class</h3><p>一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.<br>如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB</p>\n<h3 id=\"类拓展\"><a href=\"#类拓展\" class=\"headerlink\" title=\"类拓展\"></a>类拓展</h3><p>类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import “BNREmployee.h”</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNREmployee</span>()\t</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> officeAlarmCode;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意要有括号，写在implement前面。<br>头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。</p>\n<h3 id=\"Collection类\"><a href=\"#Collection类\" class=\"headerlink\" title=\"Collection类\"></a>Collection类</h3><p>NSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。<br>NSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。<br>NSMutable是NS的子类。<br>collection不能保存nil。如果要保存nil则要保存NSNull类的实例。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[hotel addObject:[<span class=\"built_in\">NSNull</span> null]];</div></pre></td></tr></table></figure></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>可以通过两种途径定义常量，#define和全局变量。  </p>\n<ol>\n<li>#define A B 告诉编译器看到A用B替换</li>\n<li>extern NSString const *NSLocaleCurrencyCode；<br>const表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义</li>\n</ol>\n<h3 id=\"include和-import\"><a href=\"#include和-import\" class=\"headerlink\" title=\"#include和#import\"></a>#include和#import</h3><p>import会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。</p>\n<h3 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h3><p>定义一组常量。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</div><div class=\"line\">\tBlenderSpeedStir=<span class=\"number\">1</span>，</div><div class=\"line\">\tBlenderSpeedChop=<span class=\"number\">2</span>，</div><div class=\"line\">&#125; BlenderSpeed；</div></pre></td></tr></table></figure></p>\n<p>还可以写成这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, BlenderSpeed) &#123;</div><div class=\"line\"><span class=\"comment\">//以下是枚举成员</span></div><div class=\"line\">    Test1A = <span class=\"number\">0</span>,</div><div class=\"line\">    Test1B = <span class=\"number\">1</span>,</div><div class=\"line\">    Test1C = <span class=\"number\">2</span>,</div><div class=\"line\">    Test1D = <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用： BlenderSpeed speed；</p>\n<h3 id=\"通过NSString和NSData写入文件\"><a href=\"#通过NSString和NSData写入文件\" class=\"headerlink\" title=\"通过NSString和NSData写入文件\"></a>通过NSString和NSData写入文件</h3><p>没看</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>没看</p>\n<h3 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"keyword\">double</span> dividend)&#123;</div><div class=\"line\">\t<span class=\"keyword\">double</span> quotient = dividend / divisor;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quotient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Block对象可以被当做一个实参来传递给可以接收block的方法。</p>\n<h3 id=\"声明block变量\"><a href=\"#声明block变量\" class=\"headerlink\" title=\"声明block变量:\"></a>声明block变量:</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (^devowelizer)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSUInteger</span>, <span class=\"built_in\">BOOL</span>*);</div></pre></td></tr></table></figure>\n<p>void 表示返回类型<br>^ 表示是一个block对象<br>devowelizer 表示block变量的名称<br>后面的是实参类型<br>方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block</p>\n<h3 id=\"编写Block对象\"><a href=\"#编写Block对象\" class=\"headerlink\" title=\"编写Block对象\"></a>编写Block对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer = ^(<span class=\"keyword\">id</span> string,<span class=\"built_in\">NSUInteger</span> i, <span class=\"built_in\">BOOL</span> *stop)&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"调用block变量\"><a href=\"#调用block变量\" class=\"headerlink\" title=\"调用block变量\"></a>调用block变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer(string,i,stop);</div></pre></td></tr></table></figure>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^ArrayEnumerationBlock)(<span class=\"keyword\">id</span>,<span class=\"built_in\">NSUInteger</span>,<span class=\"built_in\">BOOL</span> *);</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayEnumerationBlock devowelizer；</div></pre></td></tr></table></figure></p>\n<h3 id=\"外部变量\"><a href=\"#外部变量\" class=\"headerlink\" title=\"外部变量\"></a>外部变量</h3><p>在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。</p>\n<h3 id=\"在Block中使用self\"><a href=\"#在Block中使用self\" class=\"headerlink\" title=\"在Block中使用self\"></a>在Block中使用self</h3><p>如果要写一个使用self的Block对象，需要避免强引用循环。<br>在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"keyword\">weak</span> BNREmployee *weakSelf = <span class=\"keyword\">self</span>;\t<span class=\"comment\">//弱引用指针</span></div><div class=\"line\">\tmyBlock = ^&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">NSLog</span>(@“Employee:%@”,weakSelf);</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改外部变量\"><a href=\"#修改外部变量\" class=\"headerlink\" title=\"修改外部变量\"></a>修改外部变量</h3><p>如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。<br>UITableView数据源协议是UITableViewDataSource，方法声明如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocal <span class=\"built_in\">UITableViewDataSource</span>&lt;<span class=\"built_in\">NSObject</span>&gt;</div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tv</div><div class=\"line\">\tnumberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>) section;</div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\">…….</div></pre></td></tr></table></figure></p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure></p>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">\t- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t<span class=\"comment\">//重用cell</span></div><div class=\"line\">\t\t<span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t\tc.textLabel.text = item;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：[self.taskTable reloadData];</p>\n<h3 id=\"范畴\"><a href=\"#范畴\" class=\"headerlink\" title=\"范畴\"></a>范畴</h3><p>通过范畴（category）可以为任何已有的类添加方法。<br>创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。<br>打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。<br>声明示例：NSString+MD5.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">MD5</span>)</span></div><div class=\"line\">+ (<span class=\"built_in\">NSString</span> *)md5:(<span class=\"built_in\">NSString</span> *)originalStr;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"KVC，KVO\"><a href=\"#KVC，KVO\" class=\"headerlink\" title=\"KVC，KVO\"></a>KVC，KVO</h3><p>动态编程 ，暂时没看</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>能够让他对象在程序运行时候回答关于自身的问题。</p>\n","excerpt":"<p>开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。</p>","more":"<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>在函数外声明的变量，只要类被import就能使用。<br>Java中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。<br>为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。<br><strong>那么这和@property有什么区别？</strong>静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>&amp;表示取地址，*表示取值。<br>空指针用nil而不是null。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>使用结构保存多个相关数据。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Person&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125;；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>struct Person mikey；</code><br>使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125; Person；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>Person mikey；</code></p>\n<h3 id=\"获取结构中的属性：\"><a href=\"#获取结构中的属性：\" class=\"headerlink\" title=\"获取结构中的属性：\"></a>获取结构中的属性：</h3><p>当结构的使用者是一个指针时，使用-&gt;表示先获取指针p指向的数据结构，然后返回该结构的成员变量。<br>当结构的使用者是一个实例时，使用.表示访问属性。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id %@\"></a>id %@</h3><p>id表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。<br>InstanceType表示方法的返回类型。<br>%@表示占位符，代表指针，会向相应指针变量对象发送description消息。</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>@“…”表示创建一个NSString对象。需要知道字符串完整内容。<br>也可使用stringWithFormat方法动态创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [<span class=\"built_in\">NSString</span> stringWithFormat:@“The date is %@”, now]</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h3><p>创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *dateList = @[now, tomorrow ,yesterday];</div></pre></td></tr></table></figure></p>\n<p>NSArray是无法改变的，被创建后无法添加删除以及改变顺序。<br>快速遍历数组：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">NSDate</span> *d <span class=\"keyword\">in</span> daeList)&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h3><p>可变数组，可添加删除和修改顺序。<br>insertObject：atIndex在指定位置插入<br>removeObject：atIndex删除数组中对象<br>快速遍历时不能添加删除数组内数据。</p>\n<h3 id=\"自定义一个类\"><a href=\"#自定义一个类\" class=\"headerlink\" title=\"自定义一个类\"></a>自定义一个类</h3><p>头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始<br>取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>self是指针，指向运行当前方法的对象。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。<br>使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>NSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"@class\"></a>@class</h3><p>一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.<br>如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB</p>\n<h3 id=\"类拓展\"><a href=\"#类拓展\" class=\"headerlink\" title=\"类拓展\"></a>类拓展</h3><p>类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import “BNREmployee.h”</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNREmployee</span>()\t</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> officeAlarmCode;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意要有括号，写在implement前面。<br>头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。</p>\n<h3 id=\"Collection类\"><a href=\"#Collection类\" class=\"headerlink\" title=\"Collection类\"></a>Collection类</h3><p>NSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。<br>NSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。<br>NSMutable是NS的子类。<br>collection不能保存nil。如果要保存nil则要保存NSNull类的实例。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[hotel addObject:[<span class=\"built_in\">NSNull</span> null]];</div></pre></td></tr></table></figure></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>可以通过两种途径定义常量，#define和全局变量。  </p>\n<ol>\n<li>#define A B 告诉编译器看到A用B替换</li>\n<li>extern NSString const *NSLocaleCurrencyCode；<br>const表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义</li>\n</ol>\n<h3 id=\"include和-import\"><a href=\"#include和-import\" class=\"headerlink\" title=\"#include和#import\"></a>#include和#import</h3><p>import会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。</p>\n<h3 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h3><p>定义一组常量。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</div><div class=\"line\">\tBlenderSpeedStir=<span class=\"number\">1</span>，</div><div class=\"line\">\tBlenderSpeedChop=<span class=\"number\">2</span>，</div><div class=\"line\">&#125; BlenderSpeed；</div></pre></td></tr></table></figure></p>\n<p>还可以写成这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, BlenderSpeed) &#123;</div><div class=\"line\"><span class=\"comment\">//以下是枚举成员</span></div><div class=\"line\">    Test1A = <span class=\"number\">0</span>,</div><div class=\"line\">    Test1B = <span class=\"number\">1</span>,</div><div class=\"line\">    Test1C = <span class=\"number\">2</span>,</div><div class=\"line\">    Test1D = <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用： BlenderSpeed speed；</p>\n<h3 id=\"通过NSString和NSData写入文件\"><a href=\"#通过NSString和NSData写入文件\" class=\"headerlink\" title=\"通过NSString和NSData写入文件\"></a>通过NSString和NSData写入文件</h3><p>没看</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>没看</p>\n<h3 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"keyword\">double</span> dividend)&#123;</div><div class=\"line\">\t<span class=\"keyword\">double</span> quotient = dividend / divisor;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quotient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Block对象可以被当做一个实参来传递给可以接收block的方法。</p>\n<h3 id=\"声明block变量\"><a href=\"#声明block变量\" class=\"headerlink\" title=\"声明block变量:\"></a>声明block变量:</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (^devowelizer)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSUInteger</span>, <span class=\"built_in\">BOOL</span>*);</div></pre></td></tr></table></figure>\n<p>void 表示返回类型<br>^ 表示是一个block对象<br>devowelizer 表示block变量的名称<br>后面的是实参类型<br>方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block</p>\n<h3 id=\"编写Block对象\"><a href=\"#编写Block对象\" class=\"headerlink\" title=\"编写Block对象\"></a>编写Block对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer = ^(<span class=\"keyword\">id</span> string,<span class=\"built_in\">NSUInteger</span> i, <span class=\"built_in\">BOOL</span> *stop)&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"调用block变量\"><a href=\"#调用block变量\" class=\"headerlink\" title=\"调用block变量\"></a>调用block变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer(string,i,stop);</div></pre></td></tr></table></figure>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^ArrayEnumerationBlock)(<span class=\"keyword\">id</span>,<span class=\"built_in\">NSUInteger</span>,<span class=\"built_in\">BOOL</span> *);</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayEnumerationBlock devowelizer；</div></pre></td></tr></table></figure></p>\n<h3 id=\"外部变量\"><a href=\"#外部变量\" class=\"headerlink\" title=\"外部变量\"></a>外部变量</h3><p>在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。</p>\n<h3 id=\"在Block中使用self\"><a href=\"#在Block中使用self\" class=\"headerlink\" title=\"在Block中使用self\"></a>在Block中使用self</h3><p>如果要写一个使用self的Block对象，需要避免强引用循环。<br>在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"keyword\">weak</span> BNREmployee *weakSelf = <span class=\"keyword\">self</span>;\t<span class=\"comment\">//弱引用指针</span></div><div class=\"line\">\tmyBlock = ^&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">NSLog</span>(@“Employee:%@”,weakSelf);</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改外部变量\"><a href=\"#修改外部变量\" class=\"headerlink\" title=\"修改外部变量\"></a>修改外部变量</h3><p>如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。<br>UITableView数据源协议是UITableViewDataSource，方法声明如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocal <span class=\"built_in\">UITableViewDataSource</span>&lt;<span class=\"built_in\">NSObject</span>&gt;</div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tv</div><div class=\"line\">\tnumberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>) section;</div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\">…….</div></pre></td></tr></table></figure></p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure></p>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">\t- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t<span class=\"comment\">//重用cell</span></div><div class=\"line\">\t\t<span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t\tc.textLabel.text = item;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：[self.taskTable reloadData];</p>\n<h3 id=\"范畴\"><a href=\"#范畴\" class=\"headerlink\" title=\"范畴\"></a>范畴</h3><p>通过范畴（category）可以为任何已有的类添加方法。<br>创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。<br>打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。<br>声明示例：NSString+MD5.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">MD5</span>)</span></div><div class=\"line\">+ (<span class=\"built_in\">NSString</span> *)md5:(<span class=\"built_in\">NSString</span> *)originalStr;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"KVC，KVO\"><a href=\"#KVC，KVO\" class=\"headerlink\" title=\"KVC，KVO\"></a>KVC，KVO</h3><p>动态编程 ，暂时没看</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>能够让他对象在程序运行时候回答关于自身的问题。</p>"},{"title":"使用xib设置view的border的宽度和颜色","date":"2016-08-10T06:07:12.000Z","_content":"\n使用User Defined Runtime Attributes可以配置一些在interface builder 中不能配置的属性。有助于编写更加轻量级的viewcontroller。\n\n<!--more-->\n\n写一个button的时候经常会需要设置其cornerRadious，borderWidth和borderColor三个属性。如果在代码中实现，需要设置一个button属性，再与xib进行关联。\n可以使用User Defined Runtime Attributes在xib中进行设置。\n\n对一个view进行设置主要还是设置它的layer。因此，设置的key,type依次是：\n```objc\nlayer.cornerRadius\t\t\t\tNumber\nlayer.borderWidth\t\t\t\tNumber\nlayer.borderColor\t\t\t\tColor\n```\n\n但是，进过设置后会发现borderColor属性设置并不成功。这是因为这里设置的颜色类型是UIColor而borderColor是CGColor因此显示不出来。\n\n需要使用category定义一个CALayer的方法\n```objc\n#import \"CALayer+Additions.h\"\n#import <UIKit/UIKit.h>\n@implementation CALayer (Additions)\n- (void)setBorderColorFromUIColor:(UIColor *)color{\n    self.borderColor = color.CGColor;\n}\n@end\n```\n通过这个方法可以把Color设置为borderColor。\nxib中的key需要改成此方法名\n**layer.borderColorFromUIColor**\n\n在xib中设置borderColorFromUIColor的时候，不需要将新建的CALayer+Additions.h头文件import入任何类，编译的时候会自动调用。\n\n设置masksToBounds为YES（也就是xib中的clip bounds）可以将图层里面东西截取，否则，超出父布局的子视图也将全部显示。\n","source":"_posts/xib设置border.md","raw":"title: 使用xib设置view的border的宽度和颜色\ndate: 2016/8/10 14:07:12  \ncategories: IOS\ntags: [runtime]\n\n---\n\n使用User Defined Runtime Attributes可以配置一些在interface builder 中不能配置的属性。有助于编写更加轻量级的viewcontroller。\n\n<!--more-->\n\n写一个button的时候经常会需要设置其cornerRadious，borderWidth和borderColor三个属性。如果在代码中实现，需要设置一个button属性，再与xib进行关联。\n可以使用User Defined Runtime Attributes在xib中进行设置。\n\n对一个view进行设置主要还是设置它的layer。因此，设置的key,type依次是：\n```objc\nlayer.cornerRadius\t\t\t\tNumber\nlayer.borderWidth\t\t\t\tNumber\nlayer.borderColor\t\t\t\tColor\n```\n\n但是，进过设置后会发现borderColor属性设置并不成功。这是因为这里设置的颜色类型是UIColor而borderColor是CGColor因此显示不出来。\n\n需要使用category定义一个CALayer的方法\n```objc\n#import \"CALayer+Additions.h\"\n#import <UIKit/UIKit.h>\n@implementation CALayer (Additions)\n- (void)setBorderColorFromUIColor:(UIColor *)color{\n    self.borderColor = color.CGColor;\n}\n@end\n```\n通过这个方法可以把Color设置为borderColor。\nxib中的key需要改成此方法名\n**layer.borderColorFromUIColor**\n\n在xib中设置borderColorFromUIColor的时候，不需要将新建的CALayer+Additions.h头文件import入任何类，编译的时候会自动调用。\n\n设置masksToBounds为YES（也就是xib中的clip bounds）可以将图层里面东西截取，否则，超出父布局的子视图也将全部显示。\n","slug":"xib设置border","published":1,"updated":"2016-08-12T03:22:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmqu000cweru3x7jgvld","content":"<p>使用User Defined Runtime Attributes可以配置一些在interface builder 中不能配置的属性。有助于编写更加轻量级的viewcontroller。</p>\n<a id=\"more\"></a>\n<p>写一个button的时候经常会需要设置其cornerRadious，borderWidth和borderColor三个属性。如果在代码中实现，需要设置一个button属性，再与xib进行关联。<br>可以使用User Defined Runtime Attributes在xib中进行设置。</p>\n<p>对一个view进行设置主要还是设置它的layer。因此，设置的key,type依次是：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">layer.cornerRadius\t\t\t\tNumber</div><div class=\"line\">layer.borderWidth\t\t\t\tNumber</div><div class=\"line\">layer.borderColor\t\t\t\tColor</div></pre></td></tr></table></figure></p>\n<p>但是，进过设置后会发现borderColor属性设置并不成功。这是因为这里设置的颜色类型是UIColor而borderColor是CGColor因此显示不出来。</p>\n<p>需要使用category定义一个CALayer的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CALayer+Additions.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CALayer</span> (<span class=\"title\">Additions</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setBorderColorFromUIColor:(<span class=\"built_in\">UIColor</span> *)color&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.borderColor = color.CGColor;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>通过这个方法可以把Color设置为borderColor。<br>xib中的key需要改成此方法名<br><strong>layer.borderColorFromUIColor</strong></p>\n<p>在xib中设置borderColorFromUIColor的时候，不需要将新建的CALayer+Additions.h头文件import入任何类，编译的时候会自动调用。</p>\n<p>设置masksToBounds为YES（也就是xib中的clip bounds）可以将图层里面东西截取，否则，超出父布局的子视图也将全部显示。</p>\n","excerpt":"<p>使用User Defined Runtime Attributes可以配置一些在interface builder 中不能配置的属性。有助于编写更加轻量级的viewcontroller。</p>","more":"<p>写一个button的时候经常会需要设置其cornerRadious，borderWidth和borderColor三个属性。如果在代码中实现，需要设置一个button属性，再与xib进行关联。<br>可以使用User Defined Runtime Attributes在xib中进行设置。</p>\n<p>对一个view进行设置主要还是设置它的layer。因此，设置的key,type依次是：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">layer.cornerRadius\t\t\t\tNumber</div><div class=\"line\">layer.borderWidth\t\t\t\tNumber</div><div class=\"line\">layer.borderColor\t\t\t\tColor</div></pre></td></tr></table></figure></p>\n<p>但是，进过设置后会发现borderColor属性设置并不成功。这是因为这里设置的颜色类型是UIColor而borderColor是CGColor因此显示不出来。</p>\n<p>需要使用category定义一个CALayer的方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"CALayer+Additions.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">CALayer</span> (<span class=\"title\">Additions</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setBorderColorFromUIColor:(<span class=\"built_in\">UIColor</span> *)color&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.borderColor = color.CGColor;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>通过这个方法可以把Color设置为borderColor。<br>xib中的key需要改成此方法名<br><strong>layer.borderColorFromUIColor</strong></p>\n<p>在xib中设置borderColorFromUIColor的时候，不需要将新建的CALayer+Additions.h头文件import入任何类，编译的时候会自动调用。</p>\n<p>设置masksToBounds为YES（也就是xib中的clip bounds）可以将图层里面东西截取，否则，超出父布局的子视图也将全部显示。</p>"},{"title":"图解TCP-IP学习笔记","date":"2016-07-31T08:07:12.000Z","_content":"\n本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙\n<!--more-->\n## 网络基础知识\n### 协议分层\nISO制定了国际标准OSI，对通信系统进行了标准化。\n- **应用层**：针对特定应用的协议。\n- **表示层**：设备固有数据格式和网络标准设局格式的转换。\n- **会话层**：通信管理，负责建立和断开通信连接。\n- **传输层**：管理两个节点之间的数据传输。\n- **网络层**：地址管理和路由选择。\n- **数据链路层**：互联设备间传送和识别数据帧。\n- **物理层**：01代表高低平的互换\n\n### 电路交换与分组交换\n- **电路交换**：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。\n- **分组交换**：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。\n\n### 地址\n- **MAC地址**：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。\n- **IP地址**：IP地址由网络号和主机号两部分组成。具有层次性。\n\nMAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。\n\n### 网络的构成元素\n- **网卡**：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。\n- **中继器**：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。\n- **网桥**：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。\n- **路由器/3层交换机**：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。\n- **4-7层交换机**：负责处理OSI模型中从传输层到应用层的数据。\n- **网关**：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。\n\n## TCP/IP基础知识\n### TCP/IP模型\n- **硬件(物理层)**\n- **网络接口层(数据链路层)**\n- **互联网层(网络层)**\n + IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。\n + ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的\n + ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。\n- **传输层**\n + TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。\n + UDP：面向无连接的传输层协议。\n- **应用层(会话层以上的分层)**\n + WWW\n + 电子邮件(E-Mail)\n + 文件传输(FTP)\n + 远程登录(TELNET,SSH)\n + 网络管理(SNMP)\n \n## 数据链路\n### 数据链路的作用\n数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。\n\n数据链路的**段**是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。\n\n网络的连接和构成形态成为**网络拓扑**。\n\n### 数据链路相关技术\n**共享介质型网络**：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。\n\n**非共享介质网络**：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。\n\n以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。\n\n### 以太网\n众多数据链路中最著名，使用最广发的是以太网。\n\n## IP协议\n### IP即网络协议\n网络层的下一层——数据链路层主要作用是在互连**同一种数据链路节点**之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。\n\n配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。\n\n**网络层与数据链路层关系**：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。\n\n### IP基础知识\nIP大致分为三大模块，IP寻址，路由，IP分包和组包。\n\n为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。\n\n路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。\n\nIP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。\n\n### IP地址的基础知识\nIP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。\n\nIP地址的分类：\n1. A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识\n2. B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识\n3. C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识\n4. D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。\n\n**广播地址**用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。\n\n**多播**用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。\n\n网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做\"**子网掩码**\"的识别码通过子网网络地址细分出比ABC更小粒度的网络。  \n子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.\n\n由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于**私有IP**，在此之外的IP称为**全局IP**。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。\n\n对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。\n\n### 路由控制\n仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是**路由控制表**。\n\n路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。\n\n## IP协议相关\n### DNS\nDNS将主机名字符串转换为具体的IP地址。\n\n### ARP\n只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。\n\nARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。\n\n从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过**ARP**从IP地址获得MAC地址，实现链路内的IP通信。\n\n根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/图解TCP_IP.md","raw":"\ntitle: 图解TCP-IP学习笔记\ndate: 2016/7/31 16:07:12  \ncategories: 计算机\ntags: [读书笔记]\n\n---\n\n本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙\n<!--more-->\n## 网络基础知识\n### 协议分层\nISO制定了国际标准OSI，对通信系统进行了标准化。\n- **应用层**：针对特定应用的协议。\n- **表示层**：设备固有数据格式和网络标准设局格式的转换。\n- **会话层**：通信管理，负责建立和断开通信连接。\n- **传输层**：管理两个节点之间的数据传输。\n- **网络层**：地址管理和路由选择。\n- **数据链路层**：互联设备间传送和识别数据帧。\n- **物理层**：01代表高低平的互换\n\n### 电路交换与分组交换\n- **电路交换**：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。\n- **分组交换**：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。\n\n### 地址\n- **MAC地址**：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。\n- **IP地址**：IP地址由网络号和主机号两部分组成。具有层次性。\n\nMAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。\n\n### 网络的构成元素\n- **网卡**：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。\n- **中继器**：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。\n- **网桥**：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。\n- **路由器/3层交换机**：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。\n- **4-7层交换机**：负责处理OSI模型中从传输层到应用层的数据。\n- **网关**：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。\n\n## TCP/IP基础知识\n### TCP/IP模型\n- **硬件(物理层)**\n- **网络接口层(数据链路层)**\n- **互联网层(网络层)**\n + IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。\n + ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的\n + ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。\n- **传输层**\n + TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。\n + UDP：面向无连接的传输层协议。\n- **应用层(会话层以上的分层)**\n + WWW\n + 电子邮件(E-Mail)\n + 文件传输(FTP)\n + 远程登录(TELNET,SSH)\n + 网络管理(SNMP)\n \n## 数据链路\n### 数据链路的作用\n数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。\n\n数据链路的**段**是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。\n\n网络的连接和构成形态成为**网络拓扑**。\n\n### 数据链路相关技术\n**共享介质型网络**：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。\n\n**非共享介质网络**：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。\n\n以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。\n\n### 以太网\n众多数据链路中最著名，使用最广发的是以太网。\n\n## IP协议\n### IP即网络协议\n网络层的下一层——数据链路层主要作用是在互连**同一种数据链路节点**之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。\n\n配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。\n\n**网络层与数据链路层关系**：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。\n\n### IP基础知识\nIP大致分为三大模块，IP寻址，路由，IP分包和组包。\n\n为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。\n\n路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。\n\nIP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。\n\n### IP地址的基础知识\nIP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。\n\nIP地址的分类：\n1. A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识\n2. B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识\n3. C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识\n4. D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。\n\n**广播地址**用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。\n\n**多播**用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。\n\n网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做\"**子网掩码**\"的识别码通过子网网络地址细分出比ABC更小粒度的网络。  \n子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.\n\n由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于**私有IP**，在此之外的IP称为**全局IP**。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。\n\n对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。\n\n### 路由控制\n仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是**路由控制表**。\n\n路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。\n\n## IP协议相关\n### DNS\nDNS将主机名字符串转换为具体的IP地址。\n\n### ARP\n只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。\n\nARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。\n\n从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过**ARP**从IP地址获得MAC地址，实现链路内的IP通信。\n\n根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。\n\n\n\n\n\n\n\n\n\n\n","slug":"图解TCP_IP","published":1,"updated":"2016-08-05T13:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmr0000hwerun039drkz","content":"<p>本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙<br><a id=\"more\"></a></p>\n<h2 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h2><h3 id=\"协议分层\"><a href=\"#协议分层\" class=\"headerlink\" title=\"协议分层\"></a>协议分层</h3><p>ISO制定了国际标准OSI，对通信系统进行了标准化。</p>\n<ul>\n<li><strong>应用层</strong>：针对特定应用的协议。</li>\n<li><strong>表示层</strong>：设备固有数据格式和网络标准设局格式的转换。</li>\n<li><strong>会话层</strong>：通信管理，负责建立和断开通信连接。</li>\n<li><strong>传输层</strong>：管理两个节点之间的数据传输。</li>\n<li><strong>网络层</strong>：地址管理和路由选择。</li>\n<li><strong>数据链路层</strong>：互联设备间传送和识别数据帧。</li>\n<li><strong>物理层</strong>：01代表高低平的互换</li>\n</ul>\n<h3 id=\"电路交换与分组交换\"><a href=\"#电路交换与分组交换\" class=\"headerlink\" title=\"电路交换与分组交换\"></a>电路交换与分组交换</h3><ul>\n<li><strong>电路交换</strong>：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。</li>\n<li><strong>分组交换</strong>：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。</li>\n</ul>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><ul>\n<li><strong>MAC地址</strong>：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。</li>\n<li><strong>IP地址</strong>：IP地址由网络号和主机号两部分组成。具有层次性。</li>\n</ul>\n<p>MAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。</p>\n<h3 id=\"网络的构成元素\"><a href=\"#网络的构成元素\" class=\"headerlink\" title=\"网络的构成元素\"></a>网络的构成元素</h3><ul>\n<li><strong>网卡</strong>：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。</li>\n<li><strong>中继器</strong>：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。</li>\n<li><strong>网桥</strong>：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。</li>\n<li><strong>路由器/3层交换机</strong>：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。</li>\n<li><strong>4-7层交换机</strong>：负责处理OSI模型中从传输层到应用层的数据。</li>\n<li><strong>网关</strong>：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。</li>\n</ul>\n<h2 id=\"TCP-IP基础知识\"><a href=\"#TCP-IP基础知识\" class=\"headerlink\" title=\"TCP/IP基础知识\"></a>TCP/IP基础知识</h2><h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><ul>\n<li><strong>硬件(物理层)</strong></li>\n<li><strong>网络接口层(数据链路层)</strong></li>\n<li><strong>互联网层(网络层)</strong><ul>\n<li>IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。</li>\n<li>ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的</li>\n<li>ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。</li>\n</ul>\n</li>\n<li><strong>传输层</strong><ul>\n<li>TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。</li>\n<li>UDP：面向无连接的传输层协议。</li>\n</ul>\n</li>\n<li><strong>应用层(会话层以上的分层)</strong><ul>\n<li>WWW</li>\n<li>电子邮件(E-Mail)</li>\n<li>文件传输(FTP)</li>\n<li>远程登录(TELNET,SSH)</li>\n<li>网络管理(SNMP)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据链路\"><a href=\"#数据链路\" class=\"headerlink\" title=\"数据链路\"></a>数据链路</h2><h3 id=\"数据链路的作用\"><a href=\"#数据链路的作用\" class=\"headerlink\" title=\"数据链路的作用\"></a>数据链路的作用</h3><p>数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。</p>\n<p>数据链路的<strong>段</strong>是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。</p>\n<p>网络的连接和构成形态成为<strong>网络拓扑</strong>。</p>\n<h3 id=\"数据链路相关技术\"><a href=\"#数据链路相关技术\" class=\"headerlink\" title=\"数据链路相关技术\"></a>数据链路相关技术</h3><p><strong>共享介质型网络</strong>：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。</p>\n<p><strong>非共享介质网络</strong>：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。</p>\n<p>以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>众多数据链路中最著名，使用最广发的是以太网。</p>\n<h2 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h2><h3 id=\"IP即网络协议\"><a href=\"#IP即网络协议\" class=\"headerlink\" title=\"IP即网络协议\"></a>IP即网络协议</h3><p>网络层的下一层——数据链路层主要作用是在互连<strong>同一种数据链路节点</strong>之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。</p>\n<p>配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。</p>\n<p><strong>网络层与数据链路层关系</strong>：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。</p>\n<h3 id=\"IP基础知识\"><a href=\"#IP基础知识\" class=\"headerlink\" title=\"IP基础知识\"></a>IP基础知识</h3><p>IP大致分为三大模块，IP寻址，路由，IP分包和组包。</p>\n<p>为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。</p>\n<p>路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。</p>\n<p>IP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。</p>\n<h3 id=\"IP地址的基础知识\"><a href=\"#IP地址的基础知识\" class=\"headerlink\" title=\"IP地址的基础知识\"></a>IP地址的基础知识</h3><p>IP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。</p>\n<p>IP地址的分类：</p>\n<ol>\n<li>A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识</li>\n<li>B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识</li>\n<li>C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识</li>\n<li>D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。</li>\n</ol>\n<p><strong>广播地址</strong>用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。</p>\n<p><strong>多播</strong>用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。</p>\n<p>网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做”<strong>子网掩码</strong>“的识别码通过子网网络地址细分出比ABC更小粒度的网络。<br>子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.</p>\n<p>由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于<strong>私有IP</strong>，在此之外的IP称为<strong>全局IP</strong>。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。</p>\n<p>对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是<strong>路由控制表</strong>。</p>\n<p>路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。</p>\n<h2 id=\"IP协议相关\"><a href=\"#IP协议相关\" class=\"headerlink\" title=\"IP协议相关\"></a>IP协议相关</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS将主机名字符串转换为具体的IP地址。</p>\n<h3 id=\"ARP\"><a href=\"#ARP\" class=\"headerlink\" title=\"ARP\"></a>ARP</h3><p>只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。</p>\n<p>ARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。</p>\n<p>从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过<strong>ARP</strong>从IP地址获得MAC地址，实现链路内的IP通信。</p>\n<p>根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。</p>\n","excerpt":"<p>本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙<br>","more":"</p>\n<h2 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h2><h3 id=\"协议分层\"><a href=\"#协议分层\" class=\"headerlink\" title=\"协议分层\"></a>协议分层</h3><p>ISO制定了国际标准OSI，对通信系统进行了标准化。</p>\n<ul>\n<li><strong>应用层</strong>：针对特定应用的协议。</li>\n<li><strong>表示层</strong>：设备固有数据格式和网络标准设局格式的转换。</li>\n<li><strong>会话层</strong>：通信管理，负责建立和断开通信连接。</li>\n<li><strong>传输层</strong>：管理两个节点之间的数据传输。</li>\n<li><strong>网络层</strong>：地址管理和路由选择。</li>\n<li><strong>数据链路层</strong>：互联设备间传送和识别数据帧。</li>\n<li><strong>物理层</strong>：01代表高低平的互换</li>\n</ul>\n<h3 id=\"电路交换与分组交换\"><a href=\"#电路交换与分组交换\" class=\"headerlink\" title=\"电路交换与分组交换\"></a>电路交换与分组交换</h3><ul>\n<li><strong>电路交换</strong>：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。</li>\n<li><strong>分组交换</strong>：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。</li>\n</ul>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><ul>\n<li><strong>MAC地址</strong>：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。</li>\n<li><strong>IP地址</strong>：IP地址由网络号和主机号两部分组成。具有层次性。</li>\n</ul>\n<p>MAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。</p>\n<h3 id=\"网络的构成元素\"><a href=\"#网络的构成元素\" class=\"headerlink\" title=\"网络的构成元素\"></a>网络的构成元素</h3><ul>\n<li><strong>网卡</strong>：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。</li>\n<li><strong>中继器</strong>：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。</li>\n<li><strong>网桥</strong>：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。</li>\n<li><strong>路由器/3层交换机</strong>：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。</li>\n<li><strong>4-7层交换机</strong>：负责处理OSI模型中从传输层到应用层的数据。</li>\n<li><strong>网关</strong>：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。</li>\n</ul>\n<h2 id=\"TCP-IP基础知识\"><a href=\"#TCP-IP基础知识\" class=\"headerlink\" title=\"TCP/IP基础知识\"></a>TCP/IP基础知识</h2><h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><ul>\n<li><strong>硬件(物理层)</strong></li>\n<li><strong>网络接口层(数据链路层)</strong></li>\n<li><strong>互联网层(网络层)</strong><ul>\n<li>IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。</li>\n<li>ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的</li>\n<li>ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。</li>\n</ul>\n</li>\n<li><strong>传输层</strong><ul>\n<li>TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。</li>\n<li>UDP：面向无连接的传输层协议。</li>\n</ul>\n</li>\n<li><strong>应用层(会话层以上的分层)</strong><ul>\n<li>WWW</li>\n<li>电子邮件(E-Mail)</li>\n<li>文件传输(FTP)</li>\n<li>远程登录(TELNET,SSH)</li>\n<li>网络管理(SNMP)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据链路\"><a href=\"#数据链路\" class=\"headerlink\" title=\"数据链路\"></a>数据链路</h2><h3 id=\"数据链路的作用\"><a href=\"#数据链路的作用\" class=\"headerlink\" title=\"数据链路的作用\"></a>数据链路的作用</h3><p>数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。</p>\n<p>数据链路的<strong>段</strong>是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。</p>\n<p>网络的连接和构成形态成为<strong>网络拓扑</strong>。</p>\n<h3 id=\"数据链路相关技术\"><a href=\"#数据链路相关技术\" class=\"headerlink\" title=\"数据链路相关技术\"></a>数据链路相关技术</h3><p><strong>共享介质型网络</strong>：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。</p>\n<p><strong>非共享介质网络</strong>：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。</p>\n<p>以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>众多数据链路中最著名，使用最广发的是以太网。</p>\n<h2 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h2><h3 id=\"IP即网络协议\"><a href=\"#IP即网络协议\" class=\"headerlink\" title=\"IP即网络协议\"></a>IP即网络协议</h3><p>网络层的下一层——数据链路层主要作用是在互连<strong>同一种数据链路节点</strong>之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。</p>\n<p>配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。</p>\n<p><strong>网络层与数据链路层关系</strong>：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。</p>\n<h3 id=\"IP基础知识\"><a href=\"#IP基础知识\" class=\"headerlink\" title=\"IP基础知识\"></a>IP基础知识</h3><p>IP大致分为三大模块，IP寻址，路由，IP分包和组包。</p>\n<p>为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。</p>\n<p>路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。</p>\n<p>IP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。</p>\n<h3 id=\"IP地址的基础知识\"><a href=\"#IP地址的基础知识\" class=\"headerlink\" title=\"IP地址的基础知识\"></a>IP地址的基础知识</h3><p>IP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。</p>\n<p>IP地址的分类：</p>\n<ol>\n<li>A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识</li>\n<li>B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识</li>\n<li>C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识</li>\n<li>D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。</li>\n</ol>\n<p><strong>广播地址</strong>用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。</p>\n<p><strong>多播</strong>用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。</p>\n<p>网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做”<strong>子网掩码</strong>“的识别码通过子网网络地址细分出比ABC更小粒度的网络。<br>子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.</p>\n<p>由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于<strong>私有IP</strong>，在此之外的IP称为<strong>全局IP</strong>。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。</p>\n<p>对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是<strong>路由控制表</strong>。</p>\n<p>路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。</p>\n<h2 id=\"IP协议相关\"><a href=\"#IP协议相关\" class=\"headerlink\" title=\"IP协议相关\"></a>IP协议相关</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS将主机名字符串转换为具体的IP地址。</p>\n<h3 id=\"ARP\"><a href=\"#ARP\" class=\"headerlink\" title=\"ARP\"></a>ARP</h3><p>只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。</p>\n<p>ARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。</p>\n<p>从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过<strong>ARP</strong>从IP地址获得MAC地址，实现链路内的IP通信。</p>\n<p>根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。</p>"},{"title":"删除Storyboard","date":"2016-08-11T06:07:12.000Z","_content":"\nxcode版本升级后，storyboard成了ios新建项目后默认的布局。但是尝试了一会后发觉很不习惯，于是研究了下删除storyboard的方法。\n<!--more-->\n\nstoryboard的入口在**targets->Deployment Info->Main Interface**，默认的值为Main，即初始默认storyboard的名字。因此，想要不加载storyboard，需要将这个默认值删掉，就不会再从storyboard进入了。\n\n删除后，viewController需要一个布局，需要手动创建一个xib文件。需要对xib文件和viewcontroller进行关联。\n- 点击placeholders下的File's Owner将Custom Class的Class设置为viewcController的名字。\n- 将File's Owner的view和xib的View进行关联。\n\n使用storyboard的时候application:didFinishWithOptions:方法只返回一个YES。删除后，需要添加代码对window初始化，否则app什么也显示不了。\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\tself.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n\tUIViewController *uv = [[UIViewController alloc] initWithNibName:@\"ViewController\" bundle:nil];\n\t[self.window setRootViewController:uv];\n\t[self.window makeKeyAndVisible];\n\treturn YES;\n}\n```\n这里要使用initWithNibName方法。\n\n至此，app就可以显示新建的xib文件的布局了\n","source":"_posts/删除storyboard.md","raw":"title: 删除Storyboard\ndate: 2016/8/11 14:07:12  \ncategories: IOS\ntags: [xib]\n\n---\n\nxcode版本升级后，storyboard成了ios新建项目后默认的布局。但是尝试了一会后发觉很不习惯，于是研究了下删除storyboard的方法。\n<!--more-->\n\nstoryboard的入口在**targets->Deployment Info->Main Interface**，默认的值为Main，即初始默认storyboard的名字。因此，想要不加载storyboard，需要将这个默认值删掉，就不会再从storyboard进入了。\n\n删除后，viewController需要一个布局，需要手动创建一个xib文件。需要对xib文件和viewcontroller进行关联。\n- 点击placeholders下的File's Owner将Custom Class的Class设置为viewcController的名字。\n- 将File's Owner的view和xib的View进行关联。\n\n使用storyboard的时候application:didFinishWithOptions:方法只返回一个YES。删除后，需要添加代码对window初始化，否则app什么也显示不了。\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\tself.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n\tUIViewController *uv = [[UIViewController alloc] initWithNibName:@\"ViewController\" bundle:nil];\n\t[self.window setRootViewController:uv];\n\t[self.window makeKeyAndVisible];\n\treturn YES;\n}\n```\n这里要使用initWithNibName方法。\n\n至此，app就可以显示新建的xib文件的布局了\n","slug":"删除storyboard","published":1,"updated":"2016-08-12T03:22:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmr3000jweruns6pefp6","content":"<p>xcode版本升级后，storyboard成了ios新建项目后默认的布局。但是尝试了一会后发觉很不习惯，于是研究了下删除storyboard的方法。<br><a id=\"more\"></a></p>\n<p>storyboard的入口在<strong>targets-&gt;Deployment Info-&gt;Main Interface</strong>，默认的值为Main，即初始默认storyboard的名字。因此，想要不加载storyboard，需要将这个默认值删掉，就不会再从storyboard进入了。</p>\n<p>删除后，viewController需要一个布局，需要手动创建一个xib文件。需要对xib文件和viewcontroller进行关联。</p>\n<ul>\n<li>点击placeholders下的File’s Owner将Custom Class的Class设置为viewcController的名字。</li>\n<li>将File’s Owner的view和xib的View进行关联。</li>\n</ul>\n<p>使用storyboard的时候application:didFinishWithOptions:方法只返回一个YES。删除后，需要添加代码对window初始化，否则app什么也显示不了。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</div><div class=\"line\">\t<span class=\"keyword\">self</span>.window = [[<span class=\"built_in\">UIWindow</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds]];</div><div class=\"line\">\t<span class=\"built_in\">UIViewController</span> *uv = [[<span class=\"built_in\">UIViewController</span> alloc] initWithNibName:<span class=\"string\">@\"ViewController\"</span> bundle:<span class=\"literal\">nil</span>];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.window setRootViewController:uv];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.window makeKeyAndVisible];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里要使用initWithNibName方法。</p>\n<p>至此，app就可以显示新建的xib文件的布局了</p>\n","excerpt":"<p>xcode版本升级后，storyboard成了ios新建项目后默认的布局。但是尝试了一会后发觉很不习惯，于是研究了下删除storyboard的方法。<br>","more":"</p>\n<p>storyboard的入口在<strong>targets-&gt;Deployment Info-&gt;Main Interface</strong>，默认的值为Main，即初始默认storyboard的名字。因此，想要不加载storyboard，需要将这个默认值删掉，就不会再从storyboard进入了。</p>\n<p>删除后，viewController需要一个布局，需要手动创建一个xib文件。需要对xib文件和viewcontroller进行关联。</p>\n<ul>\n<li>点击placeholders下的File’s Owner将Custom Class的Class设置为viewcController的名字。</li>\n<li>将File’s Owner的view和xib的View进行关联。</li>\n</ul>\n<p>使用storyboard的时候application:didFinishWithOptions:方法只返回一个YES。删除后，需要添加代码对window初始化，否则app什么也显示不了。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</div><div class=\"line\">\t<span class=\"keyword\">self</span>.window = [[<span class=\"built_in\">UIWindow</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds]];</div><div class=\"line\">\t<span class=\"built_in\">UIViewController</span> *uv = [[<span class=\"built_in\">UIViewController</span> alloc] initWithNibName:<span class=\"string\">@\"ViewController\"</span> bundle:<span class=\"literal\">nil</span>];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.window setRootViewController:uv];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.window makeKeyAndVisible];</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里要使用initWithNibName方法。</p>\n<p>至此，app就可以显示新建的xib文件的布局了</p>"},{"title":"ios核心动画","date":"2016-08-16T06:07:12.000Z","_content":"依旧是[文顶顶的ios开发UI篇](http://www.cnblogs.com/wendingding/tag/UI高级/)关于核心动画的内容。作为入门\n\n<!--more-->\n\n## 核心动画简介\nCAAnimation是所有动画类的父类，但是它不能直接使用，能用的动画类只有4个子类：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup。\n\nCAPropertyAnimation是CAAnimation的子类，但是不能直接使用，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation\n它有个NSString类型的keyPath属性，你可以指定CALayer的某个属性名为keyPath，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@\"position\"为keyPath，就会修改CALayer的position属性的值，以达到平移的动画效果\n\n常见属性：\n- duration：动画的持续时间\n- repeatCount：动画的重复次数\n- repeatDuration：动画的重复时间\n- removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards\n- fillMode：决定当前对象在非active时间段的行为.比如动画开始之前,动画结束之后\n- beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间\n- timingFunction：速度控制函数，控制动画运行的节奏\n- delegate：动画代理\n\n## 基础动画\n### 简介\nCABasicAnimation，是CApropertyAnimation的子类\n\n属性：\n- fromValue：keyPath相应属性的初始值\n- toValue：keyPath相应属性的结束值\n\n随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue\n\n如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但**在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。**比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。\n\n### 示例\n```objc\n#import \"YYViewController.h\"\n\n@interface YYViewController ()\n@property(nonatomic,strong)CALayer *myLayer;\n@end\n\n@implementation YYViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n    //创建layer\n    CALayer *myLayer=[CALayer layer];\n    //设置layer的属性\n    myLayer.bounds=CGRectMake(0, 0, 50, 80);\n    myLayer.backgroundColor=[UIColor yellowColor].CGColor;\n    myLayer.position=CGPointMake(50, 50);\n    myLayer.anchorPoint=CGPointMake(0, 0);\n    myLayer.cornerRadius=20;\n    //添加layer\n    [self.view.layer addSublayer:myLayer];\n    self.myLayer=myLayer;\n}\n//设置 平移 动画\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    //    CABasicAnimation *anima=[CABasicAnimation animationWithKeyPath:<#(NSString *)#>]\n    CABasicAnimation *anima=[CABasicAnimation animation];\n    \n    //1.1告诉系统要执行什么样的动画\n    anima.keyPath=@\"position\";\n    //设置通过动画，将layer从哪儿移动到哪儿\n    anima.fromValue=[NSValue valueWithCGPoint:CGPointMake(0, 0)];\n    anima.toValue=[NSValue valueWithCGPoint:CGPointMake(200, 300)];\n    \n    //1.2设置动画执行完毕之后不删除动画\n    anima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    anima.fillMode=kCAFillModeForwards;\n\n    //2.添加核心动画到layer\n    [self.myLayer addAnimation:anima forKey:nil];\n\n}\n\n-(void)animationDidStart:(CAAnimation *)anim\n{\n    NSLog(@\"开始执行动画\");\n}\n\n-(void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag\n{\n    //动画执行完毕，打印执行完毕后的position值\n    NSString *str=NSStringFromCGPoint(self.myLayer.position);\n    NSLog(@\"执行后：%@\",str);\n}\n\n@end\n```\n\n其中keypath的值决定产生什么动画\n1. position：执行平移动画\n2. bounds：执行缩放动画\n3. transform：执行旋转动画\n\n## 关键帧动画\n### 简介\nCAKeyframeAnimation，是CApropertyAnimation的子类。CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值\n\n属性：\n- values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧\n- path：可以设置一个CGPathRef\\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略\n- keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的\n\n说明：CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation\n\n### 示例\n#### 使用value\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    //平移\n    keyAnima.keyPath=@\"position\";\n    //1.1告诉系统要执行什么动画\n    NSValue *value1=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\n    NSValue *value2=[NSValue valueWithCGPoint:CGPointMake(200, 100)];\n    NSValue *value3=[NSValue valueWithCGPoint:CGPointMake(200, 200)];\n    NSValue *value4=[NSValue valueWithCGPoint:CGPointMake(100, 200)];\n    NSValue *value5=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\n    keyAnima.values=@[value1,value2,value3,value4,value5];\n    //1.2设置动画执行完毕后，不删除动画\n    keyAnima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    keyAnima.fillMode=kCAFillModeForwards;\n    //1.4设置动画执行的时间\n    keyAnima.duration=4.0;\n    //1.5设置动画的节奏\n    keyAnima.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    \n    //设置代理，开始—结束\n    keyAnima.delegate=self;\n    //2.添加核心动画\n    [self.customView.layer addAnimation:keyAnima forKey:nil];\n}\n```\n\n#### 使用path\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    //平移\n    keyAnima.keyPath=@\"position\";\n    //1.1告诉系统要执行什么动画\n    //创建一条路径\n    CGMutablePathRef path=CGPathCreateMutable();\n    //设置一个圆的路径\n    CGPathAddEllipseInRect(path, NULL, CGRectMake(150, 100, 100, 100));\n    keyAnima.path=path;\n    \n    //有create就一定要有release\n    CGPathRelease(path);\n    //1.2设置动画执行完毕后，不删除动画\n    keyAnima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    keyAnima.fillMode=kCAFillModeForwards;\n    //1.4设置动画执行的时间\n    keyAnima.duration=5.0;\n    //1.5设置动画的节奏\n    keyAnima.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    \n    //设置代理，开始—结束\n    keyAnima.delegate=self;\n    //2.添加核心动画\n    [self.customView.layer addAnimation:keyAnima forKey:@\"wendingding\"];\n}\n\n- (IBAction)stopOnClick:(UIButton *)sender {\n    //停止self.customView.layer上名称标示为wendingding的动画\n    [self.customView.layer removeAnimationForKey:@\"wendingding\"];\n}\n```\n\n点击停止动画，程序内部会调用  [self.customView.layer removeAnimationForKey:@\"wendingding\"];停止self.customView.layer上名称标示为wendingding的动画。\n\n#### 图标抖动\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    keyAnima.keyPath=@\"transform.rotation\";\n    //设置动画时间\n    keyAnima.duration=0.1;\n    //设置图标抖动弧度\n    //把度数转换为弧度  度数/180*M_PI\n    keyAnima.values=@[@(-angle2Radian(4)),@(angle2Radian(4)),@(-angle2Radian(4))];\n    //设置动画的重复次数(设置为最大值)\n    keyAnima.repeatCount=MAXFLOAT;\n    \n    keyAnima.fillMode=kCAFillModeForwards;\n    keyAnima.removedOnCompletion=NO;\n    //2.添加动画\n    [self.iconView.layer addAnimation:keyAnima forKey:nil];\n}\n```\n\n## 转场动画和组动画\n### 介绍\nCATransition用于做转场动画\n属性：\n- type：动画过渡类型\n- subtype：动画过渡方向\n- startProgress：动画起点(在整体动画的百分比)\n- endProgress：动画终点(在整体动画的百分比)\n\n### 示例\n```objc\n- (IBAction)preOnClick:(UIButton *)sender {\n    self.index--;\n    if (self.index<1) {\n        self.index=7;\n    }\n    self.iconView.image=[UIImage imageNamed: [NSString stringWithFormat:@\"%d.jpg\",self.index]];\n    \n    //创建核心动画\n    CATransition *ca=[CATransition animation];\n    //告诉要执行什么动画\n    //设置过度效果\n    ca.type=@\"cube\";\n    //设置动画的过度方向（向左）\n    ca.subtype=kCATransitionFromLeft;\n    //设置动画的时间\n    ca.duration=2.0;\n    //添加动画\n    [self.iconView.layer addAnimation:ca forKey:nil];\n}\n\n//下一张\n- (IBAction)nextOnClick:(UIButton *)sender {\n    self.index++;\n    if (self.index>7) {\n        self.index=1;\n    }\n        self.iconView.image=[UIImage imageNamed: [NSString stringWithFormat:@\"%d.jpg\",self.index]];\n    \n    //1.创建核心动画\n    CATransition *ca=[CATransition animation];\n    \n    //1.1告诉要执行什么动画\n    //1.2设置过度效果\n    ca.type=@\"cube\";\n    //1.3设置动画的过度方向（向右）\n    ca.subtype=kCATransitionFromRight;\n    //1.4设置动画的时间\n    ca.duration=2.0;\n    //1.5设置动画的起点\n    ca.startProgress=0.5;\n    //1.6设置动画的终点\n//    ca.endProgress=0.5;\n    \n    //2.添加动画\n    [self.iconView.layer addAnimation:ca forKey:nil];\n}\n```\n\n### 组动画\n将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行属性解析.\n\n### 示例\n```objc\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{\n    // 平移动画\n    CABasicAnimation *a1 = [CABasicAnimation animation];\n    a1.keyPath = @\"transform.translation.y\";\n    a1.toValue = @(100);\n    // 缩放动画\n    CABasicAnimation *a2 = [CABasicAnimation animation];\n    a2.keyPath = @\"transform.scale\";\n    a2.toValue = @(0.0);\n    // 旋转动画\n    CABasicAnimation *a3 = [CABasicAnimation animation];\n    a3.keyPath = @\"transform.rotation\";\n    a3.toValue = @(M_PI_2);\n    // 组动画\n    CAAnimationGroup *groupAnima = [CAAnimationGroup animation];\n    \n    groupAnima.animations = @[a1, a2, a3];\n    \n    //设置组动画的时间\n    groupAnima.duration = 2;\n    groupAnima.fillMode = kCAFillModeForwards;\n    groupAnima.removedOnCompletion = NO;\n    \n    [self.iconView.layer addAnimation:groupAnima forKey:nil];\n}\n```\n\n## UIView封装动画\n### UIView动画（首尾）\n#### 简介\n执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间。\n常见方法：\n- **+ (void)setAnimationDelegate:(id)delegate**     设置动画代理对象，当动画开始或者结束时会发消息给代理对象\n- **+ (void)setAnimationWillStartSelector:(SEL)selector**   当动画即将开始时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector\n- **+ (void)setAnimationDidStopSelector:(SEL)selector**  当动画结束时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector\n- **+ (void)setAnimationDuration:(NSTimeInterval)duration**   动画的持续时间，秒为单位\n- **+ (void)setAnimationDelay:(NSTimeInterval)delay**  动画延迟delay秒后再开始\n- **+ (void)setAnimationStartDate:(NSDate \\*)startDate**   动画的开始时间，默认为now\n- **+ (void)setAnimationCurve:(UIViewAnimationCurve)curve**  动画的节奏控制\n- **+ (void)setAnimationRepeatCount:(float)repeatCount**  动画的重复次数\n- **+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses**  如果设置为YES,代表动画每次重复执行的效果会跟上一次相反\n- **+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView \\*)view cache:(BOOL)cache**  设置视图view的过渡效果, transition指定过渡类型, cache设置YES代表使用视图缓存，性能较好\n\n#### 示例\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //打印动画块的位置\n    NSLog(@\"动画执行之前的位置：%@\",NSStringFromCGPoint(self.customView.center));\n    \n    //首尾式动画\n    [UIView beginAnimations:nil context:nil];\n    //执行动画\n    //设置动画执行时间\n    [UIView setAnimationDuration:2.0];\n    //设置代理\n    [UIView setAnimationDelegate:self];\n    //设置动画执行完毕调用的事件\n    [UIView setAnimationDidStopSelector:@selector(didStopAnimation)];\n    self.customView.center=CGPointMake(200, 300);\n    [UIView commitAnimations];\n\n}\n\n-(void)didStopAnimation\n{\n    NSLog(@\"动画执行完毕\");\n    //打印动画块的位置\n    NSLog(@\"动画执行之后的位置：%@\",NSStringFromCGPoint(self.customView.center));\n}\n```\n\n#### UIView封装的动画与CALayer动画的对比\n使用UIView和CALayer都能实现动画效果，但是在真实的开发中，一般还是主要使用UIView封装的动画，而很少使用CALayer的动画。\n\n**CALayer核心动画与UIView动画的区别**：\nUIView封装的动画执行完毕之后不会反弹。即如果是通过CALayer核心动画改变layer的位置状态，表面上看虽然已经改变了，但是实际上它的位置是没有改变的。\n\n### block动画\n#### 方法：\n- **+(void)animateWithDuration:delay:options:animations:completion:**\n- **+(void)transitionWithView:duration:options:animations:completion:**\n- **+(void)transitionFromView:toView:duration:options:completion:**\n属性简介：\n1. duration：动画的持续时间\n2. delay：动画延迟delay秒后开始\n3. options：动画的节奏控制/转场动画的类型\n4. animations：将改变视图属性的代码放在这个block中\n5. completion：动画结束后，会自动调用这个block\n\n前两个方法用起来好像没什么区别。\n\n#### 示例：\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //block代码块动画\n        [UIView transitionWithView:self.customView duration:3.0 options:0 animations:^{\n            //执行的动画\n            NSLog(@\"动画开始执行前的位置：%@\",NSStringFromCGPoint(self.customView.center));\n            self.customView.center=CGPointMake(200, 300);\n        } completion:^(BOOL finished) {\n            //动画执行完毕后的首位操作\n            NSLog(@\"动画执行完毕\");\n            NSLog(@\"动画执行完毕后的位置：%@\",NSStringFromCGPoint( self.customView.center));\n        }];\n}\n```\n\n\n","source":"_posts/ios动画.md","raw":"title: ios核心动画\ndate: 2016/8/16 14:07:12  \ncategories: IOS\ntags: [Animation]\n\n---\n依旧是[文顶顶的ios开发UI篇](http://www.cnblogs.com/wendingding/tag/UI高级/)关于核心动画的内容。作为入门\n\n<!--more-->\n\n## 核心动画简介\nCAAnimation是所有动画类的父类，但是它不能直接使用，能用的动画类只有4个子类：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup。\n\nCAPropertyAnimation是CAAnimation的子类，但是不能直接使用，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation\n它有个NSString类型的keyPath属性，你可以指定CALayer的某个属性名为keyPath，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@\"position\"为keyPath，就会修改CALayer的position属性的值，以达到平移的动画效果\n\n常见属性：\n- duration：动画的持续时间\n- repeatCount：动画的重复次数\n- repeatDuration：动画的重复时间\n- removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards\n- fillMode：决定当前对象在非active时间段的行为.比如动画开始之前,动画结束之后\n- beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间\n- timingFunction：速度控制函数，控制动画运行的节奏\n- delegate：动画代理\n\n## 基础动画\n### 简介\nCABasicAnimation，是CApropertyAnimation的子类\n\n属性：\n- fromValue：keyPath相应属性的初始值\n- toValue：keyPath相应属性的结束值\n\n随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue\n\n如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但**在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。**比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。\n\n### 示例\n```objc\n#import \"YYViewController.h\"\n\n@interface YYViewController ()\n@property(nonatomic,strong)CALayer *myLayer;\n@end\n\n@implementation YYViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    \n    //创建layer\n    CALayer *myLayer=[CALayer layer];\n    //设置layer的属性\n    myLayer.bounds=CGRectMake(0, 0, 50, 80);\n    myLayer.backgroundColor=[UIColor yellowColor].CGColor;\n    myLayer.position=CGPointMake(50, 50);\n    myLayer.anchorPoint=CGPointMake(0, 0);\n    myLayer.cornerRadius=20;\n    //添加layer\n    [self.view.layer addSublayer:myLayer];\n    self.myLayer=myLayer;\n}\n//设置 平移 动画\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    //    CABasicAnimation *anima=[CABasicAnimation animationWithKeyPath:<#(NSString *)#>]\n    CABasicAnimation *anima=[CABasicAnimation animation];\n    \n    //1.1告诉系统要执行什么样的动画\n    anima.keyPath=@\"position\";\n    //设置通过动画，将layer从哪儿移动到哪儿\n    anima.fromValue=[NSValue valueWithCGPoint:CGPointMake(0, 0)];\n    anima.toValue=[NSValue valueWithCGPoint:CGPointMake(200, 300)];\n    \n    //1.2设置动画执行完毕之后不删除动画\n    anima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    anima.fillMode=kCAFillModeForwards;\n\n    //2.添加核心动画到layer\n    [self.myLayer addAnimation:anima forKey:nil];\n\n}\n\n-(void)animationDidStart:(CAAnimation *)anim\n{\n    NSLog(@\"开始执行动画\");\n}\n\n-(void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag\n{\n    //动画执行完毕，打印执行完毕后的position值\n    NSString *str=NSStringFromCGPoint(self.myLayer.position);\n    NSLog(@\"执行后：%@\",str);\n}\n\n@end\n```\n\n其中keypath的值决定产生什么动画\n1. position：执行平移动画\n2. bounds：执行缩放动画\n3. transform：执行旋转动画\n\n## 关键帧动画\n### 简介\nCAKeyframeAnimation，是CApropertyAnimation的子类。CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值\n\n属性：\n- values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧\n- path：可以设置一个CGPathRef\\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略\n- keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的\n\n说明：CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation\n\n### 示例\n#### 使用value\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    //平移\n    keyAnima.keyPath=@\"position\";\n    //1.1告诉系统要执行什么动画\n    NSValue *value1=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\n    NSValue *value2=[NSValue valueWithCGPoint:CGPointMake(200, 100)];\n    NSValue *value3=[NSValue valueWithCGPoint:CGPointMake(200, 200)];\n    NSValue *value4=[NSValue valueWithCGPoint:CGPointMake(100, 200)];\n    NSValue *value5=[NSValue valueWithCGPoint:CGPointMake(100, 100)];\n    keyAnima.values=@[value1,value2,value3,value4,value5];\n    //1.2设置动画执行完毕后，不删除动画\n    keyAnima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    keyAnima.fillMode=kCAFillModeForwards;\n    //1.4设置动画执行的时间\n    keyAnima.duration=4.0;\n    //1.5设置动画的节奏\n    keyAnima.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    \n    //设置代理，开始—结束\n    keyAnima.delegate=self;\n    //2.添加核心动画\n    [self.customView.layer addAnimation:keyAnima forKey:nil];\n}\n```\n\n#### 使用path\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    //平移\n    keyAnima.keyPath=@\"position\";\n    //1.1告诉系统要执行什么动画\n    //创建一条路径\n    CGMutablePathRef path=CGPathCreateMutable();\n    //设置一个圆的路径\n    CGPathAddEllipseInRect(path, NULL, CGRectMake(150, 100, 100, 100));\n    keyAnima.path=path;\n    \n    //有create就一定要有release\n    CGPathRelease(path);\n    //1.2设置动画执行完毕后，不删除动画\n    keyAnima.removedOnCompletion=NO;\n    //1.3设置保存动画的最新状态\n    keyAnima.fillMode=kCAFillModeForwards;\n    //1.4设置动画执行的时间\n    keyAnima.duration=5.0;\n    //1.5设置动画的节奏\n    keyAnima.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    \n    //设置代理，开始—结束\n    keyAnima.delegate=self;\n    //2.添加核心动画\n    [self.customView.layer addAnimation:keyAnima forKey:@\"wendingding\"];\n}\n\n- (IBAction)stopOnClick:(UIButton *)sender {\n    //停止self.customView.layer上名称标示为wendingding的动画\n    [self.customView.layer removeAnimationForKey:@\"wendingding\"];\n}\n```\n\n点击停止动画，程序内部会调用  [self.customView.layer removeAnimationForKey:@\"wendingding\"];停止self.customView.layer上名称标示为wendingding的动画。\n\n#### 图标抖动\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //1.创建核心动画\n    CAKeyframeAnimation *keyAnima=[CAKeyframeAnimation animation];\n    keyAnima.keyPath=@\"transform.rotation\";\n    //设置动画时间\n    keyAnima.duration=0.1;\n    //设置图标抖动弧度\n    //把度数转换为弧度  度数/180*M_PI\n    keyAnima.values=@[@(-angle2Radian(4)),@(angle2Radian(4)),@(-angle2Radian(4))];\n    //设置动画的重复次数(设置为最大值)\n    keyAnima.repeatCount=MAXFLOAT;\n    \n    keyAnima.fillMode=kCAFillModeForwards;\n    keyAnima.removedOnCompletion=NO;\n    //2.添加动画\n    [self.iconView.layer addAnimation:keyAnima forKey:nil];\n}\n```\n\n## 转场动画和组动画\n### 介绍\nCATransition用于做转场动画\n属性：\n- type：动画过渡类型\n- subtype：动画过渡方向\n- startProgress：动画起点(在整体动画的百分比)\n- endProgress：动画终点(在整体动画的百分比)\n\n### 示例\n```objc\n- (IBAction)preOnClick:(UIButton *)sender {\n    self.index--;\n    if (self.index<1) {\n        self.index=7;\n    }\n    self.iconView.image=[UIImage imageNamed: [NSString stringWithFormat:@\"%d.jpg\",self.index]];\n    \n    //创建核心动画\n    CATransition *ca=[CATransition animation];\n    //告诉要执行什么动画\n    //设置过度效果\n    ca.type=@\"cube\";\n    //设置动画的过度方向（向左）\n    ca.subtype=kCATransitionFromLeft;\n    //设置动画的时间\n    ca.duration=2.0;\n    //添加动画\n    [self.iconView.layer addAnimation:ca forKey:nil];\n}\n\n//下一张\n- (IBAction)nextOnClick:(UIButton *)sender {\n    self.index++;\n    if (self.index>7) {\n        self.index=1;\n    }\n        self.iconView.image=[UIImage imageNamed: [NSString stringWithFormat:@\"%d.jpg\",self.index]];\n    \n    //1.创建核心动画\n    CATransition *ca=[CATransition animation];\n    \n    //1.1告诉要执行什么动画\n    //1.2设置过度效果\n    ca.type=@\"cube\";\n    //1.3设置动画的过度方向（向右）\n    ca.subtype=kCATransitionFromRight;\n    //1.4设置动画的时间\n    ca.duration=2.0;\n    //1.5设置动画的起点\n    ca.startProgress=0.5;\n    //1.6设置动画的终点\n//    ca.endProgress=0.5;\n    \n    //2.添加动画\n    [self.iconView.layer addAnimation:ca forKey:nil];\n}\n```\n\n### 组动画\n将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行属性解析.\n\n### 示例\n```objc\n- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{\n    // 平移动画\n    CABasicAnimation *a1 = [CABasicAnimation animation];\n    a1.keyPath = @\"transform.translation.y\";\n    a1.toValue = @(100);\n    // 缩放动画\n    CABasicAnimation *a2 = [CABasicAnimation animation];\n    a2.keyPath = @\"transform.scale\";\n    a2.toValue = @(0.0);\n    // 旋转动画\n    CABasicAnimation *a3 = [CABasicAnimation animation];\n    a3.keyPath = @\"transform.rotation\";\n    a3.toValue = @(M_PI_2);\n    // 组动画\n    CAAnimationGroup *groupAnima = [CAAnimationGroup animation];\n    \n    groupAnima.animations = @[a1, a2, a3];\n    \n    //设置组动画的时间\n    groupAnima.duration = 2;\n    groupAnima.fillMode = kCAFillModeForwards;\n    groupAnima.removedOnCompletion = NO;\n    \n    [self.iconView.layer addAnimation:groupAnima forKey:nil];\n}\n```\n\n## UIView封装动画\n### UIView动画（首尾）\n#### 简介\n执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间。\n常见方法：\n- **+ (void)setAnimationDelegate:(id)delegate**     设置动画代理对象，当动画开始或者结束时会发消息给代理对象\n- **+ (void)setAnimationWillStartSelector:(SEL)selector**   当动画即将开始时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector\n- **+ (void)setAnimationDidStopSelector:(SEL)selector**  当动画结束时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector\n- **+ (void)setAnimationDuration:(NSTimeInterval)duration**   动画的持续时间，秒为单位\n- **+ (void)setAnimationDelay:(NSTimeInterval)delay**  动画延迟delay秒后再开始\n- **+ (void)setAnimationStartDate:(NSDate \\*)startDate**   动画的开始时间，默认为now\n- **+ (void)setAnimationCurve:(UIViewAnimationCurve)curve**  动画的节奏控制\n- **+ (void)setAnimationRepeatCount:(float)repeatCount**  动画的重复次数\n- **+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses**  如果设置为YES,代表动画每次重复执行的效果会跟上一次相反\n- **+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView \\*)view cache:(BOOL)cache**  设置视图view的过渡效果, transition指定过渡类型, cache设置YES代表使用视图缓存，性能较好\n\n#### 示例\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //打印动画块的位置\n    NSLog(@\"动画执行之前的位置：%@\",NSStringFromCGPoint(self.customView.center));\n    \n    //首尾式动画\n    [UIView beginAnimations:nil context:nil];\n    //执行动画\n    //设置动画执行时间\n    [UIView setAnimationDuration:2.0];\n    //设置代理\n    [UIView setAnimationDelegate:self];\n    //设置动画执行完毕调用的事件\n    [UIView setAnimationDidStopSelector:@selector(didStopAnimation)];\n    self.customView.center=CGPointMake(200, 300);\n    [UIView commitAnimations];\n\n}\n\n-(void)didStopAnimation\n{\n    NSLog(@\"动画执行完毕\");\n    //打印动画块的位置\n    NSLog(@\"动画执行之后的位置：%@\",NSStringFromCGPoint(self.customView.center));\n}\n```\n\n#### UIView封装的动画与CALayer动画的对比\n使用UIView和CALayer都能实现动画效果，但是在真实的开发中，一般还是主要使用UIView封装的动画，而很少使用CALayer的动画。\n\n**CALayer核心动画与UIView动画的区别**：\nUIView封装的动画执行完毕之后不会反弹。即如果是通过CALayer核心动画改变layer的位置状态，表面上看虽然已经改变了，但是实际上它的位置是没有改变的。\n\n### block动画\n#### 方法：\n- **+(void)animateWithDuration:delay:options:animations:completion:**\n- **+(void)transitionWithView:duration:options:animations:completion:**\n- **+(void)transitionFromView:toView:duration:options:completion:**\n属性简介：\n1. duration：动画的持续时间\n2. delay：动画延迟delay秒后开始\n3. options：动画的节奏控制/转场动画的类型\n4. animations：将改变视图属性的代码放在这个block中\n5. completion：动画结束后，会自动调用这个block\n\n前两个方法用起来好像没什么区别。\n\n#### 示例：\n```objc\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n{\n    //block代码块动画\n        [UIView transitionWithView:self.customView duration:3.0 options:0 animations:^{\n            //执行的动画\n            NSLog(@\"动画开始执行前的位置：%@\",NSStringFromCGPoint(self.customView.center));\n            self.customView.center=CGPointMake(200, 300);\n        } completion:^(BOOL finished) {\n            //动画执行完毕后的首位操作\n            NSLog(@\"动画执行完毕\");\n            NSLog(@\"动画执行完毕后的位置：%@\",NSStringFromCGPoint( self.customView.center));\n        }];\n}\n```\n\n\n","slug":"ios动画","published":1,"updated":"2016-08-21T10:03:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmr5000nwerutrfen0yq","content":"<p>依旧是<a href=\"http://www.cnblogs.com/wendingding/tag/UI高级/\" target=\"_blank\" rel=\"external\">文顶顶的ios开发UI篇</a>关于核心动画的内容。作为入门</p>\n<a id=\"more\"></a>\n<h2 id=\"核心动画简介\"><a href=\"#核心动画简介\" class=\"headerlink\" title=\"核心动画简介\"></a>核心动画简介</h2><p>CAAnimation是所有动画类的父类，但是它不能直接使用，能用的动画类只有4个子类：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup。</p>\n<p>CAPropertyAnimation是CAAnimation的子类，但是不能直接使用，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation<br>它有个NSString类型的keyPath属性，你可以指定CALayer的某个属性名为keyPath，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就会修改CALayer的position属性的值，以达到平移的动画效果</p>\n<p>常见属性：</p>\n<ul>\n<li>duration：动画的持续时间</li>\n<li>repeatCount：动画的重复次数</li>\n<li>repeatDuration：动画的重复时间</li>\n<li>removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</li>\n<li>fillMode：决定当前对象在非active时间段的行为.比如动画开始之前,动画结束之后</li>\n<li>beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间</li>\n<li>timingFunction：速度控制函数，控制动画运行的节奏</li>\n<li>delegate：动画代理</li>\n</ul>\n<h2 id=\"基础动画\"><a href=\"#基础动画\" class=\"headerlink\" title=\"基础动画\"></a>基础动画</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>CABasicAnimation，是CApropertyAnimation的子类</p>\n<p>属性：</p>\n<ul>\n<li>fromValue：keyPath相应属性的初始值</li>\n<li>toValue：keyPath相应属性的结束值</li>\n</ul>\n<p>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue</p>\n<p>如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但<strong>在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。</strong>比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">YYViewController</span> ()</span></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">CALayer</span> *myLayer;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *myLayer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//设置layer的属性</span></div><div class=\"line\">    myLayer.bounds=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">80</span>);</div><div class=\"line\">    myLayer.backgroundColor=[<span class=\"built_in\">UIColor</span> yellowColor].CGColor;</div><div class=\"line\">    myLayer.position=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    myLayer.anchorPoint=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    myLayer.cornerRadius=<span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"comment\">//添加layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:myLayer];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myLayer=myLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//设置 平移 动画</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"comment\">//    CABasicAnimation *anima=[CABasicAnimation animationWithKeyPath:&lt;#(NSString *)#&gt;]</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *anima=[<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么样的动画</span></div><div class=\"line\">    anima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置通过动画，将layer从哪儿移动到哪儿</span></div><div class=\"line\">    anima.fromValue=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</div><div class=\"line\">    anima.toValue=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕之后不删除动画</span></div><div class=\"line\">    anima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    anima.fillMode=kCAFillModeForwards;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画到layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myLayer addAnimation:anima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)animationDidStart:(<span class=\"built_in\">CAAnimation</span> *)anim</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始执行动画\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)animationDidStop:(<span class=\"built_in\">CAAnimation</span> *)anim finished:(<span class=\"built_in\">BOOL</span>)flag</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//动画执行完毕，打印执行完毕后的position值</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str=<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.myLayer.position);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"执行后：%@\"</span>,str);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>其中keypath的值决定产生什么动画</p>\n<ol>\n<li>position：执行平移动画</li>\n<li>bounds：执行缩放动画</li>\n<li>transform：执行旋转动画</li>\n</ol>\n<h2 id=\"关键帧动画\"><a href=\"#关键帧动画\" class=\"headerlink\" title=\"关键帧动画\"></a>关键帧动画</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>CAKeyframeAnimation，是CApropertyAnimation的子类。CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值</p>\n<p>属性：</p>\n<ul>\n<li>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧</li>\n<li>path：可以设置一个CGPathRef\\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略</li>\n<li>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的</li>\n</ul>\n<p>说明：CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"使用value\"><a href=\"#使用value\" class=\"headerlink\" title=\"使用value\"></a>使用value</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    <span class=\"comment\">//平移</span></div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么动画</span></div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value1=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value2=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value3=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value4=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value5=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    keyAnima.values=@[value1,value2,value3,value4,value5];</div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕后，不删除动画</span></div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画执行的时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">4.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的节奏</span></div><div class=\"line\">    keyAnima.timingFunction=[<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置代理，开始—结束</span></div><div class=\"line\">    keyAnima.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer addAnimation:keyAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用path\"><a href=\"#使用path\" class=\"headerlink\" title=\"使用path\"></a>使用path</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    <span class=\"comment\">//平移</span></div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//创建一条路径</span></div><div class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> path=<span class=\"built_in\">CGPathCreateMutable</span>();</div><div class=\"line\">    <span class=\"comment\">//设置一个圆的路径</span></div><div class=\"line\">    <span class=\"built_in\">CGPathAddEllipseInRect</span>(path, <span class=\"literal\">NULL</span>, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    keyAnima.path=path;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//有create就一定要有release</span></div><div class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(path);</div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕后，不删除动画</span></div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画执行的时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">5.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的节奏</span></div><div class=\"line\">    keyAnima.timingFunction=[<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置代理，开始—结束</span></div><div class=\"line\">    keyAnima.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer addAnimation:keyAnima forKey:<span class=\"string\">@\"wendingding\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"comment\">//停止self.customView.layer上名称标示为wendingding的动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer removeAnimationForKey:<span class=\"string\">@\"wendingding\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>点击停止动画，程序内部会调用  [self.customView.layer removeAnimationForKey:@”wendingding”];停止self.customView.layer上名称标示为wendingding的动画。</p>\n<h4 id=\"图标抖动\"><a href=\"#图标抖动\" class=\"headerlink\" title=\"图标抖动\"></a>图标抖动</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"transform.rotation\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置动画时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">0.1</span>;</div><div class=\"line\">    <span class=\"comment\">//设置图标抖动弧度</span></div><div class=\"line\">    <span class=\"comment\">//把度数转换为弧度  度数/180*M_PI</span></div><div class=\"line\">    keyAnima.values=@[@(-angle2Radian(<span class=\"number\">4</span>)),@(angle2Radian(<span class=\"number\">4</span>)),@(-angle2Radian(<span class=\"number\">4</span>))];</div><div class=\"line\">    <span class=\"comment\">//设置动画的重复次数(设置为最大值)</span></div><div class=\"line\">    keyAnima.repeatCount=MAXFLOAT;</div><div class=\"line\">    </div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:keyAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"转场动画和组动画\"><a href=\"#转场动画和组动画\" class=\"headerlink\" title=\"转场动画和组动画\"></a>转场动画和组动画</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>CATransition用于做转场动画<br>属性：</p>\n<ul>\n<li>type：动画过渡类型</li>\n<li>subtype：动画过渡方向</li>\n<li>startProgress：动画起点(在整体动画的百分比)</li>\n<li>endProgress：动画终点(在整体动画的百分比)</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)preOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.index--;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.index&lt;<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.index=<span class=\"number\">7</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.iconView.image=[<span class=\"built_in\">UIImage</span> imageNamed: [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d.jpg\"</span>,<span class=\"keyword\">self</span>.index]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CATransition</span> *ca=[<span class=\"built_in\">CATransition</span> animation];</div><div class=\"line\">    <span class=\"comment\">//告诉要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//设置过度效果</span></div><div class=\"line\">    ca.type=<span class=\"string\">@\"cube\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置动画的过度方向（向左）</span></div><div class=\"line\">    ca.subtype=kCATransitionFromLeft;</div><div class=\"line\">    <span class=\"comment\">//设置动画的时间</span></div><div class=\"line\">    ca.duration=<span class=\"number\">2.0</span>;</div><div class=\"line\">    <span class=\"comment\">//添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:ca forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下一张</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)nextOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.index++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.index&gt;<span class=\"number\">7</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.index=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.iconView.image=[<span class=\"built_in\">UIImage</span> imageNamed: [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d.jpg\"</span>,<span class=\"keyword\">self</span>.index]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CATransition</span> *ca=[<span class=\"built_in\">CATransition</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.1告诉要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//1.2设置过度效果</span></div><div class=\"line\">    ca.type=<span class=\"string\">@\"cube\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置动画的过度方向（向右）</span></div><div class=\"line\">    ca.subtype=kCATransitionFromRight;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画的时间</span></div><div class=\"line\">    ca.duration=<span class=\"number\">2.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的起点</span></div><div class=\"line\">    ca.startProgress=<span class=\"number\">0.5</span>;</div><div class=\"line\">    <span class=\"comment\">//1.6设置动画的终点</span></div><div class=\"line\"><span class=\"comment\">//    ca.endProgress=0.5;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//2.添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:ca forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"组动画\"><a href=\"#组动画\" class=\"headerlink\" title=\"组动画\"></a>组动画</h3><p>将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行属性解析.</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event&#123;</div><div class=\"line\">    <span class=\"comment\">// 平移动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a1 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a1.keyPath = <span class=\"string\">@\"transform.translation.y\"</span>;</div><div class=\"line\">    a1.toValue = @(<span class=\"number\">100</span>);</div><div class=\"line\">    <span class=\"comment\">// 缩放动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a2 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a2.keyPath = <span class=\"string\">@\"transform.scale\"</span>;</div><div class=\"line\">    a2.toValue = @(<span class=\"number\">0.0</span>);</div><div class=\"line\">    <span class=\"comment\">// 旋转动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a3 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a3.keyPath = <span class=\"string\">@\"transform.rotation\"</span>;</div><div class=\"line\">    a3.toValue = @(M_PI_2);</div><div class=\"line\">    <span class=\"comment\">// 组动画</span></div><div class=\"line\">    <span class=\"built_in\">CAAnimationGroup</span> *groupAnima = [<span class=\"built_in\">CAAnimationGroup</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    groupAnima.animations = @[a1, a2, a3];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置组动画的时间</span></div><div class=\"line\">    groupAnima.duration = <span class=\"number\">2</span>;</div><div class=\"line\">    groupAnima.fillMode = kCAFillModeForwards;</div><div class=\"line\">    groupAnima.removedOnCompletion = <span class=\"literal\">NO</span>;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:groupAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UIView封装动画\"><a href=\"#UIView封装动画\" class=\"headerlink\" title=\"UIView封装动画\"></a>UIView封装动画</h2><h3 id=\"UIView动画（首尾）\"><a href=\"#UIView动画（首尾）\" class=\"headerlink\" title=\"UIView动画（首尾）\"></a>UIView动画（首尾）</h3><h4 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间。<br>常见方法：</p>\n<ul>\n<li><strong>+ (void)setAnimationDelegate:(id)delegate</strong>     设置动画代理对象，当动画开始或者结束时会发消息给代理对象</li>\n<li><strong>+ (void)setAnimationWillStartSelector:(SEL)selector</strong>   当动画即将开始时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</li>\n<li><strong>+ (void)setAnimationDidStopSelector:(SEL)selector</strong>  当动画结束时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</li>\n<li><strong>+ (void)setAnimationDuration:(NSTimeInterval)duration</strong>   动画的持续时间，秒为单位</li>\n<li><strong>+ (void)setAnimationDelay:(NSTimeInterval)delay</strong>  动画延迟delay秒后再开始</li>\n<li><strong>+ (void)setAnimationStartDate:(NSDate *)startDate</strong>   动画的开始时间，默认为now</li>\n<li><strong>+ (void)setAnimationCurve:(UIViewAnimationCurve)curve</strong>  动画的节奏控制</li>\n<li><strong>+ (void)setAnimationRepeatCount:(float)repeatCount</strong>  动画的重复次数</li>\n<li><strong>+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses</strong>  如果设置为YES,代表动画每次重复执行的效果会跟上一次相反</li>\n<li><strong>+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache</strong>  设置视图view的过渡效果, transition指定过渡类型, cache设置YES代表使用视图缓存，性能较好</li>\n</ul>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//打印动画块的位置</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行之前的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//首尾式动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">//执行动画</span></div><div class=\"line\">    <span class=\"comment\">//设置动画执行时间</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:<span class=\"number\">2.0</span>];</div><div class=\"line\">    <span class=\"comment\">//设置代理</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">    <span class=\"comment\">//设置动画执行完毕调用的事件</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(didStopAnimation)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.customView.center=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>);</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)didStopAnimation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕\"</span>);</div><div class=\"line\">    <span class=\"comment\">//打印动画块的位置</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行之后的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"UIView封装的动画与CALayer动画的对比\"><a href=\"#UIView封装的动画与CALayer动画的对比\" class=\"headerlink\" title=\"UIView封装的动画与CALayer动画的对比\"></a>UIView封装的动画与CALayer动画的对比</h4><p>使用UIView和CALayer都能实现动画效果，但是在真实的开发中，一般还是主要使用UIView封装的动画，而很少使用CALayer的动画。</p>\n<p><strong>CALayer核心动画与UIView动画的区别</strong>：<br>UIView封装的动画执行完毕之后不会反弹。即如果是通过CALayer核心动画改变layer的位置状态，表面上看虽然已经改变了，但是实际上它的位置是没有改变的。</p>\n<h3 id=\"block动画\"><a href=\"#block动画\" class=\"headerlink\" title=\"block动画\"></a>block动画</h3><h4 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h4><ul>\n<li><strong>+(void)animateWithDuration:delay:options:animations:completion:</strong></li>\n<li><strong>+(void)transitionWithView:duration:options:animations:completion:</strong></li>\n<li><strong>+(void)transitionFromView:toView:duration:options:completion:</strong><br>属性简介：</li>\n</ul>\n<ol>\n<li>duration：动画的持续时间</li>\n<li>delay：动画延迟delay秒后开始</li>\n<li>options：动画的节奏控制/转场动画的类型</li>\n<li>animations：将改变视图属性的代码放在这个block中</li>\n<li>completion：动画结束后，会自动调用这个block</li>\n</ol>\n<p>前两个方法用起来好像没什么区别。</p>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//block代码块动画</span></div><div class=\"line\">        [<span class=\"built_in\">UIView</span> transitionWithView:<span class=\"keyword\">self</span>.customView duration:<span class=\"number\">3.0</span> options:<span class=\"number\">0</span> animations:^&#123;</div><div class=\"line\">            <span class=\"comment\">//执行的动画</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画开始执行前的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">            <span class=\"keyword\">self</span>.customView.center=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">            <span class=\"comment\">//动画执行完毕后的首位操作</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕\"</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕后的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>( <span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">        &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>依旧是<a href=\"http://www.cnblogs.com/wendingding/tag/UI高级/\">文顶顶的ios开发UI篇</a>关于核心动画的内容。作为入门</p>","more":"<h2 id=\"核心动画简介\"><a href=\"#核心动画简介\" class=\"headerlink\" title=\"核心动画简介\"></a>核心动画简介</h2><p>CAAnimation是所有动画类的父类，但是它不能直接使用，能用的动画类只有4个子类：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup。</p>\n<p>CAPropertyAnimation是CAAnimation的子类，但是不能直接使用，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation<br>它有个NSString类型的keyPath属性，你可以指定CALayer的某个属性名为keyPath，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就会修改CALayer的position属性的值，以达到平移的动画效果</p>\n<p>常见属性：</p>\n<ul>\n<li>duration：动画的持续时间</li>\n<li>repeatCount：动画的重复次数</li>\n<li>repeatDuration：动画的重复时间</li>\n<li>removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</li>\n<li>fillMode：决定当前对象在非active时间段的行为.比如动画开始之前,动画结束之后</li>\n<li>beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间</li>\n<li>timingFunction：速度控制函数，控制动画运行的节奏</li>\n<li>delegate：动画代理</li>\n</ul>\n<h2 id=\"基础动画\"><a href=\"#基础动画\" class=\"headerlink\" title=\"基础动画\"></a>基础动画</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>CABasicAnimation，是CApropertyAnimation的子类</p>\n<p>属性：</p>\n<ul>\n<li>fromValue：keyPath相应属性的初始值</li>\n<li>toValue：keyPath相应属性的结束值</li>\n</ul>\n<p>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue</p>\n<p>如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但<strong>在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。</strong>比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"YYViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">YYViewController</span> ()</span></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">CALayer</span> *myLayer;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">YYViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建layer</span></div><div class=\"line\">    <span class=\"built_in\">CALayer</span> *myLayer=[<span class=\"built_in\">CALayer</span> layer];</div><div class=\"line\">    <span class=\"comment\">//设置layer的属性</span></div><div class=\"line\">    myLayer.bounds=<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">80</span>);</div><div class=\"line\">    myLayer.backgroundColor=[<span class=\"built_in\">UIColor</span> yellowColor].CGColor;</div><div class=\"line\">    myLayer.position=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    myLayer.anchorPoint=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    myLayer.cornerRadius=<span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"comment\">//添加layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.view.layer addSublayer:myLayer];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myLayer=myLayer;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//设置 平移 动画</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"comment\">//    CABasicAnimation *anima=[CABasicAnimation animationWithKeyPath:&lt;#(NSString *)#&gt;]</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *anima=[<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么样的动画</span></div><div class=\"line\">    anima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置通过动画，将layer从哪儿移动到哪儿</span></div><div class=\"line\">    anima.fromValue=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>)];</div><div class=\"line\">    anima.toValue=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕之后不删除动画</span></div><div class=\"line\">    anima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    anima.fillMode=kCAFillModeForwards;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画到layer</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myLayer addAnimation:anima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)animationDidStart:(<span class=\"built_in\">CAAnimation</span> *)anim</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始执行动画\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)animationDidStop:(<span class=\"built_in\">CAAnimation</span> *)anim finished:(<span class=\"built_in\">BOOL</span>)flag</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//动画执行完毕，打印执行完毕后的position值</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str=<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.myLayer.position);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"执行后：%@\"</span>,str);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>其中keypath的值决定产生什么动画</p>\n<ol>\n<li>position：执行平移动画</li>\n<li>bounds：执行缩放动画</li>\n<li>transform：执行旋转动画</li>\n</ol>\n<h2 id=\"关键帧动画\"><a href=\"#关键帧动画\" class=\"headerlink\" title=\"关键帧动画\"></a>关键帧动画</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>CAKeyframeAnimation，是CApropertyAnimation的子类。CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值</p>\n<p>属性：</p>\n<ul>\n<li>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧</li>\n<li>path：可以设置一个CGPathRef\\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略</li>\n<li>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的</li>\n</ul>\n<p>说明：CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"使用value\"><a href=\"#使用value\" class=\"headerlink\" title=\"使用value\"></a>使用value</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    <span class=\"comment\">//平移</span></div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么动画</span></div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value1=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value2=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value3=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value4=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *value5=[<span class=\"built_in\">NSValue</span> valueWithCGPoint:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>)];</div><div class=\"line\">    keyAnima.values=@[value1,value2,value3,value4,value5];</div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕后，不删除动画</span></div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画执行的时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">4.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的节奏</span></div><div class=\"line\">    keyAnima.timingFunction=[<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置代理，开始—结束</span></div><div class=\"line\">    keyAnima.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer addAnimation:keyAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用path\"><a href=\"#使用path\" class=\"headerlink\" title=\"使用path\"></a>使用path</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    <span class=\"comment\">//平移</span></div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"position\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.1告诉系统要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//创建一条路径</span></div><div class=\"line\">    <span class=\"built_in\">CGMutablePathRef</span> path=<span class=\"built_in\">CGPathCreateMutable</span>();</div><div class=\"line\">    <span class=\"comment\">//设置一个圆的路径</span></div><div class=\"line\">    <span class=\"built_in\">CGPathAddEllipseInRect</span>(path, <span class=\"literal\">NULL</span>, <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">    keyAnima.path=path;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//有create就一定要有release</span></div><div class=\"line\">    <span class=\"built_in\">CGPathRelease</span>(path);</div><div class=\"line\">    <span class=\"comment\">//1.2设置动画执行完毕后，不删除动画</span></div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置保存动画的最新状态</span></div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画执行的时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">5.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的节奏</span></div><div class=\"line\">    keyAnima.timingFunction=[<span class=\"built_in\">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置代理，开始—结束</span></div><div class=\"line\">    keyAnima.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加核心动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer addAnimation:keyAnima forKey:<span class=\"string\">@\"wendingding\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"comment\">//停止self.customView.layer上名称标示为wendingding的动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.customView.layer removeAnimationForKey:<span class=\"string\">@\"wendingding\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>点击停止动画，程序内部会调用  [self.customView.layer removeAnimationForKey:@”wendingding”];停止self.customView.layer上名称标示为wendingding的动画。</p>\n<h4 id=\"图标抖动\"><a href=\"#图标抖动\" class=\"headerlink\" title=\"图标抖动\"></a>图标抖动</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CAKeyframeAnimation</span> *keyAnima=[<span class=\"built_in\">CAKeyframeAnimation</span> animation];</div><div class=\"line\">    keyAnima.keyPath=<span class=\"string\">@\"transform.rotation\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置动画时间</span></div><div class=\"line\">    keyAnima.duration=<span class=\"number\">0.1</span>;</div><div class=\"line\">    <span class=\"comment\">//设置图标抖动弧度</span></div><div class=\"line\">    <span class=\"comment\">//把度数转换为弧度  度数/180*M_PI</span></div><div class=\"line\">    keyAnima.values=@[@(-angle2Radian(<span class=\"number\">4</span>)),@(angle2Radian(<span class=\"number\">4</span>)),@(-angle2Radian(<span class=\"number\">4</span>))];</div><div class=\"line\">    <span class=\"comment\">//设置动画的重复次数(设置为最大值)</span></div><div class=\"line\">    keyAnima.repeatCount=MAXFLOAT;</div><div class=\"line\">    </div><div class=\"line\">    keyAnima.fillMode=kCAFillModeForwards;</div><div class=\"line\">    keyAnima.removedOnCompletion=<span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//2.添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:keyAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"转场动画和组动画\"><a href=\"#转场动画和组动画\" class=\"headerlink\" title=\"转场动画和组动画\"></a>转场动画和组动画</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>CATransition用于做转场动画<br>属性：</p>\n<ul>\n<li>type：动画过渡类型</li>\n<li>subtype：动画过渡方向</li>\n<li>startProgress：动画起点(在整体动画的百分比)</li>\n<li>endProgress：动画终点(在整体动画的百分比)</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)preOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.index--;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.index&lt;<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.index=<span class=\"number\">7</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.iconView.image=[<span class=\"built_in\">UIImage</span> imageNamed: [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d.jpg\"</span>,<span class=\"keyword\">self</span>.index]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CATransition</span> *ca=[<span class=\"built_in\">CATransition</span> animation];</div><div class=\"line\">    <span class=\"comment\">//告诉要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//设置过度效果</span></div><div class=\"line\">    ca.type=<span class=\"string\">@\"cube\"</span>;</div><div class=\"line\">    <span class=\"comment\">//设置动画的过度方向（向左）</span></div><div class=\"line\">    ca.subtype=kCATransitionFromLeft;</div><div class=\"line\">    <span class=\"comment\">//设置动画的时间</span></div><div class=\"line\">    ca.duration=<span class=\"number\">2.0</span>;</div><div class=\"line\">    <span class=\"comment\">//添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:ca forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下一张</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)nextOnClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.index++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.index&gt;<span class=\"number\">7</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.index=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.iconView.image=[<span class=\"built_in\">UIImage</span> imageNamed: [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d.jpg\"</span>,<span class=\"keyword\">self</span>.index]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.创建核心动画</span></div><div class=\"line\">    <span class=\"built_in\">CATransition</span> *ca=[<span class=\"built_in\">CATransition</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//1.1告诉要执行什么动画</span></div><div class=\"line\">    <span class=\"comment\">//1.2设置过度效果</span></div><div class=\"line\">    ca.type=<span class=\"string\">@\"cube\"</span>;</div><div class=\"line\">    <span class=\"comment\">//1.3设置动画的过度方向（向右）</span></div><div class=\"line\">    ca.subtype=kCATransitionFromRight;</div><div class=\"line\">    <span class=\"comment\">//1.4设置动画的时间</span></div><div class=\"line\">    ca.duration=<span class=\"number\">2.0</span>;</div><div class=\"line\">    <span class=\"comment\">//1.5设置动画的起点</span></div><div class=\"line\">    ca.startProgress=<span class=\"number\">0.5</span>;</div><div class=\"line\">    <span class=\"comment\">//1.6设置动画的终点</span></div><div class=\"line\"><span class=\"comment\">//    ca.endProgress=0.5;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//2.添加动画</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:ca forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"组动画\"><a href=\"#组动画\" class=\"headerlink\" title=\"组动画\"></a>组动画</h3><p>将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行属性解析.</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event&#123;</div><div class=\"line\">    <span class=\"comment\">// 平移动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a1 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a1.keyPath = <span class=\"string\">@\"transform.translation.y\"</span>;</div><div class=\"line\">    a1.toValue = @(<span class=\"number\">100</span>);</div><div class=\"line\">    <span class=\"comment\">// 缩放动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a2 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a2.keyPath = <span class=\"string\">@\"transform.scale\"</span>;</div><div class=\"line\">    a2.toValue = @(<span class=\"number\">0.0</span>);</div><div class=\"line\">    <span class=\"comment\">// 旋转动画</span></div><div class=\"line\">    <span class=\"built_in\">CABasicAnimation</span> *a3 = [<span class=\"built_in\">CABasicAnimation</span> animation];</div><div class=\"line\">    a3.keyPath = <span class=\"string\">@\"transform.rotation\"</span>;</div><div class=\"line\">    a3.toValue = @(M_PI_2);</div><div class=\"line\">    <span class=\"comment\">// 组动画</span></div><div class=\"line\">    <span class=\"built_in\">CAAnimationGroup</span> *groupAnima = [<span class=\"built_in\">CAAnimationGroup</span> animation];</div><div class=\"line\">    </div><div class=\"line\">    groupAnima.animations = @[a1, a2, a3];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置组动画的时间</span></div><div class=\"line\">    groupAnima.duration = <span class=\"number\">2</span>;</div><div class=\"line\">    groupAnima.fillMode = kCAFillModeForwards;</div><div class=\"line\">    groupAnima.removedOnCompletion = <span class=\"literal\">NO</span>;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.iconView.layer addAnimation:groupAnima forKey:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UIView封装动画\"><a href=\"#UIView封装动画\" class=\"headerlink\" title=\"UIView封装动画\"></a>UIView封装动画</h2><h3 id=\"UIView动画（首尾）\"><a href=\"#UIView动画（首尾）\" class=\"headerlink\" title=\"UIView动画（首尾）\"></a>UIView动画（首尾）</h3><h4 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间。<br>常见方法：</p>\n<ul>\n<li><strong>+ (void)setAnimationDelegate:(id)delegate</strong>     设置动画代理对象，当动画开始或者结束时会发消息给代理对象</li>\n<li><strong>+ (void)setAnimationWillStartSelector:(SEL)selector</strong>   当动画即将开始时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</li>\n<li><strong>+ (void)setAnimationDidStopSelector:(SEL)selector</strong>  当动画结束时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</li>\n<li><strong>+ (void)setAnimationDuration:(NSTimeInterval)duration</strong>   动画的持续时间，秒为单位</li>\n<li><strong>+ (void)setAnimationDelay:(NSTimeInterval)delay</strong>  动画延迟delay秒后再开始</li>\n<li><strong>+ (void)setAnimationStartDate:(NSDate *)startDate</strong>   动画的开始时间，默认为now</li>\n<li><strong>+ (void)setAnimationCurve:(UIViewAnimationCurve)curve</strong>  动画的节奏控制</li>\n<li><strong>+ (void)setAnimationRepeatCount:(float)repeatCount</strong>  动画的重复次数</li>\n<li><strong>+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses</strong>  如果设置为YES,代表动画每次重复执行的效果会跟上一次相反</li>\n<li><strong>+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache</strong>  设置视图view的过渡效果, transition指定过渡类型, cache设置YES代表使用视图缓存，性能较好</li>\n</ul>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//打印动画块的位置</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行之前的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//首尾式动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">//执行动画</span></div><div class=\"line\">    <span class=\"comment\">//设置动画执行时间</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:<span class=\"number\">2.0</span>];</div><div class=\"line\">    <span class=\"comment\">//设置代理</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">    <span class=\"comment\">//设置动画执行完毕调用的事件</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDidStopSelector:<span class=\"keyword\">@selector</span>(didStopAnimation)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.customView.center=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>);</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)didStopAnimation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕\"</span>);</div><div class=\"line\">    <span class=\"comment\">//打印动画块的位置</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行之后的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"UIView封装的动画与CALayer动画的对比\"><a href=\"#UIView封装的动画与CALayer动画的对比\" class=\"headerlink\" title=\"UIView封装的动画与CALayer动画的对比\"></a>UIView封装的动画与CALayer动画的对比</h4><p>使用UIView和CALayer都能实现动画效果，但是在真实的开发中，一般还是主要使用UIView封装的动画，而很少使用CALayer的动画。</p>\n<p><strong>CALayer核心动画与UIView动画的区别</strong>：<br>UIView封装的动画执行完毕之后不会反弹。即如果是通过CALayer核心动画改变layer的位置状态，表面上看虽然已经改变了，但是实际上它的位置是没有改变的。</p>\n<h3 id=\"block动画\"><a href=\"#block动画\" class=\"headerlink\" title=\"block动画\"></a>block动画</h3><h4 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a>方法：</h4><ul>\n<li><strong>+(void)animateWithDuration:delay:options:animations:completion:</strong></li>\n<li><strong>+(void)transitionWithView:duration:options:animations:completion:</strong></li>\n<li><strong>+(void)transitionFromView:toView:duration:options:completion:</strong><br>属性简介：</li>\n</ul>\n<ol>\n<li>duration：动画的持续时间</li>\n<li>delay：动画延迟delay秒后开始</li>\n<li>options：动画的节奏控制/转场动画的类型</li>\n<li>animations：将改变视图属性的代码放在这个block中</li>\n<li>completion：动画结束后，会自动调用这个block</li>\n</ol>\n<p>前两个方法用起来好像没什么区别。</p>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//block代码块动画</span></div><div class=\"line\">        [<span class=\"built_in\">UIView</span> transitionWithView:<span class=\"keyword\">self</span>.customView duration:<span class=\"number\">3.0</span> options:<span class=\"number\">0</span> animations:^&#123;</div><div class=\"line\">            <span class=\"comment\">//执行的动画</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画开始执行前的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>(<span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">            <span class=\"keyword\">self</span>.customView.center=<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">200</span>, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125; completion:^(<span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">            <span class=\"comment\">//动画执行完毕后的首位操作</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕\"</span>);</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"动画执行完毕后的位置：%@\"</span>,<span class=\"built_in\">NSStringFromCGPoint</span>( <span class=\"keyword\">self</span>.customView.center));</div><div class=\"line\">        &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2016-07-29T06:07:12.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016/7/29 14:07:12  \ncategories: 无处置放\ntags: hexo\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-07-29T15:01:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmr7000pweruodrccj55","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"重新开始","date":"2016-07-30T06:07:12.000Z","_content":"时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。\n\n<!--more-->\n\n不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。\n\n今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！\n\n\n\n![fighting](http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg)","source":"_posts/重新开始.md","raw":"---\ntitle: 重新开始\ndate: 2016/7/30 14:07:12  \ncategories: 无处置放\ntags: 杂谈\n\n---\n时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。\n\n<!--more-->\n\n不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。\n\n今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！\n\n\n\n![fighting](http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg)","slug":"重新开始","published":1,"updated":"2016-07-29T17:17:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis4scmuo001hwerumwwy9gva","content":"<p>时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。</p>\n<a id=\"more\"></a>\n<p>不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。</p>\n<p>今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！</p>\n<p><img src=\"http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg\" alt=\"fighting\"></p>\n","excerpt":"<p>时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。</p>","more":"<p>不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。</p>\n<p>今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！</p>\n<p><img src=\"http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg\" alt=\"fighting\"></p>"},{"title":"python 3.5基础语法","date":"2016-08-07T02:07:12.000Z","_content":"\npython还是大一时学的第一门课编程课，学的时候由于没有编程基础，最主要的是完全没有好好学，很煎熬。现在真是悔不当初。\n当时学的是2.x版本，有点过时了，现在看了[廖雪峰的博客](http://www.liaoxuefeng.com/)的3.5版本的语法介绍，做一些摘录。\n\n<!--more-->\n\n\n## Python基础\n\nPython采用缩进方式,写出来的代码就像下面的样子：\n```python\n# print absolute value of an integer:\na = 100\nif a >= 0:\n    print(a)\nelse:\n    print(-a)\n```\n以#开头的语句是注释\n其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块.\n\n### 数据类型和变量\n#### 字符串\n字符串是以单引号'或双引号\"括起来的任意文本.如果字符串内部既包含'又包含\",可以用转义字符\\来标识。\n要计算str包含多少个字符，可以用len()函数。\n%运算符就是用来格式化字符串，如：\n```python\n>>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n```\n有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%.\n\n#### 布尔值\n一个布尔值只有True、False两种值\n布尔值可以用and、or和not运算。\n\n#### 空值\n空值是Python里一个特殊的值，用None表示。\n\n#### 变量\n等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量\n\n### 数组和元组\n#### list\nlist是一种**可变的**有序的集合，用len()函数可以获得list元素的个数\n```python\nclassmates = ['Michael', 'Bob', 'Tracy']\n```\n要把某个元素替换成别的元素，可以直接赋值给对应的索引位置\nlist里面的元素的数据类型也可以不同\n列表可以看成一个多维数组 s[2][1]拿到元素。\n如果一个list中一个元素也没有，就是一个空的list，它的长度为0\n\n#### tuple\n另一种有序列表叫元组，但是tuple一旦初始化就不能修改\n```python\nclassmates = ('Michael', 'Bob', 'Tracy')\n```\n因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。\n当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来.\n\n如果要定义一个空的tuple，可以写成(),但是，要定义一个只有1个元素的tuple,必须写成如下\n```python\nt = (1,)\n```\n这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义\n\n### 条件判断\nif-else语句实现：\n```python\nage = 20\nif age >= 18:\n    print('your age is', age)\n    print('adult')\nelse:\n    print('your age is', age)\n    print('teenager')\n```\n注意不要少写了冒号:\n完全可以用elif做更细致的判断,elif是else if的缩写\n\n### 循环\n#### for...in\n依次把list或tuple中的每个元素迭代出来\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n```\nPython提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list.在for...in中可以简写成range()\n```python\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n```\n\n#### while\n```python\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n```\n\n### 容器\n#### dict\n```python\nd = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n```\n**要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key**\n\n#### set\nset和dict类似，**也是一组key的集合**，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\n要创建一个set，需要**提供一个list作为输入集合**：\n```python\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```\n重复元素在set中自动被过滤\n```python\n>>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n```\n\n## 函数\n### 调用函数\n#### 数据类型转换\nPython内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数\n\n#### 函数名\n函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”\n```python\n>>> a = abs # 变量a指向abs函数\n>>> a(-1) # 所以也可以通过a调用abs函数\n1\n```\n\n### 定义函数\n定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n可以使用from abstest import my_abs来导入my_abs()函数，abstest是my_abs所在的文件名.\n\n#### 空函数\n用pass语句定义一个什么事都不做的空函数，不用pass会报错。\n```python\ndef nop():\n    pass\n# 或者    \nif age >= 18:\n    pass\n```\n\n#### 返回多个值\n```python\nimport math\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n\n得到返回值\n```python\n>>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n>>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n```\n其实Python函数返回的仍然是单一值.返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。\n\n### 函数的参数\n#### 默认参数\npython不支持重载，可以使用默认参数的方式替代。\n```python\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n第二个参数n的默认值设定为2.这样，当我们调用power(5)时，相当于调用power(5, 2).\n\n但是需要注意：\n1. 必选参数在前，默认参数在后，否则Python的解释器会报错。**如果不按顺序提供参数时，需要写成 参数名=xx 的形式。**\n2. 默认参数必须指向不变对象。\n例如：\n```python\ndef add_end(L=[]):\n    L.append('END')\n    return L\n    \n>>> add_end()\n['END']\n>>> add_end()\n['END', 'END']\n>>> add_end()\n['END', 'END', 'END']\n```\n当L缺省后，L指向一个数组对象的地址。每次append后，那个地址的数组元素发生改变。\n\n如果要默认是list，可以这么写：\n```python\ndef add_end(L=None):\n    if L is None:\n        L = []\n    L.append('END')\n    return L\n```\n\n#### 可变参数\n通常可以通过list或tuple实现传入不确定数量的参数。python支持可变参数，写法如下:\n```python\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n>>> calc(1, 2, 3)\n14\n>>> calc(1, 3, 5, 7)\n84\n```\n**可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。因此无法再内部函数改变传入的list**\n**不是可变参数的话，参数需要一一对应**\n\n如果已经有一个list或者tuple，要调用一个可变参数可以写成这样：\n```python\n>>> nums = [1, 2, 3]\n>>> print(nums)\n[1, 2, 3]\n>>> print(*nums)\n1, 2, 3\n# 调用\n>>> calc(*nums)\n14\n```\n**nums表示一个数组或者元组\n\\*nums表示取出nums这个list里的所有元素，代表多个参数**\n\n#### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。如：\n```python\n# 定义函数\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n# 调用\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n# 另一种简化写法\n>>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n```\n**kw表示一个dict\n\\*\\*kw表示取出kw中的所有键值对元素，代表多个参数**\n\n**另外，和上面的list传入的是tuple一样，kw获得的dict是外部传入的一份拷贝，在函数内部对kw的修改不会影响到外部dict。**\n\n#### 命名关键字参数\n不知道这么脑残的语法有什么意义。\n\n## 高级特性\n### 切片\n切片（Slice）操作符用来简化经常取指定索引范围的操作\n```python\n>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n>>> L[0:3]\n['Michael', 'Sarah', 'Tracy']\n```\n从索引0开始取，直到索引3为止，但不包括索引3,正好是3个元素.\n\n各种用法示例：\n```python\n# Python支持L[-1]取倒数第一个元素,同样支持倒数切片\n>>> L[-2:]\n['Bob', 'Jack']\n>>> L[-2:-1]\n['Bob']\n\n# 前10个数，每两个取一个：\n>>> L[:10:2]\n[0, 2, 4, 6, 8]\n\n# 所有数，每5个取一个：\n>>> L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n\n# 什么都不写，只写[:]就可以原样复制一个list\n>>> L[:]\n[0, 1, 2, 3, ..., 99]\n\n# tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple\n>>> (0, 1, 2, 3, 4, 5)[:3]\n(0, 1, 2)\n\n#字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：\n>>> 'ABCDEFG'[:3]\n'ABC'\n>>> 'ABCDEFG'[::2]\n'ACEG'\n```\n\n### 迭代\n我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。只要是可迭代对象，无论有无下标，都可以迭代。\n\n判断一个对象是否是可迭代对象：\n```python\nfrom collections import Iterable\nisinstance('abc', Iterable)\n```\n\n### 列表生成式\n感觉没啥用。\n\n### 生成器\n列表元素可以按照某种算法在不断循环的过程中推算出后续元素，不必创建完整的list，节省大量空间。这种一边循环一边计算的机制，叫做generator。\n例如实现斐波那契函数：\n```python\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'\n    \nfor n in fib(6):\n\tprint(n)\n```\n如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator.\n函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。\n\n其实就相当于在yield处有个断点，可以获得当时的yield处的值，供for循环内使用。\n\n## 函数式编程\n函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！\nPython对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。\n\n### 高阶函数\n#### 变量可以指向函数\n把函数本身赋值给变量,即：变量可以指向函数。\n```python\n>>> f = abs\n>>> f(-10)\n10\n```\n说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。\n\n#### 传入函数\n那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数\n```python\ndef add(x, y, f):\n    return f(x) + f(y)\n```\n\n#### map\nmap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。\n```python\n>>> def f(x):\n...     return x * x\n...\n>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n#### reduce\nreduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数**必须接收两个参数**，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：\n```python\nreduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)\n```\n\n#### filter\nfilter()也接收一个函数和一个序列.filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。\n```python\ndef is_odd(n):\n    return n % 2 == 1\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n```\n\n#### sorted\n使用sorted()函数就可以对list进行排序。\nsorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序：\n```python\n>>> sorted([36, 5, -12, 9, -21], key=abs)\n[5, 9, -12, -21, 36]\n```\n**key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：**\n```python\nlist = [36, 5, -12, 9, -21]\nkeys = [36, 5,  12, 9,  21]\n```\n\n### 返回函数\n高阶函数除了接收函数作为参数外，还能将函数作为结果返回。好处是，不需要立即执行，在想要调用的时候执行。\n```python\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n             return i*i\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\n\n>>> f1()\n9\n>>> f2()\n9\n>>> f3()\n9\n```\n本例中，执行count()返回了一个以f函数作为元素的数组，分别赋给f1，f2，f3。这里面执行三个函数的结果都是9，因为外层i在循环的时候并没有执行i*i，当循环完后，i为3，由于闭包性，i=3被保存在栈中，直到函数执行。\n因此，返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n\n### 匿名函数\n```python\nlambda x: x * x\n=>\ndef f(x):\n    return x * x\n```\n\n关键字lambda表示匿名函数，冒号前面的x表示函数参数。\n匿名函数有个限制，就是**只能有一个表达式**，不用写return，返回值就是该表达式的结果。\n匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数\n\n### 装饰器\n#### 不带参数\n在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。\n```python\ndef log(func):\n    def wrapper(*args, **kw):\n    \t# 函数对象有一个__name__属性，可以拿到函数的名字\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n@log\ndef now():\n    print('2015-3-25')\n    \n>>> now()\ncall now():\n2015-3-25\n```\n\n此处把**@log**放到**now()**定义处，相当于执行了\n**now = log(now)**: **now() => wrapper()**\n将原方法作为参数传入。类似于装饰者模式，只不过由于python的动态性，不需要调用新定义的方法，只要调用原方法就可以动态解析。\n\n#### 带参数\n如果log带参数\n```python\ndef log(text):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@log('execute')\ndef now():\n    print('2015-3-25')\n```\n\n首先执行log('execute')，返回的是decorator函数，再调用返回的函数，参数是now函数，返回值最终是wrapper函数。即**now()=>wrapper()**\n\n#### 带来的问题\n上面的过程解析已经说明，最后now()的调用，都转化成了wrapper()的调用。那么，在调用**now.__name__**时，结果就会使wrapper，而不是now。\n因此，需要将**wrapper.__name__ = func.__name__**。可以使用python内置的方法**functools.wraps**\n\n```\nimport functools\ndef log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n# 或者\nimport functools\ndef log(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator  \n```\n\n### 偏函数\n使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单\n\n假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：\n```python\ndef int2(x, base=2):\n    return int(x, base)\n```\n\n我们可以使用**functools.partial**创建一个偏函数，不需要自己定义int2\n```python\n>>> import functools\n>>> int2 = functools.partial(int, base=2)\n>>> int2('1000000')\n64\n>>> int2('1010101')\n85\n```\n简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单\n\n创建偏函数时，实际上可以接收函数对象、\\*args和\\*\\*kw这3个参数.\n```python\nmax2 = functools.partial(max, 10)\n```\n实际上会把10作为\\*args的一部分**自动加到左边**，也就是：\n```python\nmax2(5, 6, 7)\n相当于：\nargs = (10, 5, 6, 7)\nmax(*args)\n```\n\n## 模块\nPython又引入了按目录来组织模块的方法，称为包（Package）。引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。\n请注意，每一个包目录下面都会有一个__init\\_\\_.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init\\_\\_.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块\n\n### 使用模块\n```python\nimport sys\ndef test():\n\tpass\nif __name__=='__main__':\n\ttest()\n```\n导入sys模块后,就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能。\nsys模块有一个argv变量，用list存储了**命令行的所有参数**。argv至少有一个元素，因为第一个参数永远是该.py文件的名称。\n在命令行运行该模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。\n\n作用域：\n- 正常的函数和变量名是公开的（public），可以被直接引用\n- 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途。\n- 类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用。\n\n### 安装第三方模块\n使用pip3 install XXX 安装第三方库\n当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。\n搜索路径存放在sys模块的path变量中\n```python\nimport sys\nprint(sys.path)\n```\n当要添加自己的搜索目录时可以\n1. 直接修改sys.path:**sys.path.append('/Users/xxx/xxx')**\n2. 设置环境变量PYTHONPATH\n\n## 面向对象编程\n### 类和实例\n定义类是通过class关键字，后面紧接着是类名，紧接着是(object)，表示该类是从哪个类继承下来的。\n```python\nclass Student(object)\n\tpass\n```\n\n定义好类，就可以创建出实例了。\n```python\nbart = Student()\n```\n\n可以**自由地给一个实例变量绑定属性**，比如，给实例bart绑定一个name属性：\n```python\nbart.name = 'Zachary'\n```\n和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。\n\n创建实例的时候可以使用特殊的**__init__**方法初始化：\n```python\nclass Student(object):\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n```\n注意：\n1. 注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。\n2. 有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去。\n\n另外：\n1. 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数\n2. 如果是类的方法，不需要传入self，使用类名.方法名调用。和其他语言一样。\n\n### 访问限制\n如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。\n\noc中使用.h和.m定义属性的方式区分共有私有。\nJava中通过public，private的方式区分共有私有。\npython通过__的方式区分共有私有。\n\n以_开头的变量表示：可以访问，但是最好视为私有变量。\n\n### 继承和多态\n继承和多态和其他语言没什么不同，就不重复了。\n\n对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。\n对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了\n\n### 获取对象信息\n#### type\n使用type()函数,判断对象类型\n```python\n>>> import types\n>>> def fn():\n...     pass\n...\n>>> type(fn)==types.FunctionType\nTrue\n>>> type(abs)==types.BuiltinFunctionType\nTrue\n>>> type(lambda x: x)==types.LambdaType\nTrue\n>>> type((x for x in range(10)))==types.GeneratorType\nTrue\n```\n\n#### isinstance()\n使用isinstance()函数,判断class的继承关系\n判断基本类型：\n```python\n>>> isinstance('a', str)\nTrue\n>>> isinstance(123, int)\nTrue\n>>> isinstance(b'a', bytes)\nTrue\n```\n判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：\n```python\n>>> isinstance([1, 2, 3], (list, tuple))\nTrue\n>>> isinstance((1, 2, 3), (list, tuple))\nTrue\n```\n\n#### dir()\n如果要获得一个对象的**所有属性和方法**，可以使用dir()函数，它返回一个包含字符串的list.\n\n仅仅把属性和方法列出来是不够的，配合**getattr()**、**setattr()**以及**hasattr()**，我们可以直接**操作一个对象的状态**：\n```python\n>>> class MyObject(object):\n...     def __init__(self):\n...         self.x = 9\n...     def power(self):\n...         return self.x * self.x\n...\n>>> obj = MyObject()\n```\n紧接着，可以测试该对象的属性：\n```python\n>>> hasattr(obj, 'x') # 有属性'x'吗？\nTrue\n>>> obj.x\n9\n>>> hasattr(obj, 'y') # 有属性'y'吗？\nFalse\n>>> setattr(obj, 'y', 19) # 设置一个属性'y'\n>>> hasattr(obj, 'y') # 有属性'y'吗？\nTrue\n>>> getattr(obj, 'y') # 获取属性'y'\n19\n>>> obj.y # 获取属性'y'\n19\n```\n如果试图获取不存在的属性，会抛出AttributeError的错误\n可以传入一个default参数，如果属性不存在，就返回默认值：\n```python\n>>> getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404\n404\n```\n\n也可以获得对象的方法：\n```python\n>>> hasattr(obj, 'power') # 有属性'power'吗？\nTrue\n>>> getattr(obj, 'power') # 获取属性'power'\n<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>\n>>> fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn\n>>> fn # fn指向obj.power\n<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>\n>>> fn() # 调用fn()与调用obj.power()是一样的\n81\n```\n\n**感觉上，用set，get，has方法和直接设置没什么太大区别。**\n\n### 实例属性和类属性\npython中并没有static修饰符，在一个class中定义的属性，实例和类都可以访问：\n```python\n>>> class Student(object):\n...     name = 'Student'\n...\n>>> s = Student() # 创建实例s\n>>> print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性\nStudent\n>>> print(Student.name) # 打印类的name属性\nStudent\n>>> s.name = 'Michael' # 给实例绑定name属性\n>>> print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性\nMichael\n>>> print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问\nStudent\n>>> del s.name # 如果删除实例的name属性\n>>> print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了\nStudent\n```\n在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。\n\n## 面向对象高级编程\n### 使用__slots__\n我们可以给实例绑定任何属性和方法。\n创建实例：\n```python\nclass Student(object):\n    pass\n```\n\n给实例绑定方法：\n```python\n>>> def set_age(self, age): # 定义一个函数作为实例方法\n...     self.age = age\n...\n>>> from types import MethodType\n>>> s.set_age = MethodType(set_age, s) # 给实例绑定一个方法\n>>> s.set_age(25) # 调用实例方法\n>>> s.age # 测试结果\n25\n```\n**注意：**\n1. 这里使用MethodType方法给实例绑定方法，之后调用的时候就不用设置self了。如果使用s.set_age = set_age的方式绑定，那么调用时要自己传入self变量。 \n2. MethodType()这个方法不要用在给类绑定属性上。\n\n给类绑定方法:\n```python\n>>> def set_score(self, score):\n...     self.score = score\n...\n>>> Student.set_score = set_score\n```\n**注意：**像这样给类绑定方法后，实例变量不用自己传入self了。\n\n如果我们想要限制实例的属性。比如，只允许对Student实例添加name和age属性。我们可以使用__slots__来限制属性。\n```python\nclass Student(object):\n    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称\n```\n使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的,即**__slots__属性并不会被继承**\n\nslots的本质不是限制实例添加属性，而是优化性能。slots绑定的实例属性不保存在dict中，所以在有大量实例存在的情况下能减少hash table的内存开销。不能给实例增加,不能给实例动态添加属性只是__slots__的副作用。\n\n### 使用@property\n类的属性都是暴露出来的，写起来方便，但是没办法检查参数。如果使用get，set方法又显得麻烦。可以使用装饰器(decorator)中的@property装饰器。\n```python\nclass Student(object):\n\n    @property\n    def score(self):\n        return self._score\n\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError('score must be an integer!')\n        if value < 0 or value > 100:\n            raise ValueError('score must between 0 ~ 100!')\n        self._score = value\n```\n注意：\n1. 把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值.\n2. 只定义getter方法，不定义setter方法就是一个只读属性。\n\n### 多重继承\npython允许多重继承：\n```python\nclass Dog(Mammal, Runnable):\n    pass\n```\n**如果继承的类有同名方法，按照继承的顺序执行，即先执行Mammal里的，没有再执行Runnable里的。**\n\n在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。\n```python\nclass Dog(Mammal, RunnableMixIn, CarnivorousMixIn):\n    pass\n```\n\n感觉MixIn就是个约定啊，并没有太多实质效果啊=。=\n\n### 定制类\n形如__xxx__的变量或者函数名就要注意，这些在Python中是有特殊用途的。\n\n#### __str__\n怎么才能打印得好看呢？只需要定义好__str__()方法，返回一个好看的字符串就可以了：\n```python\n>>> class Student(object):\n...     def __init__(self, name):\n...         self.name = name\n...     def __str__(self):\n...         return 'Student object (name: %s)' % self.name\n...\n>>> print(Student('Michael'))\nStudent object (name: Michael)\n```\n\n#### __iter__\n如果一个类想被用于**for...in**循环，类似list或tuple那样，就必须实现一个**__iter__()**方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的**__next__()**方法拿到循环的下一个值，直到遇到**StopIteration**错误时退出循环。\n```python\nclass Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1 # 初始化两个计数器a，b\n\n    def __iter__(self):\n        return self # 实例本身就是迭代对象，故返回自己\n\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b # 计算下一个值\n        if self.a > 100000: # 退出循环的条件\n            raise StopIteration();\n        return self.a # 返回下一个值\n\n>>> for n in Fib():\n...     print(n)\n```\n\n#### __getitem__\n要表现得像list那样按照下标取出元素，需要实现__getitem__()方法。__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice:\n```python\nclass Fib(object):\n    def __getitem__(self, n):\n        if isinstance(n, int): # n是索引\n            a, b = 1, 1\n            for x in range(n):\n                a, b = b, a + b\n            return a\n        if isinstance(n, slice): # n是切片\n            start = n.start\n            stop = n.stop\n            if start is None:\n                start = 0\n            a, b = 1, 1\n            L = []\n            for x in range(stop):\n                if x >= start:\n                    L.append(a)\n                a, b = b, a + b\n            return L\n```\n与之对应的是__setitem__()方法，把对象视作list或dict来对集合赋值。最后，还有一个__delitem__()方法，用于删除某个元素。\n\n#### __getattr__\n正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。\n```python\nclass Student(object):\n\n    def __init__(self):\n        self.name = 'Michael'\n\n    def __getattr__(self, attr):\n        if attr=='score':\n            return 99\n```\n\n当调用**不存在的属性**时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值.\n\n#### __call__\n任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用。\n```python\nclass Student(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self):\n        print('My name is %s.' % self.name)\n\n>>> s = Student('Michael')\n>>> s() # self参数不要传入\nMy name is Michael.\n```\n\n### 枚举类\nPython提供了Enum类来实现这个功能\n```python\nfrom enum import Enum\nMonth = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))\n\nfor name, member in Month.__members__.items():\n    print(name, '=>', member, ',', member.value)\n```\n\nvalue属性则是自动赋给成员的int常量，默认从1开始计数。\n如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：\n\n```python\nfrom enum import Enum, unique\nclass Weekday(Enum):\n    Sun = 0 # Sun的value被设定为0\n    Mon = 1\n    Tue = 2\n    Wed = 3\n    Thu = 4\n    Fri = 5\n    Sat = 6\n```\n\n### 元类\n没看\n\n## IO编程\n### 文件读写\n#### 读文件\n使用Python内置的open()函数，传入文件名和标示符\n```python\n>>> f = open('/Users/test.txt', 'r')\n```\n标示符'r'表示读.\n\n如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：\n```python\n>>> f.read()\n'Hello, world!'\n```\n\n最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的\n```python\n>>> f.close()\n```\n\n由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现：\n```python\ntry:\n    f = open('/path/to/file', 'r')\n    print(f.read())\nfinally:\n    if f:\n        f.close()\n```\n\n但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：\n```python\nwith open('/path/to/file', 'r') as f:\n    print(f.read())\n```\n这和前面的try ... finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。\n\n调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。\n\n如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：\n```python\nfor line in f.readlines():\n    print(line.strip()) # 把末尾的'\\n'删掉\n```\n\n#### 二进制文件\n前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：\n```python\n>>> f = open('/Users/michael/test.jpg', 'rb')\n>>> f.read()\nb'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...' # 十六进制表示的字节\n```\n\n#### 文件读写\n\n阅读: 100273\n读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。\n\n读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。\n\n读文件\n\n要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：\n\n>>> f = open('/Users/michael/test.txt', 'r')\n标示符'r'表示读，这样，我们就成功地打开了一个文件。\n\n如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：\n\n>>> f=open('/Users/michael/notfound.txt', 'r')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/michael/notfound.txt'\n如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：\n\n>>> f.read()\n'Hello, world!'\n最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：\n\n>>> f.close()\n由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现：\n\ntry:\n    f = open('/path/to/file', 'r')\n    print(f.read())\nfinally:\n    if f:\n        f.close()\n但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：\n\nwith open('/path/to/file', 'r') as f:\n    print(f.read())\n这和前面的try ... finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。\n\n调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。\n\n如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：\n\nfor line in f.readlines():\n    print(line.strip()) # 把末尾的'\\n'删掉\nfile-like Object\n\n像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。\n\nStringIO就是在内存中创建的file-like Object，常用作临时缓冲。\n\n#### 二进制文件\n\n前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：\n\n>>> f = open('/Users/michael/test.jpg', 'rb')\n>>> f.read()\nb'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...' # 十六进制表示的字节\n字符编码\n\n#### 字符编码\n要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：\n```python\n>>> f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')\n>>> f.read()\n'测试'\n```\n\n遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：\n```python\n>>> f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore')\n```\n\n#### 写文件\n写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符'w'或者'wb'表示写文本文件或写二进制文件：\n```python\n>>> f = open('/Users/michael/test.txt', 'w')\n>>> f.write('Hello, world!')\n>>> f.close()\n```\n\n你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：\n```python\nwith open('/Users/michael/test.txt', 'w') as f:\n    f.write('Hello, world!')\n```\n\n### StringIO和BytesIO\n读取写内容到内存中，不写了。用到再看。\n\n### 操作文件和目录\n```python\n>>> import os\n# 查看当前目录的绝对路径:\n>>> os.path.abspath('.')\n'/Users/michael'\n# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:\n>>> os.path.join('/Users/michael', 'testdir')\n'/Users/michael/testdir'\n# 然后创建一个目录:\n>>> os.mkdir('/Users/michael/testdir')\n# 删掉一个目录:\n>>> os.rmdir('/Users/michael/testdir')\n```\n把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。\n同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：\n```python\n>>> os.path.split('/Users/michael/testdir/file.txt')\n('/Users/michael/testdir', 'file.txt')\n```\n\n文件操作\n```python\n# 对文件重命名:\n>>> os.rename('test.txt', 'test.py')\n# 删掉文件:\n>>> os.remove('test.py')\n```\n\n### 序列化\n我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。\n序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。\n反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。\n\nPython提供了pickle模块来实现序列化。\n```python\n>>> import pickle\n>>> d = dict(name='Bob', age=20, score=88)\n>>> f = open('dump.txt', 'wb')\n>>> pickle.dump(d, f)\n>>> f.close()\n```\npickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object.\n当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象:\n```python\n>>> f = open('dump.txt', 'rb')\n>>> d = pickle.load(f)\n>>> f.close()\n>>> d\n{'age': 20, 'score': 88, 'name': 'Bob'}\n```\n\n### JSON\nPython内置的json模块提供了非常完善的Python对象到JSON格式的转换。\n```python\n>>> import json\n>>> d = dict(name='Bob', age=20, score=88)\n>>> json.dumps(d)\n'{\"age\": 20, \"score\": 88, \"name\": \"Bob\"}'\n```\ndumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。\n\n要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：\n```python\n>>> json_str = '{\"age\": 20, \"score\": 88, \"name\": \"Bob\"}'\n>>> json.loads(json_str)\n{'age': 20, 'score': 88, 'name': 'Bob'}\n```\n\n## 进程和线程\n### 多进程\n#### multiprocessing\nmultiprocessing模块就是跨平台版本的多进程模块。\nmultiprocessing模块提供了一个Process类来代表一个进程对象\n```python\nfrom multiprocessing import Process\nimport os\n\n# 子进程要执行的代码\ndef run_proc(name):\n    print('Run child process %s (%s)...' % (name, os.getpid()))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Process(target=run_proc, args=('test',))\n    print('Child process will start.')\n    p.start()\n    p.join()\n    print('Child process end.')\n```\n创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。\njoin()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。\n\n#### pool\n如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n```python\nfrom multiprocessing import Pool\nimport os, time, random\n\ndef long_time_task(name):\n    print('Run task %s (%s)...' % (name, os.getpid()))\n    start = time.time()\n    time.sleep(random.random() * 3)\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Pool(4)\n    for i in range(5):\n        p.apply_async(long_time_task, args=(i,))\n    print('Waiting for all subprocesses done...')\n    p.close()\n    p.join()\n    print('All subprocesses done.')\n```\n结果如下：\n```python\nParent process 669.\nWaiting for all subprocesses done...\nRun task 0 (671)...\nRun task 1 (672)...\nRun task 2 (673)...\nRun task 3 (674)...\nTask 2 runs 0.14 seconds.\nRun task 4 (673)...\nTask 1 runs 0.27 seconds.\nTask 3 runs 0.86 seconds.\nTask 0 runs 1.41 seconds.\nTask 4 runs 1.91 seconds.\nAll subprocesses done.\n```\n\n对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。\n注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，这是因为Pool的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：`p = ool(5)`就可以同时跑5个进程。\n\n### 子进程&进程间通信\n到时候再看\n\n## 多线程\n启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n```python\nimport time, threading\n\n# 新线程执行的代码:\ndef loop():\n    print('thread %s is running...' % threading.current_thread().name)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print('thread %s >>> %s' % (threading.current_thread().name, n))\n        time.sleep(1)\n    print('thread %s ended.' % threading.current_thread().name)\n\nprint('thread %s is running...' % threading.current_thread().name)\nt = threading.Thread(target=loop, name='LoopThread')\nt.start()\nt.join()\nprint('thread %s ended.' % threading.current_thread().name)\n```\n执行结果如下:\n\n```python\nthread MainThread is running...\nthread LoopThread is running...\nthread LoopThread >>> 1\nthread LoopThread >>> 2\nthread LoopThread >>> 3\nthread LoopThread >>> 4\nthread LoopThread >>> 5\nthread LoopThread ended.\nthread MainThread ended.\n```\n任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块有个current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2\n\n### Lock\n多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。\n```python\nbalance = 0\nlock = threading.Lock()\n\ndef run_thread(n):\n    for i in range(100000):\n        # 先要获取锁:\n        lock.acquire()\n        try:\n            # 放心地改吧:\n            change_it(n)\n        finally:\n            # 改完了一定要释放锁:\n            lock.release()\n```\n创建一个锁就是通过threading.Lock()来实现.当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try...finally来确保锁一定会被释放。\n\n\n### ThreadLocal\n一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。\n```python\nimport threading\n\n# 创建全局ThreadLocal对象:\nlocal_school = threading.local()\n\ndef process_student():\n    # 获取当前线程关联的student:\n    std = local_school.student\n    print('Hello, %s (in %s)' % (std, threading.current_thread().name))\n\ndef process_thread(name):\n    # 绑定ThreadLocal的student:\n    local_school.student = name\n    process_student()\n\nt1 = threading.Thread(target= process_thread, args=('Alice',), name='Thread-A')\nt2 = threading.Thread(target= process_thread, args=('Bob',), name='Thread-B')\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n```\n执行结果：\n\n```python\nHello, Alice (in Thread-A)\nHello, Bob (in Thread-B)\n```\n\n全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。\n\n可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。\n\nThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。\n\n### 分布式进程\n用到再看\n\n## 正则表达式\n### 基本用法\n- \\d可以匹配一个数字\n- \\w可以匹配一个字母或数字\n- .可以匹配任意字符\n- *表示任意个字符（包括0个）\n- 用+表示至少一个字符\n- 用?表示0个或1个字符\n- 用{n}表示n个字符\n- 用{n,m}表示n-m个字符\n- \\s可以匹配一个空格（也包括Tab等空白符）\n- 要做更精确地匹配，可以用[]表示范围\t\n + [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线\n- [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线\n + (P|p)ython可以匹配'Python'或者'python'\n- ^表示行的开头\n- $表示行的结束\n- ^py$就变成了整行匹配,就只能匹配'py'\n\n### re模块\nPython提供re模块，包含所有正则表达式的功能。\nPython的字符串本身也用\\转义，因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：\n```python\ns = r'ABC\\-001' # Python的字符串\n# 对应的正则表达式字符串不变：\n# 'ABC\\-001'\n```\n\nmatch()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：\n```python\ntest = '用户输入的字符串'\nif re.match(r'正则表达式', test):\n    print('ok')\nelse:\n    print('failed')\n```\n\n### 切分字符串\n```python\n>>> re.split(r'[\\s\\,\\;]+', 'a,b;; c  d')\n['a', 'b', 'c', 'd']\n```\n\n除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：**^(\\d{3})-(\\d{3,8})$**分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：\n```python\n>>> m = re.match(r'^(\\d{3})-(\\d{3,8})$', '010-12345')\n>>> m\n<_sre.SRE_Match object; span=(0, 9), match='010-12345'>\n>>> m.group(0)\n'010-12345'\n>>> m.group(1)\n'010'\n>>> m.group(2)\n'12345'\n```\n注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。\n\n### 贪婪匹配\n正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：\n```python\n>>> re.match(r'^(\\d+)(0*)$', '102300').groups()\n('102300', '')\n```\n由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。\n必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配：\n```python\n>>> re.match(r'^(\\d+?)(0*)$', '102300').groups()\n('1023', '00')\n```\n### 编译\n如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：\n```python\n>>> import re\n# 编译:\n>>> re_telephone = re.compile(r'^(\\d{3})-(\\d{3,8})$')\n# 使用：\n>>> re_telephone.match('010-12345').groups()\n('010', '12345')\n>>> re_telephone.match('010-8086').groups()\n('010', '8086')\n```\n\n## 常用內建模块\n### datetime\n#### 获取当前日期和时间\ndatetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datetime这个类。\n如果仅导入import datetime，则必须引用全名datetime.datetime。\n```python\n>>> from datetime import datetime\n>>> now = datetime.now() # 获取当前datetime\n>>> print(now)\n2015-05-18 16:28:07.198690\n>>> print(type(now))\n<class 'datetime.datetime'>\n```\ndatetime.now()返回当前日期和时间，其类型是datetime。\n\n#### 获取指定日期和时间\n要指定某个日期和时间，我们直接用参数构造一个datetime：\n```python\n>>> from datetime import datetime\n>>> dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime\n>>> print(dt)\n2015-04-19 12:20:00\n```\n\n#### datetime转换为timestamp\n把一个datetime类型转换为timestamp只需要简单调用**timestamp()**方法：\n```python\n>>> from datetime import datetime\n>>> dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime\n>>> dt.timestamp() # 把datetime转换为timestamp\n1429417200.0\n```\n注意Python的timestamp是一个浮点数。如果有小数位，小数位表示毫秒数。\n某些编程语言（如Java和JavaScript）的timestamp使用整数表示毫秒数，这种情况下只需要把timestamp除以1000就得到Python的浮点表示方法.\n\n#### timestamp转换为datetime\n要把timestamp转换为datetime，使用datetime提供的**fromtimestamp()**方法：\n```python\n>>> from datetime import datetime\n>>> t = 1429417200.0\n>>> print(datetime.fromtimestamp(t))\n2015-04-19 12:20:00\n```\n\n#### str转换为datetime\n转换方法是通过**datetime.strptime()**实现，需要一个日期和时间的格式化字符串：\n```python\n>>> from datetime import datetime\n>>> cday = datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S')\n>>> print(cday)\n2015-06-01 18:19:59\n```\n\n#### datetime转换为str\n如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime()实现的\n```python\n>>> from datetime import datetime\n>>> now = datetime.now()\n>>> print(now.strftime('%a, %b %d %H:%M'))\nMon, May 05 16:28\n```\n\n#### datetime加减\n对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，不过需要导入timedelta这个类\n```python\n>>> from datetime import datetime, timedelta\n>>> now = datetime.now()\n>>> now\ndatetime.datetime(2015, 5, 18, 16, 57, 3, 540997)\n>>> now + timedelta(hours=10)\ndatetime.datetime(2015, 5, 19, 2, 57, 3, 540997)\n>>> now - timedelta(days=1)\ndatetime.datetime(2015, 5, 17, 16, 57, 3, 540997)\n>>> now + timedelta(days=2, hours=12)\ndatetime.datetime(2015, 5, 21, 4, 57, 3, 540997)\n```\n使用timedelta你可以很容易地算出前几天和后几天的时刻\n\n### collections\ncollections是Python内建的一个集合模块，提供了许多有用的集合类。\n\n \n\n\n\n\n\n\n最后再次感谢廖老师的辛勤劳动。\n\n\n\n\n\n\n","source":"_posts/python语法.md","raw":"title: python 3.5基础语法\ndate: 2016/8/7 10:07:12  \ncategories: python\ntags:\n\t- 读书笔记\n\n---\n\npython还是大一时学的第一门课编程课，学的时候由于没有编程基础，最主要的是完全没有好好学，很煎熬。现在真是悔不当初。\n当时学的是2.x版本，有点过时了，现在看了[廖雪峰的博客](http://www.liaoxuefeng.com/)的3.5版本的语法介绍，做一些摘录。\n\n<!--more-->\n\n\n## Python基础\n\nPython采用缩进方式,写出来的代码就像下面的样子：\n```python\n# print absolute value of an integer:\na = 100\nif a >= 0:\n    print(a)\nelse:\n    print(-a)\n```\n以#开头的语句是注释\n其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块.\n\n### 数据类型和变量\n#### 字符串\n字符串是以单引号'或双引号\"括起来的任意文本.如果字符串内部既包含'又包含\",可以用转义字符\\来标识。\n要计算str包含多少个字符，可以用len()函数。\n%运算符就是用来格式化字符串，如：\n```python\n>>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n```\n有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%.\n\n#### 布尔值\n一个布尔值只有True、False两种值\n布尔值可以用and、or和not运算。\n\n#### 空值\n空值是Python里一个特殊的值，用None表示。\n\n#### 变量\n等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量\n\n### 数组和元组\n#### list\nlist是一种**可变的**有序的集合，用len()函数可以获得list元素的个数\n```python\nclassmates = ['Michael', 'Bob', 'Tracy']\n```\n要把某个元素替换成别的元素，可以直接赋值给对应的索引位置\nlist里面的元素的数据类型也可以不同\n列表可以看成一个多维数组 s[2][1]拿到元素。\n如果一个list中一个元素也没有，就是一个空的list，它的长度为0\n\n#### tuple\n另一种有序列表叫元组，但是tuple一旦初始化就不能修改\n```python\nclassmates = ('Michael', 'Bob', 'Tracy')\n```\n因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。\n当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来.\n\n如果要定义一个空的tuple，可以写成(),但是，要定义一个只有1个元素的tuple,必须写成如下\n```python\nt = (1,)\n```\n这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义\n\n### 条件判断\nif-else语句实现：\n```python\nage = 20\nif age >= 18:\n    print('your age is', age)\n    print('adult')\nelse:\n    print('your age is', age)\n    print('teenager')\n```\n注意不要少写了冒号:\n完全可以用elif做更细致的判断,elif是else if的缩写\n\n### 循环\n#### for...in\n依次把list或tuple中的每个元素迭代出来\n```python\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n```\nPython提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list.在for...in中可以简写成range()\n```python\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n```\n\n#### while\n```python\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n```\n\n### 容器\n#### dict\n```python\nd = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n```\n**要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key**\n\n#### set\nset和dict类似，**也是一组key的集合**，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\n要创建一个set，需要**提供一个list作为输入集合**：\n```python\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```\n重复元素在set中自动被过滤\n```python\n>>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n```\n\n## 函数\n### 调用函数\n#### 数据类型转换\nPython内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数\n\n#### 函数名\n函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”\n```python\n>>> a = abs # 变量a指向abs函数\n>>> a(-1) # 所以也可以通过a调用abs函数\n1\n```\n\n### 定义函数\n定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n可以使用from abstest import my_abs来导入my_abs()函数，abstest是my_abs所在的文件名.\n\n#### 空函数\n用pass语句定义一个什么事都不做的空函数，不用pass会报错。\n```python\ndef nop():\n    pass\n# 或者    \nif age >= 18:\n    pass\n```\n\n#### 返回多个值\n```python\nimport math\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n\n得到返回值\n```python\n>>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n>>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n```\n其实Python函数返回的仍然是单一值.返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。\n\n### 函数的参数\n#### 默认参数\npython不支持重载，可以使用默认参数的方式替代。\n```python\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n第二个参数n的默认值设定为2.这样，当我们调用power(5)时，相当于调用power(5, 2).\n\n但是需要注意：\n1. 必选参数在前，默认参数在后，否则Python的解释器会报错。**如果不按顺序提供参数时，需要写成 参数名=xx 的形式。**\n2. 默认参数必须指向不变对象。\n例如：\n```python\ndef add_end(L=[]):\n    L.append('END')\n    return L\n    \n>>> add_end()\n['END']\n>>> add_end()\n['END', 'END']\n>>> add_end()\n['END', 'END', 'END']\n```\n当L缺省后，L指向一个数组对象的地址。每次append后，那个地址的数组元素发生改变。\n\n如果要默认是list，可以这么写：\n```python\ndef add_end(L=None):\n    if L is None:\n        L = []\n    L.append('END')\n    return L\n```\n\n#### 可变参数\n通常可以通过list或tuple实现传入不确定数量的参数。python支持可变参数，写法如下:\n```python\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n>>> calc(1, 2, 3)\n14\n>>> calc(1, 3, 5, 7)\n84\n```\n**可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。因此无法再内部函数改变传入的list**\n**不是可变参数的话，参数需要一一对应**\n\n如果已经有一个list或者tuple，要调用一个可变参数可以写成这样：\n```python\n>>> nums = [1, 2, 3]\n>>> print(nums)\n[1, 2, 3]\n>>> print(*nums)\n1, 2, 3\n# 调用\n>>> calc(*nums)\n14\n```\n**nums表示一个数组或者元组\n\\*nums表示取出nums这个list里的所有元素，代表多个参数**\n\n#### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。如：\n```python\n# 定义函数\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n# 调用\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n# 另一种简化写法\n>>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n```\n**kw表示一个dict\n\\*\\*kw表示取出kw中的所有键值对元素，代表多个参数**\n\n**另外，和上面的list传入的是tuple一样，kw获得的dict是外部传入的一份拷贝，在函数内部对kw的修改不会影响到外部dict。**\n\n#### 命名关键字参数\n不知道这么脑残的语法有什么意义。\n\n## 高级特性\n### 切片\n切片（Slice）操作符用来简化经常取指定索引范围的操作\n```python\n>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n>>> L[0:3]\n['Michael', 'Sarah', 'Tracy']\n```\n从索引0开始取，直到索引3为止，但不包括索引3,正好是3个元素.\n\n各种用法示例：\n```python\n# Python支持L[-1]取倒数第一个元素,同样支持倒数切片\n>>> L[-2:]\n['Bob', 'Jack']\n>>> L[-2:-1]\n['Bob']\n\n# 前10个数，每两个取一个：\n>>> L[:10:2]\n[0, 2, 4, 6, 8]\n\n# 所有数，每5个取一个：\n>>> L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n\n# 什么都不写，只写[:]就可以原样复制一个list\n>>> L[:]\n[0, 1, 2, 3, ..., 99]\n\n# tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple\n>>> (0, 1, 2, 3, 4, 5)[:3]\n(0, 1, 2)\n\n#字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：\n>>> 'ABCDEFG'[:3]\n'ABC'\n>>> 'ABCDEFG'[::2]\n'ACEG'\n```\n\n### 迭代\n我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。只要是可迭代对象，无论有无下标，都可以迭代。\n\n判断一个对象是否是可迭代对象：\n```python\nfrom collections import Iterable\nisinstance('abc', Iterable)\n```\n\n### 列表生成式\n感觉没啥用。\n\n### 生成器\n列表元素可以按照某种算法在不断循环的过程中推算出后续元素，不必创建完整的list，节省大量空间。这种一边循环一边计算的机制，叫做generator。\n例如实现斐波那契函数：\n```python\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'\n    \nfor n in fib(6):\n\tprint(n)\n```\n如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator.\n函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。\n\n其实就相当于在yield处有个断点，可以获得当时的yield处的值，供for循环内使用。\n\n## 函数式编程\n函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！\nPython对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。\n\n### 高阶函数\n#### 变量可以指向函数\n把函数本身赋值给变量,即：变量可以指向函数。\n```python\n>>> f = abs\n>>> f(-10)\n10\n```\n说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。\n\n#### 传入函数\n那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数\n```python\ndef add(x, y, f):\n    return f(x) + f(y)\n```\n\n#### map\nmap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。\n```python\n>>> def f(x):\n...     return x * x\n...\n>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n#### reduce\nreduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数**必须接收两个参数**，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：\n```python\nreduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)\n```\n\n#### filter\nfilter()也接收一个函数和一个序列.filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。\n```python\ndef is_odd(n):\n    return n % 2 == 1\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n```\n\n#### sorted\n使用sorted()函数就可以对list进行排序。\nsorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序：\n```python\n>>> sorted([36, 5, -12, 9, -21], key=abs)\n[5, 9, -12, -21, 36]\n```\n**key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：**\n```python\nlist = [36, 5, -12, 9, -21]\nkeys = [36, 5,  12, 9,  21]\n```\n\n### 返回函数\n高阶函数除了接收函数作为参数外，还能将函数作为结果返回。好处是，不需要立即执行，在想要调用的时候执行。\n```python\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n             return i*i\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\n\n>>> f1()\n9\n>>> f2()\n9\n>>> f3()\n9\n```\n本例中，执行count()返回了一个以f函数作为元素的数组，分别赋给f1，f2，f3。这里面执行三个函数的结果都是9，因为外层i在循环的时候并没有执行i*i，当循环完后，i为3，由于闭包性，i=3被保存在栈中，直到函数执行。\n因此，返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n\n### 匿名函数\n```python\nlambda x: x * x\n=>\ndef f(x):\n    return x * x\n```\n\n关键字lambda表示匿名函数，冒号前面的x表示函数参数。\n匿名函数有个限制，就是**只能有一个表达式**，不用写return，返回值就是该表达式的结果。\n匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数\n\n### 装饰器\n#### 不带参数\n在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。\n```python\ndef log(func):\n    def wrapper(*args, **kw):\n    \t# 函数对象有一个__name__属性，可以拿到函数的名字\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n@log\ndef now():\n    print('2015-3-25')\n    \n>>> now()\ncall now():\n2015-3-25\n```\n\n此处把**@log**放到**now()**定义处，相当于执行了\n**now = log(now)**: **now() => wrapper()**\n将原方法作为参数传入。类似于装饰者模式，只不过由于python的动态性，不需要调用新定义的方法，只要调用原方法就可以动态解析。\n\n#### 带参数\n如果log带参数\n```python\ndef log(text):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@log('execute')\ndef now():\n    print('2015-3-25')\n```\n\n首先执行log('execute')，返回的是decorator函数，再调用返回的函数，参数是now函数，返回值最终是wrapper函数。即**now()=>wrapper()**\n\n#### 带来的问题\n上面的过程解析已经说明，最后now()的调用，都转化成了wrapper()的调用。那么，在调用**now.__name__**时，结果就会使wrapper，而不是now。\n因此，需要将**wrapper.__name__ = func.__name__**。可以使用python内置的方法**functools.wraps**\n\n```\nimport functools\ndef log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n# 或者\nimport functools\ndef log(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator  \n```\n\n### 偏函数\n使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单\n\n假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：\n```python\ndef int2(x, base=2):\n    return int(x, base)\n```\n\n我们可以使用**functools.partial**创建一个偏函数，不需要自己定义int2\n```python\n>>> import functools\n>>> int2 = functools.partial(int, base=2)\n>>> int2('1000000')\n64\n>>> int2('1010101')\n85\n```\n简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单\n\n创建偏函数时，实际上可以接收函数对象、\\*args和\\*\\*kw这3个参数.\n```python\nmax2 = functools.partial(max, 10)\n```\n实际上会把10作为\\*args的一部分**自动加到左边**，也就是：\n```python\nmax2(5, 6, 7)\n相当于：\nargs = (10, 5, 6, 7)\nmax(*args)\n```\n\n## 模块\nPython又引入了按目录来组织模块的方法，称为包（Package）。引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。\n请注意，每一个包目录下面都会有一个__init\\_\\_.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init\\_\\_.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块\n\n### 使用模块\n```python\nimport sys\ndef test():\n\tpass\nif __name__=='__main__':\n\ttest()\n```\n导入sys模块后,就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能。\nsys模块有一个argv变量，用list存储了**命令行的所有参数**。argv至少有一个元素，因为第一个参数永远是该.py文件的名称。\n在命令行运行该模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。\n\n作用域：\n- 正常的函数和变量名是公开的（public），可以被直接引用\n- 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途。\n- 类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用。\n\n### 安装第三方模块\n使用pip3 install XXX 安装第三方库\n当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。\n搜索路径存放在sys模块的path变量中\n```python\nimport sys\nprint(sys.path)\n```\n当要添加自己的搜索目录时可以\n1. 直接修改sys.path:**sys.path.append('/Users/xxx/xxx')**\n2. 设置环境变量PYTHONPATH\n\n## 面向对象编程\n### 类和实例\n定义类是通过class关键字，后面紧接着是类名，紧接着是(object)，表示该类是从哪个类继承下来的。\n```python\nclass Student(object)\n\tpass\n```\n\n定义好类，就可以创建出实例了。\n```python\nbart = Student()\n```\n\n可以**自由地给一个实例变量绑定属性**，比如，给实例bart绑定一个name属性：\n```python\nbart.name = 'Zachary'\n```\n和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。\n\n创建实例的时候可以使用特殊的**__init__**方法初始化：\n```python\nclass Student(object):\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n```\n注意：\n1. 注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。\n2. 有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去。\n\n另外：\n1. 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数\n2. 如果是类的方法，不需要传入self，使用类名.方法名调用。和其他语言一样。\n\n### 访问限制\n如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。\n\noc中使用.h和.m定义属性的方式区分共有私有。\nJava中通过public，private的方式区分共有私有。\npython通过__的方式区分共有私有。\n\n以_开头的变量表示：可以访问，但是最好视为私有变量。\n\n### 继承和多态\n继承和多态和其他语言没什么不同，就不重复了。\n\n对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。\n对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了\n\n### 获取对象信息\n#### type\n使用type()函数,判断对象类型\n```python\n>>> import types\n>>> def fn():\n...     pass\n...\n>>> type(fn)==types.FunctionType\nTrue\n>>> type(abs)==types.BuiltinFunctionType\nTrue\n>>> type(lambda x: x)==types.LambdaType\nTrue\n>>> type((x for x in range(10)))==types.GeneratorType\nTrue\n```\n\n#### isinstance()\n使用isinstance()函数,判断class的继承关系\n判断基本类型：\n```python\n>>> isinstance('a', str)\nTrue\n>>> isinstance(123, int)\nTrue\n>>> isinstance(b'a', bytes)\nTrue\n```\n判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：\n```python\n>>> isinstance([1, 2, 3], (list, tuple))\nTrue\n>>> isinstance((1, 2, 3), (list, tuple))\nTrue\n```\n\n#### dir()\n如果要获得一个对象的**所有属性和方法**，可以使用dir()函数，它返回一个包含字符串的list.\n\n仅仅把属性和方法列出来是不够的，配合**getattr()**、**setattr()**以及**hasattr()**，我们可以直接**操作一个对象的状态**：\n```python\n>>> class MyObject(object):\n...     def __init__(self):\n...         self.x = 9\n...     def power(self):\n...         return self.x * self.x\n...\n>>> obj = MyObject()\n```\n紧接着，可以测试该对象的属性：\n```python\n>>> hasattr(obj, 'x') # 有属性'x'吗？\nTrue\n>>> obj.x\n9\n>>> hasattr(obj, 'y') # 有属性'y'吗？\nFalse\n>>> setattr(obj, 'y', 19) # 设置一个属性'y'\n>>> hasattr(obj, 'y') # 有属性'y'吗？\nTrue\n>>> getattr(obj, 'y') # 获取属性'y'\n19\n>>> obj.y # 获取属性'y'\n19\n```\n如果试图获取不存在的属性，会抛出AttributeError的错误\n可以传入一个default参数，如果属性不存在，就返回默认值：\n```python\n>>> getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404\n404\n```\n\n也可以获得对象的方法：\n```python\n>>> hasattr(obj, 'power') # 有属性'power'吗？\nTrue\n>>> getattr(obj, 'power') # 获取属性'power'\n<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>\n>>> fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn\n>>> fn # fn指向obj.power\n<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>\n>>> fn() # 调用fn()与调用obj.power()是一样的\n81\n```\n\n**感觉上，用set，get，has方法和直接设置没什么太大区别。**\n\n### 实例属性和类属性\npython中并没有static修饰符，在一个class中定义的属性，实例和类都可以访问：\n```python\n>>> class Student(object):\n...     name = 'Student'\n...\n>>> s = Student() # 创建实例s\n>>> print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性\nStudent\n>>> print(Student.name) # 打印类的name属性\nStudent\n>>> s.name = 'Michael' # 给实例绑定name属性\n>>> print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性\nMichael\n>>> print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问\nStudent\n>>> del s.name # 如果删除实例的name属性\n>>> print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了\nStudent\n```\n在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。\n\n## 面向对象高级编程\n### 使用__slots__\n我们可以给实例绑定任何属性和方法。\n创建实例：\n```python\nclass Student(object):\n    pass\n```\n\n给实例绑定方法：\n```python\n>>> def set_age(self, age): # 定义一个函数作为实例方法\n...     self.age = age\n...\n>>> from types import MethodType\n>>> s.set_age = MethodType(set_age, s) # 给实例绑定一个方法\n>>> s.set_age(25) # 调用实例方法\n>>> s.age # 测试结果\n25\n```\n**注意：**\n1. 这里使用MethodType方法给实例绑定方法，之后调用的时候就不用设置self了。如果使用s.set_age = set_age的方式绑定，那么调用时要自己传入self变量。 \n2. MethodType()这个方法不要用在给类绑定属性上。\n\n给类绑定方法:\n```python\n>>> def set_score(self, score):\n...     self.score = score\n...\n>>> Student.set_score = set_score\n```\n**注意：**像这样给类绑定方法后，实例变量不用自己传入self了。\n\n如果我们想要限制实例的属性。比如，只允许对Student实例添加name和age属性。我们可以使用__slots__来限制属性。\n```python\nclass Student(object):\n    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称\n```\n使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的,即**__slots__属性并不会被继承**\n\nslots的本质不是限制实例添加属性，而是优化性能。slots绑定的实例属性不保存在dict中，所以在有大量实例存在的情况下能减少hash table的内存开销。不能给实例增加,不能给实例动态添加属性只是__slots__的副作用。\n\n### 使用@property\n类的属性都是暴露出来的，写起来方便，但是没办法检查参数。如果使用get，set方法又显得麻烦。可以使用装饰器(decorator)中的@property装饰器。\n```python\nclass Student(object):\n\n    @property\n    def score(self):\n        return self._score\n\n    @score.setter\n    def score(self, value):\n        if not isinstance(value, int):\n            raise ValueError('score must be an integer!')\n        if value < 0 or value > 100:\n            raise ValueError('score must between 0 ~ 100!')\n        self._score = value\n```\n注意：\n1. 把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值.\n2. 只定义getter方法，不定义setter方法就是一个只读属性。\n\n### 多重继承\npython允许多重继承：\n```python\nclass Dog(Mammal, Runnable):\n    pass\n```\n**如果继承的类有同名方法，按照继承的顺序执行，即先执行Mammal里的，没有再执行Runnable里的。**\n\n在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。\n```python\nclass Dog(Mammal, RunnableMixIn, CarnivorousMixIn):\n    pass\n```\n\n感觉MixIn就是个约定啊，并没有太多实质效果啊=。=\n\n### 定制类\n形如__xxx__的变量或者函数名就要注意，这些在Python中是有特殊用途的。\n\n#### __str__\n怎么才能打印得好看呢？只需要定义好__str__()方法，返回一个好看的字符串就可以了：\n```python\n>>> class Student(object):\n...     def __init__(self, name):\n...         self.name = name\n...     def __str__(self):\n...         return 'Student object (name: %s)' % self.name\n...\n>>> print(Student('Michael'))\nStudent object (name: Michael)\n```\n\n#### __iter__\n如果一个类想被用于**for...in**循环，类似list或tuple那样，就必须实现一个**__iter__()**方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的**__next__()**方法拿到循环的下一个值，直到遇到**StopIteration**错误时退出循环。\n```python\nclass Fib(object):\n    def __init__(self):\n        self.a, self.b = 0, 1 # 初始化两个计数器a，b\n\n    def __iter__(self):\n        return self # 实例本身就是迭代对象，故返回自己\n\n    def __next__(self):\n        self.a, self.b = self.b, self.a + self.b # 计算下一个值\n        if self.a > 100000: # 退出循环的条件\n            raise StopIteration();\n        return self.a # 返回下一个值\n\n>>> for n in Fib():\n...     print(n)\n```\n\n#### __getitem__\n要表现得像list那样按照下标取出元素，需要实现__getitem__()方法。__getitem__()传入的参数可能是一个int，也可能是一个切片对象slice:\n```python\nclass Fib(object):\n    def __getitem__(self, n):\n        if isinstance(n, int): # n是索引\n            a, b = 1, 1\n            for x in range(n):\n                a, b = b, a + b\n            return a\n        if isinstance(n, slice): # n是切片\n            start = n.start\n            stop = n.stop\n            if start is None:\n                start = 0\n            a, b = 1, 1\n            L = []\n            for x in range(stop):\n                if x >= start:\n                    L.append(a)\n                a, b = b, a + b\n            return L\n```\n与之对应的是__setitem__()方法，把对象视作list或dict来对集合赋值。最后，还有一个__delitem__()方法，用于删除某个元素。\n\n#### __getattr__\n正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。\n```python\nclass Student(object):\n\n    def __init__(self):\n        self.name = 'Michael'\n\n    def __getattr__(self, attr):\n        if attr=='score':\n            return 99\n```\n\n当调用**不存在的属性**时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值.\n\n#### __call__\n任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用。\n```python\nclass Student(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self):\n        print('My name is %s.' % self.name)\n\n>>> s = Student('Michael')\n>>> s() # self参数不要传入\nMy name is Michael.\n```\n\n### 枚举类\nPython提供了Enum类来实现这个功能\n```python\nfrom enum import Enum\nMonth = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))\n\nfor name, member in Month.__members__.items():\n    print(name, '=>', member, ',', member.value)\n```\n\nvalue属性则是自动赋给成员的int常量，默认从1开始计数。\n如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：\n\n```python\nfrom enum import Enum, unique\nclass Weekday(Enum):\n    Sun = 0 # Sun的value被设定为0\n    Mon = 1\n    Tue = 2\n    Wed = 3\n    Thu = 4\n    Fri = 5\n    Sat = 6\n```\n\n### 元类\n没看\n\n## IO编程\n### 文件读写\n#### 读文件\n使用Python内置的open()函数，传入文件名和标示符\n```python\n>>> f = open('/Users/test.txt', 'r')\n```\n标示符'r'表示读.\n\n如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：\n```python\n>>> f.read()\n'Hello, world!'\n```\n\n最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的\n```python\n>>> f.close()\n```\n\n由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现：\n```python\ntry:\n    f = open('/path/to/file', 'r')\n    print(f.read())\nfinally:\n    if f:\n        f.close()\n```\n\n但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：\n```python\nwith open('/path/to/file', 'r') as f:\n    print(f.read())\n```\n这和前面的try ... finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。\n\n调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。\n\n如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：\n```python\nfor line in f.readlines():\n    print(line.strip()) # 把末尾的'\\n'删掉\n```\n\n#### 二进制文件\n前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：\n```python\n>>> f = open('/Users/michael/test.jpg', 'rb')\n>>> f.read()\nb'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...' # 十六进制表示的字节\n```\n\n#### 文件读写\n\n阅读: 100273\n读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。\n\n读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。\n\n读文件\n\n要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：\n\n>>> f = open('/Users/michael/test.txt', 'r')\n标示符'r'表示读，这样，我们就成功地打开了一个文件。\n\n如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：\n\n>>> f=open('/Users/michael/notfound.txt', 'r')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/michael/notfound.txt'\n如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：\n\n>>> f.read()\n'Hello, world!'\n最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：\n\n>>> f.close()\n由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现：\n\ntry:\n    f = open('/path/to/file', 'r')\n    print(f.read())\nfinally:\n    if f:\n        f.close()\n但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：\n\nwith open('/path/to/file', 'r') as f:\n    print(f.read())\n这和前面的try ... finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。\n\n调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。\n\n如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：\n\nfor line in f.readlines():\n    print(line.strip()) # 把末尾的'\\n'删掉\nfile-like Object\n\n像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。\n\nStringIO就是在内存中创建的file-like Object，常用作临时缓冲。\n\n#### 二进制文件\n\n前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：\n\n>>> f = open('/Users/michael/test.jpg', 'rb')\n>>> f.read()\nb'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...' # 十六进制表示的字节\n字符编码\n\n#### 字符编码\n要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：\n```python\n>>> f = open('/Users/michael/gbk.txt', 'r', encoding='gbk')\n>>> f.read()\n'测试'\n```\n\n遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：\n```python\n>>> f = open('/Users/michael/gbk.txt', 'r', encoding='gbk', errors='ignore')\n```\n\n#### 写文件\n写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符'w'或者'wb'表示写文本文件或写二进制文件：\n```python\n>>> f = open('/Users/michael/test.txt', 'w')\n>>> f.write('Hello, world!')\n>>> f.close()\n```\n\n你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：\n```python\nwith open('/Users/michael/test.txt', 'w') as f:\n    f.write('Hello, world!')\n```\n\n### StringIO和BytesIO\n读取写内容到内存中，不写了。用到再看。\n\n### 操作文件和目录\n```python\n>>> import os\n# 查看当前目录的绝对路径:\n>>> os.path.abspath('.')\n'/Users/michael'\n# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:\n>>> os.path.join('/Users/michael', 'testdir')\n'/Users/michael/testdir'\n# 然后创建一个目录:\n>>> os.mkdir('/Users/michael/testdir')\n# 删掉一个目录:\n>>> os.rmdir('/Users/michael/testdir')\n```\n把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。\n同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：\n```python\n>>> os.path.split('/Users/michael/testdir/file.txt')\n('/Users/michael/testdir', 'file.txt')\n```\n\n文件操作\n```python\n# 对文件重命名:\n>>> os.rename('test.txt', 'test.py')\n# 删掉文件:\n>>> os.remove('test.py')\n```\n\n### 序列化\n我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。\n序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。\n反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。\n\nPython提供了pickle模块来实现序列化。\n```python\n>>> import pickle\n>>> d = dict(name='Bob', age=20, score=88)\n>>> f = open('dump.txt', 'wb')\n>>> pickle.dump(d, f)\n>>> f.close()\n```\npickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object.\n当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象:\n```python\n>>> f = open('dump.txt', 'rb')\n>>> d = pickle.load(f)\n>>> f.close()\n>>> d\n{'age': 20, 'score': 88, 'name': 'Bob'}\n```\n\n### JSON\nPython内置的json模块提供了非常完善的Python对象到JSON格式的转换。\n```python\n>>> import json\n>>> d = dict(name='Bob', age=20, score=88)\n>>> json.dumps(d)\n'{\"age\": 20, \"score\": 88, \"name\": \"Bob\"}'\n```\ndumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。\n\n要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：\n```python\n>>> json_str = '{\"age\": 20, \"score\": 88, \"name\": \"Bob\"}'\n>>> json.loads(json_str)\n{'age': 20, 'score': 88, 'name': 'Bob'}\n```\n\n## 进程和线程\n### 多进程\n#### multiprocessing\nmultiprocessing模块就是跨平台版本的多进程模块。\nmultiprocessing模块提供了一个Process类来代表一个进程对象\n```python\nfrom multiprocessing import Process\nimport os\n\n# 子进程要执行的代码\ndef run_proc(name):\n    print('Run child process %s (%s)...' % (name, os.getpid()))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Process(target=run_proc, args=('test',))\n    print('Child process will start.')\n    p.start()\n    p.join()\n    print('Child process end.')\n```\n创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。\njoin()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。\n\n#### pool\n如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n```python\nfrom multiprocessing import Pool\nimport os, time, random\n\ndef long_time_task(name):\n    print('Run task %s (%s)...' % (name, os.getpid()))\n    start = time.time()\n    time.sleep(random.random() * 3)\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Pool(4)\n    for i in range(5):\n        p.apply_async(long_time_task, args=(i,))\n    print('Waiting for all subprocesses done...')\n    p.close()\n    p.join()\n    print('All subprocesses done.')\n```\n结果如下：\n```python\nParent process 669.\nWaiting for all subprocesses done...\nRun task 0 (671)...\nRun task 1 (672)...\nRun task 2 (673)...\nRun task 3 (674)...\nTask 2 runs 0.14 seconds.\nRun task 4 (673)...\nTask 1 runs 0.27 seconds.\nTask 3 runs 0.86 seconds.\nTask 0 runs 1.41 seconds.\nTask 4 runs 1.91 seconds.\nAll subprocesses done.\n```\n\n对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。\n注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，这是因为Pool的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：`p = ool(5)`就可以同时跑5个进程。\n\n### 子进程&进程间通信\n到时候再看\n\n## 多线程\n启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n```python\nimport time, threading\n\n# 新线程执行的代码:\ndef loop():\n    print('thread %s is running...' % threading.current_thread().name)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print('thread %s >>> %s' % (threading.current_thread().name, n))\n        time.sleep(1)\n    print('thread %s ended.' % threading.current_thread().name)\n\nprint('thread %s is running...' % threading.current_thread().name)\nt = threading.Thread(target=loop, name='LoopThread')\nt.start()\nt.join()\nprint('thread %s ended.' % threading.current_thread().name)\n```\n执行结果如下:\n\n```python\nthread MainThread is running...\nthread LoopThread is running...\nthread LoopThread >>> 1\nthread LoopThread >>> 2\nthread LoopThread >>> 3\nthread LoopThread >>> 4\nthread LoopThread >>> 5\nthread LoopThread ended.\nthread MainThread ended.\n```\n任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块有个current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2\n\n### Lock\n多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。\n```python\nbalance = 0\nlock = threading.Lock()\n\ndef run_thread(n):\n    for i in range(100000):\n        # 先要获取锁:\n        lock.acquire()\n        try:\n            # 放心地改吧:\n            change_it(n)\n        finally:\n            # 改完了一定要释放锁:\n            lock.release()\n```\n创建一个锁就是通过threading.Lock()来实现.当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try...finally来确保锁一定会被释放。\n\n\n### ThreadLocal\n一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。\n```python\nimport threading\n\n# 创建全局ThreadLocal对象:\nlocal_school = threading.local()\n\ndef process_student():\n    # 获取当前线程关联的student:\n    std = local_school.student\n    print('Hello, %s (in %s)' % (std, threading.current_thread().name))\n\ndef process_thread(name):\n    # 绑定ThreadLocal的student:\n    local_school.student = name\n    process_student()\n\nt1 = threading.Thread(target= process_thread, args=('Alice',), name='Thread-A')\nt2 = threading.Thread(target= process_thread, args=('Bob',), name='Thread-B')\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n```\n执行结果：\n\n```python\nHello, Alice (in Thread-A)\nHello, Bob (in Thread-B)\n```\n\n全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。\n\n可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。\n\nThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。\n\n### 分布式进程\n用到再看\n\n## 正则表达式\n### 基本用法\n- \\d可以匹配一个数字\n- \\w可以匹配一个字母或数字\n- .可以匹配任意字符\n- *表示任意个字符（包括0个）\n- 用+表示至少一个字符\n- 用?表示0个或1个字符\n- 用{n}表示n个字符\n- 用{n,m}表示n-m个字符\n- \\s可以匹配一个空格（也包括Tab等空白符）\n- 要做更精确地匹配，可以用[]表示范围\t\n + [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线\n- [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线\n + (P|p)ython可以匹配'Python'或者'python'\n- ^表示行的开头\n- $表示行的结束\n- ^py$就变成了整行匹配,就只能匹配'py'\n\n### re模块\nPython提供re模块，包含所有正则表达式的功能。\nPython的字符串本身也用\\转义，因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：\n```python\ns = r'ABC\\-001' # Python的字符串\n# 对应的正则表达式字符串不变：\n# 'ABC\\-001'\n```\n\nmatch()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：\n```python\ntest = '用户输入的字符串'\nif re.match(r'正则表达式', test):\n    print('ok')\nelse:\n    print('failed')\n```\n\n### 切分字符串\n```python\n>>> re.split(r'[\\s\\,\\;]+', 'a,b;; c  d')\n['a', 'b', 'c', 'd']\n```\n\n除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：**^(\\d{3})-(\\d{3,8})$**分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：\n```python\n>>> m = re.match(r'^(\\d{3})-(\\d{3,8})$', '010-12345')\n>>> m\n<_sre.SRE_Match object; span=(0, 9), match='010-12345'>\n>>> m.group(0)\n'010-12345'\n>>> m.group(1)\n'010'\n>>> m.group(2)\n'12345'\n```\n注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。\n\n### 贪婪匹配\n正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：\n```python\n>>> re.match(r'^(\\d+)(0*)$', '102300').groups()\n('102300', '')\n```\n由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。\n必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配：\n```python\n>>> re.match(r'^(\\d+?)(0*)$', '102300').groups()\n('1023', '00')\n```\n### 编译\n如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：\n```python\n>>> import re\n# 编译:\n>>> re_telephone = re.compile(r'^(\\d{3})-(\\d{3,8})$')\n# 使用：\n>>> re_telephone.match('010-12345').groups()\n('010', '12345')\n>>> re_telephone.match('010-8086').groups()\n('010', '8086')\n```\n\n## 常用內建模块\n### datetime\n#### 获取当前日期和时间\ndatetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datetime这个类。\n如果仅导入import datetime，则必须引用全名datetime.datetime。\n```python\n>>> from datetime import datetime\n>>> now = datetime.now() # 获取当前datetime\n>>> print(now)\n2015-05-18 16:28:07.198690\n>>> print(type(now))\n<class 'datetime.datetime'>\n```\ndatetime.now()返回当前日期和时间，其类型是datetime。\n\n#### 获取指定日期和时间\n要指定某个日期和时间，我们直接用参数构造一个datetime：\n```python\n>>> from datetime import datetime\n>>> dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime\n>>> print(dt)\n2015-04-19 12:20:00\n```\n\n#### datetime转换为timestamp\n把一个datetime类型转换为timestamp只需要简单调用**timestamp()**方法：\n```python\n>>> from datetime import datetime\n>>> dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建datetime\n>>> dt.timestamp() # 把datetime转换为timestamp\n1429417200.0\n```\n注意Python的timestamp是一个浮点数。如果有小数位，小数位表示毫秒数。\n某些编程语言（如Java和JavaScript）的timestamp使用整数表示毫秒数，这种情况下只需要把timestamp除以1000就得到Python的浮点表示方法.\n\n#### timestamp转换为datetime\n要把timestamp转换为datetime，使用datetime提供的**fromtimestamp()**方法：\n```python\n>>> from datetime import datetime\n>>> t = 1429417200.0\n>>> print(datetime.fromtimestamp(t))\n2015-04-19 12:20:00\n```\n\n#### str转换为datetime\n转换方法是通过**datetime.strptime()**实现，需要一个日期和时间的格式化字符串：\n```python\n>>> from datetime import datetime\n>>> cday = datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S')\n>>> print(cday)\n2015-06-01 18:19:59\n```\n\n#### datetime转换为str\n如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime()实现的\n```python\n>>> from datetime import datetime\n>>> now = datetime.now()\n>>> print(now.strftime('%a, %b %d %H:%M'))\nMon, May 05 16:28\n```\n\n#### datetime加减\n对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，不过需要导入timedelta这个类\n```python\n>>> from datetime import datetime, timedelta\n>>> now = datetime.now()\n>>> now\ndatetime.datetime(2015, 5, 18, 16, 57, 3, 540997)\n>>> now + timedelta(hours=10)\ndatetime.datetime(2015, 5, 19, 2, 57, 3, 540997)\n>>> now - timedelta(days=1)\ndatetime.datetime(2015, 5, 17, 16, 57, 3, 540997)\n>>> now + timedelta(days=2, hours=12)\ndatetime.datetime(2015, 5, 21, 4, 57, 3, 540997)\n```\n使用timedelta你可以很容易地算出前几天和后几天的时刻\n\n### collections\ncollections是Python内建的一个集合模块，提供了许多有用的集合类。\n\n \n\n\n\n\n\n\n最后再次感谢廖老师的辛勤劳动。\n\n\n\n\n\n\n","slug":"python语法","published":1,"updated":"2016-08-21T15:47:21.000Z","_id":"cis4scmus001jweru0klaezlr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>python还是大一时学的第一门课编程课，学的时候由于没有编程基础，最主要的是完全没有好好学，很煎熬。现在真是悔不当初。<br>当时学的是2.x版本，有点过时了，现在看了<a href=\"http://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"external\">廖雪峰的博客</a>的3.5版本的语法介绍，做一些摘录。</p>\n<a id=\"more\"></a>\n<h2 id=\"Python基础\"><a href=\"#Python基础\" class=\"headerlink\" title=\"Python基础\"></a>Python基础</h2><p>Python采用缩进方式,写出来的代码就像下面的样子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># print absolute value of an integer:</span></div><div class=\"line\">a = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">if</span> a &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">    print(a)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(-a)</div></pre></td></tr></table></figure></p>\n<p>以#开头的语句是注释<br>其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块.</p>\n<h3 id=\"数据类型和变量\"><a href=\"#数据类型和变量\" class=\"headerlink\" title=\"数据类型和变量\"></a>数据类型和变量</h3><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本.如果字符串内部既包含’又包含”,可以用转义字符\\来标识。<br>要计算str包含多少个字符，可以用len()函数。<br>%运算符就是用来格式化字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"string\">'Hello, world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)</div><div class=\"line\"><span class=\"string\">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure></p>\n<p>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%.</p>\n<h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>一个布尔值只有True、False两种值<br>布尔值可以用and、or和not运算。</p>\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量</p>\n<h3 id=\"数组和元组\"><a href=\"#数组和元组\" class=\"headerlink\" title=\"数组和元组\"></a>数组和元组</h3><h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>list是一种<strong>可变的</strong>有序的集合，用len()函数可以获得list元素的个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</div></pre></td></tr></table></figure></p>\n<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置<br>list里面的元素的数据类型也可以不同<br>列表可以看成一个多维数组 s[2][1]拿到元素。<br>如果一个list中一个元素也没有，就是一个空的list，它的长度为0</p>\n<h4 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h4><p>另一种有序列表叫元组，但是tuple一旦初始化就不能修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</div></pre></td></tr></table></figure></p>\n<p>因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。<br>当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来.</p>\n<p>如果要定义一个空的tuple，可以写成(),但是，要定义一个只有1个元素的tuple,必须写成如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">t = (<span class=\"number\">1</span>,)</div></pre></td></tr></table></figure></p>\n<p>这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义</p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p>if-else语句实现：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">age = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</div><div class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</div><div class=\"line\">    print(<span class=\"string\">'adult'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</div><div class=\"line\">    print(<span class=\"string\">'teenager'</span>)</div></pre></td></tr></table></figure></p>\n<p>注意不要少写了冒号:<br>完全可以用elif做更细致的判断,elif是else if的缩写</p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h4><p>依次把list或tuple中的每个元素迭代出来<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</div><div class=\"line\">    print(name)</div></pre></td></tr></table></figure></p>\n<p>Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list.在for…in中可以简写成range()<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</div><div class=\"line\">    sum = sum + x</div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure></p>\n<h4 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum = <span class=\"number\">0</span></div><div class=\"line\">n = <span class=\"number\">99</span></div><div class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</div><div class=\"line\">    sum = sum + n</div><div class=\"line\">    n = n - <span class=\"number\">2</span></div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</div></pre></td></tr></table></figure>\n<p><strong>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key</strong></p>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><p>set和dict类似，<strong>也是一组key的集合</strong>，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>要创建一个set，需要<strong>提供一个list作为输入集合</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</div><div class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>重复元素在set中自动被过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</div><div class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h3><h4 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h4><p>Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数</p>\n<h4 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h4><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = abs <span class=\"comment\"># 变量a指向abs函数</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a(<span class=\"number\">-1</span>) <span class=\"comment\"># 所以也可以通过a调用abs函数</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><p>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> -x</div></pre></td></tr></table></figure></p>\n<p>可以使用from abstest import my_abs来导入my_abs()函数，abstest是my_abs所在的文件名.</p>\n<h4 id=\"空函数\"><a href=\"#空函数\" class=\"headerlink\" title=\"空函数\"></a>空函数</h4><p>用pass语句定义一个什么事都不做的空函数，不用pass会报错。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"comment\"># 或者    </span></div><div class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"返回多个值\"><a href=\"#返回多个值\" class=\"headerlink\" title=\"返回多个值\"></a>返回多个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    nx = x + step * math.cos(angle)</div><div class=\"line\">    ny = y - step * math.sin(angle)</div><div class=\"line\">    <span class=\"keyword\">return</span> nx, ny</div></pre></td></tr></table></figure>\n<p>得到返回值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(x, y)</div><div class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(r)</div><div class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</div></pre></td></tr></table></figure></p>\n<p>其实Python函数返回的仍然是单一值.返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p>\n<h3 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h3><h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><p>python不支持重载，可以使用默认参数的方式替代。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    s = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        n = n - <span class=\"number\">1</span></div><div class=\"line\">        s = s * x</div><div class=\"line\">    <span class=\"keyword\">return</span> s</div></pre></td></tr></table></figure></p>\n<p>第二个参数n的默认值设定为2.这样，当我们调用power(5)时，相当于调用power(5, 2).</p>\n<p>但是需要注意：</p>\n<ol>\n<li>必选参数在前，默认参数在后，否则Python的解释器会报错。<strong>如果不按顺序提供参数时，需要写成 参数名=xx 的形式。</strong></li>\n<li>默认参数必须指向不变对象。<br>例如：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=[])</span>:</span></div><div class=\"line\">    L.append(<span class=\"string\">'END'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> L</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当L缺省后，L指向一个数组对象的地址。每次append后，那个地址的数组元素发生改变。</p>\n<p>如果要默认是list，可以这么写：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        L = []</div><div class=\"line\">    L.append(<span class=\"string\">'END'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> L</div></pre></td></tr></table></figure></p>\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><p>通常可以通过list或tuple实现传入不确定数量的参数。python支持可变参数，写法如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">        sum = sum + n * n</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"number\">84</span></div></pre></td></tr></table></figure></p>\n<p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。因此无法再内部函数改变传入的list</strong><br><strong>不是可变参数的话，参数需要一一对应</strong></p>\n<p>如果已经有一个list或者tuple，要调用一个可变参数可以写成这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(nums)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(*nums)</div><div class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(*nums)</div><div class=\"line\"><span class=\"number\">14</span></div></pre></td></tr></table></figure></p>\n<p><strong>nums表示一个数组或者元组<br>*nums表示取出nums这个list里的所有元素，代表多个参数</strong></p>\n<h4 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h4><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</div><div class=\"line\">name: Adam age: <span class=\"number\">45</span> other: &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"><span class=\"comment\"># 另一种简化写法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>kw表示一个dict<br>**kw表示取出kw中的所有键值对元素，代表多个参数</strong></p>\n<p><strong>另外，和上面的list传入的是tuple一样，kw获得的dict是外部传入的一份拷贝，在函数内部对kw的修改不会影响到外部dict。</strong></p>\n<h4 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h4><p>不知道这么脑残的语法有什么意义。</p>\n<h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>切片（Slice）操作符用来简化经常取指定索引范围的操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Jack'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</div><div class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</div></pre></td></tr></table></figure></p>\n<p>从索引0开始取，直到索引3为止，但不包括索引3,正好是3个元素.</p>\n<p>各种用法示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Python支持L[-1]取倒数第一个元素,同样支持倒数切片</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">-2</span>:]</div><div class=\"line\">[<span class=\"string\">'Bob'</span>, <span class=\"string\">'Jack'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">-2</span>:<span class=\"number\">-1</span>]</div><div class=\"line\">[<span class=\"string\">'Bob'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 前10个数，每两个取一个：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[:<span class=\"number\">10</span>:<span class=\"number\">2</span>]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 所有数，每5个取一个：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[::<span class=\"number\">5</span>]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">35</span>, <span class=\"number\">40</span>, <span class=\"number\">45</span>, <span class=\"number\">50</span>, <span class=\"number\">55</span>, <span class=\"number\">60</span>, <span class=\"number\">65</span>, <span class=\"number\">70</span>, <span class=\"number\">75</span>, <span class=\"number\">80</span>, <span class=\"number\">85</span>, <span class=\"number\">90</span>, <span class=\"number\">95</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 什么都不写，只写[:]就可以原样复制一个list</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[:]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ..., <span class=\"number\">99</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)[:<span class=\"number\">3</span>]</div><div class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABCDEFG'</span>[:<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"string\">'ABC'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABCDEFG'</span>[::<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"string\">'ACEG'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><p>我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。只要是可迭代对象，无论有无下标，都可以迭代。</p>\n<p>判断一个对象是否是可迭代对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</div><div class=\"line\">isinstance(<span class=\"string\">'abc'</span>, Iterable)</div></pre></td></tr></table></figure></p>\n<h3 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h3><p>感觉没啥用。</p>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>列表元素可以按照某种算法在不断循环的过程中推算出后续元素，不必创建完整的list，节省大量空间。这种一边循环一边计算的机制，叫做generator。<br>例如实现斐波那契函数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'done'</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fib(<span class=\"number\">6</span>):</div><div class=\"line\">\tprint(n)</div></pre></td></tr></table></figure></p>\n<p>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator.<br>函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p>\n<p>其实就相当于在yield处有个断点，可以获得当时的yield处的值，供for循环内使用。</p>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！<br>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><h4 id=\"变量可以指向函数\"><a href=\"#变量可以指向函数\" class=\"headerlink\" title=\"变量可以指向函数\"></a>变量可以指向函数</h4><p>把函数本身赋值给变量,即：变量可以指向函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = abs</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(<span class=\"number\">-10</span>)</div><div class=\"line\"><span class=\"number\">10</span></div></pre></td></tr></table></figure></p>\n<p>说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。</p>\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</div></pre></td></tr></table></figure></p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> x * x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(r)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</div></pre></td></tr></table></figure></p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数<strong>必须接收两个参数</strong>，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>filter()也接收一个函数和一个序列.filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_odd</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">1</span></div><div class=\"line\">list(filter(is_odd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]))</div><div class=\"line\"><span class=\"comment\"># 结果: [1, 5, 9, 15]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h4><p>使用sorted()函数就可以对list进行排序。<br>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">-12</span>, <span class=\"number\">9</span>, <span class=\"number\">-21</span>], key=abs)</div><div class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">-12</span>, <span class=\"number\">-21</span>, <span class=\"number\">36</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">-12</span>, <span class=\"number\">9</span>, <span class=\"number\">-21</span>]</div><div class=\"line\">keys = [<span class=\"number\">36</span>, <span class=\"number\">5</span>,  <span class=\"number\">12</span>, <span class=\"number\">9</span>,  <span class=\"number\">21</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h3><p>高阶函数除了接收函数作为参数外，还能将函数作为结果返回。好处是，不需要立即执行，在想要调用的时候执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    fs = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span></div><div class=\"line\">             <span class=\"keyword\">return</span> i*i</div><div class=\"line\">        fs.append(f)</div><div class=\"line\">    <span class=\"keyword\">return</span> fs</div><div class=\"line\"></div><div class=\"line\">f1, f2, f3 = count()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1()</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2()</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3()</div><div class=\"line\"><span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>本例中，执行count()返回了一个以f函数作为元素的数组，分别赋给f1，f2，f3。这里面执行三个函数的结果都是9，因为外层i在循环的时候并没有执行i*i，当循环完后，i为3，由于闭包性，i=3被保存在栈中，直到函数执行。<br>因此，返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">lambda</span> x: x * x</div><div class=\"line\">=&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x * x</div></pre></td></tr></table></figure>\n<p>关键字lambda表示匿名函数，冒号前面的x表示函数参数。<br>匿名函数有个限制，就是<strong>只能有一个表达式</strong>，不用写return，返回值就是该表达式的结果。<br>匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><h4 id=\"不带参数\"><a href=\"#不带参数\" class=\"headerlink\" title=\"不带参数\"></a>不带参数</h4><p>在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></div><div class=\"line\">    \t<span class=\"comment\"># 函数对象有一个__name__属性，可以拿到函数的名字</span></div><div class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"><span class=\"meta\">@log</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now()</div><div class=\"line\">call now():</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-3</span><span class=\"number\">-25</span></div></pre></td></tr></table></figure></p>\n<p>此处把<strong>@log</strong>放到<strong>now()</strong>定义处，相当于执行了<br><strong>now = log(now)</strong>: <strong>now() =&gt; wrapper()</strong><br>将原方法作为参数传入。类似于装饰者模式，只不过由于python的动态性，不需要调用新定义的方法，只要调用原方法就可以动态解析。</p>\n<h4 id=\"带参数\"><a href=\"#带参数\" class=\"headerlink\" title=\"带参数\"></a>带参数</h4><p>如果log带参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></div><div class=\"line\">            print(<span class=\"string\">'%s %s():'</span> % (text, func.__name__))</div><div class=\"line\">            <span class=\"keyword\">return</span> func(*args, **kw)</div><div class=\"line\">        <span class=\"keyword\">return</span> wrapper</div><div class=\"line\">    <span class=\"keyword\">return</span> decorator</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log('execute')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</div></pre></td></tr></table></figure></p>\n<p>首先执行log(‘execute’)，返回的是decorator函数，再调用返回的函数，参数是now函数，返回值最终是wrapper函数。即<strong>now()=&gt;wrapper()</strong></p>\n<h4 id=\"带来的问题\"><a href=\"#带来的问题\" class=\"headerlink\" title=\"带来的问题\"></a>带来的问题</h4><p>上面的过程解析已经说明，最后now()的调用，都转化成了wrapper()的调用。那么，在调用<strong>now.<strong>name</strong></strong>时，结果就会使wrapper，而不是now。<br>因此，需要将<strong>wrapper.<strong>name</strong> = func.<strong>name</strong></strong>。可以使用python内置的方法<strong>functools.wraps</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">import functools</div><div class=\"line\">def log(func):</div><div class=\"line\">    @functools.wraps(func)</div><div class=\"line\">    def wrapper(*args, **kw):</div><div class=\"line\">        print(&apos;call %s():&apos; % func.__name__)</div><div class=\"line\">        return func(*args, **kw)</div><div class=\"line\">    return wrapper</div><div class=\"line\"># 或者</div><div class=\"line\">import functools</div><div class=\"line\">def log(text):</div><div class=\"line\">    def decorator(func):</div><div class=\"line\">        @functools.wraps(func)</div><div class=\"line\">        def wrapper(*args, **kw):</div><div class=\"line\">            print(&apos;%s %s():&apos; % (text, func.__name__))</div><div class=\"line\">            return func(*args, **kw)</div><div class=\"line\">        return wrapper</div><div class=\"line\">    return decorator</div></pre></td></tr></table></figure>\n<h3 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h3><p>使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单</p>\n<p>假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">int2</span><span class=\"params\">(x, base=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> int(x, base)</div></pre></td></tr></table></figure></p>\n<p>我们可以使用<strong>functools.partial</strong>创建一个偏函数，不需要自己定义int2<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>)</div><div class=\"line\"><span class=\"number\">64</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1010101'</span>)</div><div class=\"line\"><span class=\"number\">85</span></div></pre></td></tr></table></figure></p>\n<p>简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单</p>\n<p>创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">max2 = functools.partial(max, <span class=\"number\">10</span>)</div></pre></td></tr></table></figure></p>\n<p>实际上会把10作为*args的一部分<strong>自动加到左边</strong>，也就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">max2(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">相当于：</div><div class=\"line\">args = (<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">max(*args)</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Python又引入了按目录来组织模块的方法，称为包（Package）。引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。<br>请注意，每一个包目录下面都会有一个<strong>init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。</strong>init__.py可以是空文件，也可以有Python代码，因为<strong>init</strong>.py本身就是一个模块</p>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">\ttest()</div></pre></td></tr></table></figure>\n<p>导入sys模块后,就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能。<br>sys模块有一个argv变量，用list存储了<strong>命令行的所有参数</strong>。argv至少有一个元素，因为第一个参数永远是该.py文件的名称。<br>在命令行运行该模块文件时，Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong>，而如果在其他地方导入该模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>\n<p>作用域：</p>\n<ul>\n<li>正常的函数和变量名是公开的（public），可以被直接引用</li>\n<li>类似<strong>xxx</strong>这样的变量是特殊变量，可以被直接引用，但是有特殊用途。</li>\n<li>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用。</li>\n</ul>\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>使用pip3 install XXX 安装第三方库<br>当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。<br>搜索路径存放在sys模块的path变量中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">print(sys.path)</div></pre></td></tr></table></figure></p>\n<p>当要添加自己的搜索目录时可以</p>\n<ol>\n<li>直接修改sys.path:<strong>sys.path.append(‘/Users/xxx/xxx’)</strong></li>\n<li>设置环境变量PYTHONPATH</li>\n</ol>\n<h2 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h2><h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>定义类是通过class关键字，后面紧接着是类名，紧接着是(object)，表示该类是从哪个类继承下来的。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Student(object)</div><div class=\"line\">\tpass</div></pre></td></tr></table></figure></p>\n<p>定义好类，就可以创建出实例了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bart = Student()</div></pre></td></tr></table></figure></p>\n<p>可以<strong>自由地给一个实例变量绑定属性</strong>，比如，给实例bart绑定一个name属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bart.name = <span class=\"string\">'Zachary'</span></div></pre></td></tr></table></figure></p>\n<p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。</p>\n<p>创建实例的时候可以使用特殊的<strong><strong>init</strong></strong>方法初始化：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.score = score</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>注意到<strong>init</strong>方法的第一个参数永远是self，表示创建的实例本身，因此，在<strong>init</strong>方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</li>\n<li>有了<strong>init</strong>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<strong>init</strong>方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去。</li>\n</ol>\n<p>另外：</p>\n<ol>\n<li>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数</li>\n<li>如果是类的方法，不需要传入self，使用类名.方法名调用。和其他语言一样。</li>\n</ol>\n<h3 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p>\n<p>oc中使用.h和.m定义属性的方式区分共有私有。<br>Java中通过public，private的方式区分共有私有。<br>python通过__的方式区分共有私有。</p>\n<p>以_开头的变量表示：可以访问，但是最好视为私有变量。</p>\n<h3 id=\"继承和多态\"><a href=\"#继承和多态\" class=\"headerlink\" title=\"继承和多态\"></a>继承和多态</h3><p>继承和多态和其他语言没什么不同，就不重复了。</p>\n<p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。<br>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了</p>\n<h3 id=\"获取对象信息\"><a href=\"#获取对象信息\" class=\"headerlink\" title=\"获取对象信息\"></a>获取对象信息</h3><h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>使用type()函数,判断对象类型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> types</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(fn)==types.FunctionType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(abs)==types.BuiltinFunctionType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">lambda</span> x: x)==types.LambdaType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type((x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)))==types.GeneratorType</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"isinstance\"><a href=\"#isinstance\" class=\"headerlink\" title=\"isinstance()\"></a>isinstance()</h4><p>使用isinstance()函数,判断class的继承关系<br>判断基本类型：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"string\">'a'</span>, str)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"number\">123</span>, int)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"string\">b'a'</span>, bytes)</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<p>判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (list, tuple))</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (list, tuple))</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir()\"></a>dir()</h4><p>如果要获得一个对象的<strong>所有属性和方法</strong>，可以使用dir()函数，它返回一个包含字符串的list.</p>\n<p>仅仅把属性和方法列出来是不够的，配合<strong>getattr()</strong>、<strong>setattr()</strong>以及<strong>hasattr()</strong>，我们可以直接<strong>操作一个对象的状态</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        self.x = <span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> self.x * self.x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = MyObject()</div></pre></td></tr></table></figure></p>\n<p>紧接着，可以测试该对象的属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'x'</span>) <span class=\"comment\"># 有属性'x'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj.x</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 有属性'y'吗？</span></div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>setattr(obj, <span class=\"string\">'y'</span>, <span class=\"number\">19</span>) <span class=\"comment\"># 设置一个属性'y'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 有属性'y'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 获取属性'y'</span></div><div class=\"line\"><span class=\"number\">19</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj.y <span class=\"comment\"># 获取属性'y'</span></div><div class=\"line\"><span class=\"number\">19</span></div></pre></td></tr></table></figure></p>\n<p>如果试图获取不存在的属性，会抛出AttributeError的错误<br>可以传入一个default参数，如果属性不存在，就返回默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'z'</span>, <span class=\"number\">404</span>) <span class=\"comment\"># 获取属性'z'，如果不存在，返回默认值404</span></div><div class=\"line\"><span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>也可以获得对象的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 有属性'power'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 获取属性'power'</span></div><div class=\"line\">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class=\"number\">0x10077a6a0</span>&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn = getattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 获取属性'power'并赋值到变量fn</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn <span class=\"comment\"># fn指向obj.power</span></div><div class=\"line\">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class=\"number\">0x10077a6a0</span>&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn() <span class=\"comment\"># 调用fn()与调用obj.power()是一样的</span></div><div class=\"line\"><span class=\"number\">81</span></div></pre></td></tr></table></figure></p>\n<p><strong>感觉上，用set，get，has方法和直接设置没什么太大区别。</strong></p>\n<h3 id=\"实例属性和类属性\"><a href=\"#实例属性和类属性\" class=\"headerlink\" title=\"实例属性和类属性\"></a>实例属性和类属性</h3><p>python中并没有static修饰符，在一个class中定义的属性，实例和类都可以访问：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"string\">'Student'</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = Student() <span class=\"comment\"># 创建实例s</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student.name) <span class=\"comment\"># 打印类的name属性</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.name = <span class=\"string\">'Michael'</span> <span class=\"comment\"># 给实例绑定name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></div><div class=\"line\">Michael</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student.name) <span class=\"comment\"># 但是类属性并未消失，用Student.name仍然可以访问</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> s.name <span class=\"comment\"># 如果删除实例的name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></div><div class=\"line\">Student</div></pre></td></tr></table></figure></p>\n<p>在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>\n<h2 id=\"面向对象高级编程\"><a href=\"#面向对象高级编程\" class=\"headerlink\" title=\"面向对象高级编程\"></a>面向对象高级编程</h2><h3 id=\"使用slots\"><a href=\"#使用slots\" class=\"headerlink\" title=\"使用slots\"></a>使用<strong>slots</strong></h3><p>我们可以给实例绑定任何属性和方法。<br>创建实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>给实例绑定方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self, age)</span>:</span> <span class=\"comment\"># 定义一个函数作为实例方法</span></div><div class=\"line\"><span class=\"meta\">... </span>    self.age = age</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class=\"comment\"># 给实例绑定一个方法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.set_age(<span class=\"number\">25</span>) <span class=\"comment\"># 调用实例方法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age <span class=\"comment\"># 测试结果</span></div><div class=\"line\"><span class=\"number\">25</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>这里使用MethodType方法给实例绑定方法，之后调用的时候就不用设置self了。如果使用s.set_age = set_age的方式绑定，那么调用时要自己传入self变量。 </li>\n<li>MethodType()这个方法不要用在给类绑定属性上。</li>\n</ol>\n<p>给类绑定方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_score</span><span class=\"params\">(self, score)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    self.score = score</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Student.set_score = set_score</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>像这样给类绑定方法后，实例变量不用自己传入self了。</p>\n<p>如果我们想要限制实例的属性。比如，只允许对Student实例添加name和age属性。我们可以使用<strong>slots</strong>来限制属性。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__ = (<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>) <span class=\"comment\"># 用tuple定义允许绑定的属性名称</span></div></pre></td></tr></table></figure></p>\n<p>使用<strong>slots</strong>要注意，<strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的,即<strong><strong>slots</strong>属性并不会被继承</strong></p>\n<p>slots的本质不是限制实例添加属性，而是优化性能。slots绑定的实例属性不保存在dict中，所以在有大量实例存在的情况下能减少hash table的内存开销。不能给实例增加,不能给实例动态添加属性只是<strong>slots</strong>的副作用。</p>\n<h3 id=\"使用-property\"><a href=\"#使用-property\" class=\"headerlink\" title=\"使用@property\"></a>使用@property</h3><p>类的属性都是暴露出来的，写起来方便，但是没办法检查参数。如果使用get，set方法又显得麻烦。可以使用装饰器(decorator)中的@property装饰器。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._score</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @score.setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">100</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0 ~ 100!'</span>)</div><div class=\"line\">        self._score = value</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值.</li>\n<li>只定义getter方法，不定义setter方法就是一个只读属性。</li>\n</ol>\n<h3 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h3><p>python允许多重继承：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal, Runnable)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p><strong>如果继承的类有同名方法，按照继承的顺序执行，即先执行Mammal里的，没有再执行Runnable里的。</strong></p>\n<p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal, RunnableMixIn, CarnivorousMixIn)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>感觉MixIn就是个约定啊，并没有太多实质效果啊=。=</p>\n<h3 id=\"定制类\"><a href=\"#定制类\" class=\"headerlink\" title=\"定制类\"></a>定制类</h3><p>形如<strong>xxx</strong>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p>\n<h4 id=\"str\"><a href=\"#str\" class=\"headerlink\" title=\"str\"></a><strong>str</strong></h4><p>怎么才能打印得好看呢？只需要定义好<strong>str</strong>()方法，返回一个好看的字符串就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        self.name = name</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> <span class=\"string\">'Student object (name: %s)'</span> % self.name</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student(<span class=\"string\">'Michael'</span>))</div><div class=\"line\">Student object (name: Michael)</div></pre></td></tr></table></figure></p>\n<h4 id=\"iter\"><a href=\"#iter\" class=\"headerlink\" title=\"iter\"></a><strong>iter</strong></h4><p>如果一个类想被用于<strong>for…in</strong>循环，类似list或tuple那样，就必须实现一个<strong><strong>iter</strong>()</strong>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<strong><strong>next</strong>()</strong>方法拿到循环的下一个值，直到遇到<strong>StopIteration</strong>错误时退出循环。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"comment\"># 初始化两个计数器a，b</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self <span class=\"comment\"># 实例本身就是迭代对象，故返回自己</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b = self.b, self.a + self.b <span class=\"comment\"># 计算下一个值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.a &gt; <span class=\"number\">100000</span>: <span class=\"comment\"># 退出循环的条件</span></div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration();</div><div class=\"line\">        <span class=\"keyword\">return</span> self.a <span class=\"comment\"># 返回下一个值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fib():</div><div class=\"line\"><span class=\"meta\">... </span>    print(n)</div></pre></td></tr></table></figure></p>\n<h4 id=\"getitem\"><a href=\"#getitem\" class=\"headerlink\" title=\"getitem\"></a><strong>getitem</strong></h4><p>要表现得像list那样按照下标取出元素，需要实现<strong>getitem</strong>()方法。<strong>getitem</strong>()传入的参数可能是一个int，也可能是一个切片对象slice:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, n)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(n, int): <span class=\"comment\"># n是索引</span></div><div class=\"line\">            a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">                a, b = b, a + b</div><div class=\"line\">            <span class=\"keyword\">return</span> a</div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(n, slice): <span class=\"comment\"># n是切片</span></div><div class=\"line\">            start = n.start</div><div class=\"line\">            stop = n.stop</div><div class=\"line\">            <span class=\"keyword\">if</span> start <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                start = <span class=\"number\">0</span></div><div class=\"line\">            a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">            L = []</div><div class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(stop):</div><div class=\"line\">                <span class=\"keyword\">if</span> x &gt;= start:</div><div class=\"line\">                    L.append(a)</div><div class=\"line\">                a, b = b, a + b</div><div class=\"line\">            <span class=\"keyword\">return</span> L</div></pre></td></tr></table></figure></p>\n<p>与之对应的是<strong>setitem</strong>()方法，把对象视作list或dict来对集合赋值。最后，还有一个<strong>delitem</strong>()方法，用于删除某个元素。</p>\n<h4 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"getattr\"></a><strong>getattr</strong></h4><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个<strong>getattr</strong>()方法，动态返回一个属性。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'Michael'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> attr==<span class=\"string\">'score'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">99</span></div></pre></td></tr></table></figure></p>\n<p>当调用<strong>不存在的属性</strong>时，比如score，Python解释器会试图调用<strong>getattr</strong>(self, ‘score’)来尝试获得属性，这样，我们就有机会返回score的值.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a><strong>call</strong></h4><p>任何类，只需要定义一个<strong>call</strong>()方法，就可以直接对实例进行调用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'My name is %s.'</span> % self.name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = Student(<span class=\"string\">'Michael'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s() <span class=\"comment\"># self参数不要传入</span></div><div class=\"line\">My name <span class=\"keyword\">is</span> Michael.</div></pre></td></tr></table></figure></p>\n<h3 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h3><p>Python提供了Enum类来实现这个功能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</div><div class=\"line\">Month = Enum(<span class=\"string\">'Month'</span>, (<span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Mar'</span>, <span class=\"string\">'Apr'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'Jun'</span>, <span class=\"string\">'Jul'</span>, <span class=\"string\">'Aug'</span>, <span class=\"string\">'Sep'</span>, <span class=\"string\">'Oct'</span>, <span class=\"string\">'Nov'</span>, <span class=\"string\">'Dec'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> name, member <span class=\"keyword\">in</span> Month.__members__.items():</div><div class=\"line\">    print(name, <span class=\"string\">'=&gt;'</span>, member, <span class=\"string\">','</span>, member.value)</div></pre></td></tr></table></figure></p>\n<p>value属性则是自动赋给成员的int常量，默认从1开始计数。<br>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum, unique</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Weekday</span><span class=\"params\">(Enum)</span>:</span></div><div class=\"line\">    Sun = <span class=\"number\">0</span> <span class=\"comment\"># Sun的value被设定为0</span></div><div class=\"line\">    Mon = <span class=\"number\">1</span></div><div class=\"line\">    Tue = <span class=\"number\">2</span></div><div class=\"line\">    Wed = <span class=\"number\">3</span></div><div class=\"line\">    Thu = <span class=\"number\">4</span></div><div class=\"line\">    Fri = <span class=\"number\">5</span></div><div class=\"line\">    Sat = <span class=\"number\">6</span></div></pre></td></tr></table></figure>\n<h3 id=\"元类\"><a href=\"#元类\" class=\"headerlink\" title=\"元类\"></a>元类</h3><p>没看</p>\n<h2 id=\"IO编程\"><a href=\"#IO编程\" class=\"headerlink\" title=\"IO编程\"></a>IO编程</h2><h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><p>使用Python内置的open()函数，传入文件名和标示符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/test.txt'</span>, <span class=\"string\">'r'</span>)</div></pre></td></tr></table></figure></p>\n<p>标示符’r’表示读.</p>\n<p>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'Hello, world!'</span></div></pre></td></tr></table></figure></p>\n<p>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    f = open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\">    print(f.read())</div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span> f:</div><div class=\"line\">        f.close()</div></pre></td></tr></table></figure></p>\n<p>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    print(f.read())</div></pre></td></tr></table></figure></p>\n<p>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>\n<p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>\n<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</div><div class=\"line\">    print(line.strip()) <span class=\"comment\"># 把末尾的'\\n'删掉</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h4><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/test.jpg'</span>, <span class=\"string\">'rb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">b'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...'</span> <span class=\"comment\"># 十六进制表示的字节</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"文件读写-1\"><a href=\"#文件读写-1\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><p>阅读: 100273<br>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p>\n<p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>\n<p>读文件</p>\n<p>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f = open(‘/Users/michael/test.txt’, ‘r’)<br>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f=open(‘/Users/michael/notfound.txt’, ‘r’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>FileNotFoundError: [Errno 2] No such file or directory: ‘/Users/michael/notfound.txt’<br>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</module></stdin></p>\n<p>f.read()<br>‘Hello, world!’<br>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p>\n<p>f.close()<br>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>try:<br>    f = open(‘/path/to/file’, ‘r’)<br>    print(f.read())<br>finally:<br>    if f:<br>        f.close()<br>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：</p>\n<p>with open(‘/path/to/file’, ‘r’) as f:<br>    print(f.read())<br>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>\n<p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>\n<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>\n<p>for line in f.readlines():<br>    print(line.strip()) # 把末尾的’\\n’删掉<br>file-like Object</p>\n<p>像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</p>\n<p>StringIO就是在内存中创建的file-like Object，常用作临时缓冲。</p>\n<h4 id=\"二进制文件-1\"><a href=\"#二进制文件-1\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h4><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f = open(‘/Users/michael/test.jpg’, ‘rb’)<br>f.read()<br>b’\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00…’ # 十六进制表示的字节<br>字符编码</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4><p>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/gbk.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'gbk'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'测试'</span></div></pre></td></tr></table></figure></p>\n<p>遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/gbk.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'gbk'</span>, errors=<span class=\"string\">'ignore'</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/test.txt'</span>, <span class=\"string\">'w'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(<span class=\"string\">'Hello, world!'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/michael/test.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(<span class=\"string\">'Hello, world!'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"StringIO和BytesIO\"><a href=\"#StringIO和BytesIO\" class=\"headerlink\" title=\"StringIO和BytesIO\"></a>StringIO和BytesIO</h3><p>读取写内容到内存中，不写了。用到再看。</p>\n<h3 id=\"操作文件和目录\"><a href=\"#操作文件和目录\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"comment\"># 查看当前目录的绝对路径:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.abspath(<span class=\"string\">'.'</span>)</div><div class=\"line\"><span class=\"string\">'/Users/michael'</span></div><div class=\"line\"><span class=\"comment\"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.join(<span class=\"string\">'/Users/michael'</span>, <span class=\"string\">'testdir'</span>)</div><div class=\"line\"><span class=\"string\">'/Users/michael/testdir'</span></div><div class=\"line\"><span class=\"comment\"># 然后创建一个目录:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.mkdir(<span class=\"string\">'/Users/michael/testdir'</span>)</div><div class=\"line\"><span class=\"comment\"># 删掉一个目录:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rmdir(<span class=\"string\">'/Users/michael/testdir'</span>)</div></pre></td></tr></table></figure>\n<p>把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。<br>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.split(<span class=\"string\">'/Users/michael/testdir/file.txt'</span>)</div><div class=\"line\">(<span class=\"string\">'/Users/michael/testdir'</span>, <span class=\"string\">'file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<p>文件操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 对文件重命名:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'test.py'</span>)</div><div class=\"line\"><span class=\"comment\"># 删掉文件:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.remove(<span class=\"string\">'test.py'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。<br>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p>\n<p>Python提供了pickle模块来实现序列化。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> pickle</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict(name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">20</span>, score=<span class=\"number\">88</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'dump.txt'</span>, <span class=\"string\">'wb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pickle.dump(d, f)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object.<br>当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'dump.txt'</span>, <span class=\"string\">'rb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = pickle.load(f)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">&#123;<span class=\"string\">'age'</span>: <span class=\"number\">20</span>, <span class=\"string\">'score'</span>: <span class=\"number\">88</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>Python内置的json模块提供了非常完善的Python对象到JSON格式的转换。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict(name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">20</span>, score=<span class=\"number\">88</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(d)</div><div class=\"line\"><span class=\"string\">'&#123;\"age\": 20, \"score\": 88, \"name\": \"Bob\"&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>dumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。</p>\n<p>要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json_str = <span class=\"string\">'&#123;\"age\": 20, \"score\": 88, \"name\": \"Bob\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(json_str)</div><div class=\"line\">&#123;<span class=\"string\">'age'</span>: <span class=\"number\">20</span>, <span class=\"string\">'score'</span>: <span class=\"number\">88</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><h4 id=\"multiprocessing\"><a href=\"#multiprocessing\" class=\"headerlink\" title=\"multiprocessing\"></a>multiprocessing</h4><p>multiprocessing模块就是跨平台版本的多进程模块。<br>multiprocessing模块提供了一个Process类来代表一个进程对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 子进程要执行的代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_proc</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run child process %s (%s)...'</span> % (name, os.getpid()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> % os.getpid())</div><div class=\"line\">    p = Process(target=run_proc, args=(<span class=\"string\">'test'</span>,))</div><div class=\"line\">    print(<span class=\"string\">'Child process will start.'</span>)</div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'Child process end.'</span>)</div></pre></td></tr></table></figure></p>\n<p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。<br>join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p>\n<h4 id=\"pool\"><a href=\"#pool\" class=\"headerlink\" title=\"pool\"></a>pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</div><div class=\"line\"><span class=\"keyword\">import</span> os, time, random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run task %s (%s)...'</span> % (name, os.getpid()))</div><div class=\"line\">    start = time.time()</div><div class=\"line\">    time.sleep(random.random() * <span class=\"number\">3</span>)</div><div class=\"line\">    end = time.time()</div><div class=\"line\">    print(<span class=\"string\">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> % os.getpid())</div><div class=\"line\">    p = Pool(<span class=\"number\">4</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</div><div class=\"line\">        p.apply_async(long_time_task, args=(i,))</div><div class=\"line\">    print(<span class=\"string\">'Waiting for all subprocesses done...'</span>)</div><div class=\"line\">    p.close()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'All subprocesses done.'</span>)</div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Parent process <span class=\"number\">669.</span></div><div class=\"line\">Waiting <span class=\"keyword\">for</span> all subprocesses done...</div><div class=\"line\">Run task <span class=\"number\">0</span> (<span class=\"number\">671</span>)...</div><div class=\"line\">Run task <span class=\"number\">1</span> (<span class=\"number\">672</span>)...</div><div class=\"line\">Run task <span class=\"number\">2</span> (<span class=\"number\">673</span>)...</div><div class=\"line\">Run task <span class=\"number\">3</span> (<span class=\"number\">674</span>)...</div><div class=\"line\">Task <span class=\"number\">2</span> runs <span class=\"number\">0.14</span> seconds.</div><div class=\"line\">Run task <span class=\"number\">4</span> (<span class=\"number\">673</span>)...</div><div class=\"line\">Task <span class=\"number\">1</span> runs <span class=\"number\">0.27</span> seconds.</div><div class=\"line\">Task <span class=\"number\">3</span> runs <span class=\"number\">0.86</span> seconds.</div><div class=\"line\">Task <span class=\"number\">0</span> runs <span class=\"number\">1.41</span> seconds.</div><div class=\"line\">Task <span class=\"number\">4</span> runs <span class=\"number\">1.91</span> seconds.</div><div class=\"line\">All subprocesses done.</div></pre></td></tr></table></figure></p>\n<p>对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。<br>注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，这是因为Pool的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：<code>p = ool(5)</code>就可以同时跑5个进程。</p>\n<h3 id=\"子进程-amp-进程间通信\"><a href=\"#子进程-amp-进程间通信\" class=\"headerlink\" title=\"子进程&amp;进程间通信\"></a>子进程&amp;进程间通信</h3><p>到时候再看</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新线程执行的代码:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'thread %s is running...'</span> % threading.current_thread().name)</div><div class=\"line\">    n = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">        print(<span class=\"string\">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">'thread %s ended.'</span> % threading.current_thread().name)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'thread %s is running...'</span> % threading.current_thread().name)</div><div class=\"line\">t = threading.Thread(target=loop, name=<span class=\"string\">'LoopThread'</span>)</div><div class=\"line\">t.start()</div><div class=\"line\">t.join()</div><div class=\"line\">print(<span class=\"string\">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure></p>\n<p>执行结果如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">thread MainThread <span class=\"keyword\">is</span> running...</div><div class=\"line\">thread LoopThread <span class=\"keyword\">is</span> running...</div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">1</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">2</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">3</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">4</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">5</span></div><div class=\"line\">thread LoopThread ended.</div><div class=\"line\">thread MainThread ended.</div></pre></td></tr></table></figure>\n<p>任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块有个current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">balance = <span class=\"number\">0</span></div><div class=\"line\">lock = threading.Lock()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100000</span>):</div><div class=\"line\">        <span class=\"comment\"># 先要获取锁:</span></div><div class=\"line\">        lock.acquire()</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"comment\"># 放心地改吧:</span></div><div class=\"line\">            change_it(n)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            <span class=\"comment\"># 改完了一定要释放锁:</span></div><div class=\"line\">            lock.release()</div></pre></td></tr></table></figure></p>\n<p>创建一个锁就是通过threading.Lock()来实现.当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try…finally来确保锁一定会被释放。</p>\n<h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建全局ThreadLocal对象:</span></div><div class=\"line\">local_school = threading.local()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 获取当前线程关联的student:</span></div><div class=\"line\">    std = local_school.student</div><div class=\"line\">    print(<span class=\"string\">'Hello, %s (in %s)'</span> % (std, threading.current_thread().name))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 绑定ThreadLocal的student:</span></div><div class=\"line\">    local_school.student = name</div><div class=\"line\">    process_student()</div><div class=\"line\"></div><div class=\"line\">t1 = threading.Thread(target= process_thread, args=(<span class=\"string\">'Alice'</span>,), name=<span class=\"string\">'Thread-A'</span>)</div><div class=\"line\">t2 = threading.Thread(target= process_thread, args=(<span class=\"string\">'Bob'</span>,), name=<span class=\"string\">'Thread-B'</span>)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div></pre></td></tr></table></figure></p>\n<p>执行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello, Alice (<span class=\"keyword\">in</span> Thread-A)</div><div class=\"line\">Hello, Bob (<span class=\"keyword\">in</span> Thread-B)</div></pre></td></tr></table></figure>\n<p>全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。</p>\n<p>可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。</p>\n<p>ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p>\n<h3 id=\"分布式进程\"><a href=\"#分布式进程\" class=\"headerlink\" title=\"分布式进程\"></a>分布式进程</h3><p>用到再看</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>\\d可以匹配一个数字</li>\n<li>\\w可以匹配一个字母或数字</li>\n<li>.可以匹配任意字符</li>\n<li>*表示任意个字符（包括0个）</li>\n<li>用+表示至少一个字符</li>\n<li>用?表示0个或1个字符</li>\n<li>用{n}表示n个字符</li>\n<li>用{n,m}表示n-m个字符</li>\n<li>\\s可以匹配一个空格（也包括Tab等空白符）</li>\n<li>要做更精确地匹配，可以用[]表示范围    <ul>\n<li>[0-9a-zA-Z_]可以匹配一个数字、字母或者下划线</li>\n</ul>\n</li>\n<li>[0-9a-zA-Z_]可以匹配一个数字、字母或者下划线<ul>\n<li>(P|p)ython可以匹配’Python’或者’python’</li>\n</ul>\n</li>\n<li>^表示行的开头</li>\n<li>$表示行的结束</li>\n<li>^py$就变成了整行匹配,就只能匹配’py’</li>\n</ul>\n<h3 id=\"re模块\"><a href=\"#re模块\" class=\"headerlink\" title=\"re模块\"></a>re模块</h3><p>Python提供re模块，包含所有正则表达式的功能。<br>Python的字符串本身也用\\转义，因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = <span class=\"string\">r'ABC\\-001'</span> <span class=\"comment\"># Python的字符串</span></div><div class=\"line\"><span class=\"comment\"># 对应的正则表达式字符串不变：</span></div><div class=\"line\"><span class=\"comment\"># 'ABC\\-001'</span></div></pre></td></tr></table></figure></p>\n<p>match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = <span class=\"string\">'用户输入的字符串'</span></div><div class=\"line\"><span class=\"keyword\">if</span> re.match(<span class=\"string\">r'正则表达式'</span>, test):</div><div class=\"line\">    print(<span class=\"string\">'ok'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'failed'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"切分字符串\"><a href=\"#切分字符串\" class=\"headerlink\" title=\"切分字符串\"></a>切分字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.split(<span class=\"string\">r'[\\s\\,\\;]+'</span>, <span class=\"string\">'a,b;; c  d'</span>)</div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]</div></pre></td></tr></table></figure>\n<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：<strong>^(\\d{3})-(\\d{3,8})$</strong>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = re.match(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>, <span class=\"string\">'010-12345'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m</div><div class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">9</span>), match=<span class=\"string\">'010-12345'</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"string\">'010-12345'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"string\">'010'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"string\">'12345'</span></div></pre></td></tr></table></figure></p>\n<p>注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。</p>\n<h3 id=\"贪婪匹配\"><a href=\"#贪婪匹配\" class=\"headerlink\" title=\"贪婪匹配\"></a>贪婪匹配</h3><p>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.match(<span class=\"string\">r'^(\\d+)(0*)$'</span>, <span class=\"string\">'102300'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'102300'</span>, <span class=\"string\">''</span>)</div></pre></td></tr></table></figure></p>\n<p>由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。<br>必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.match(<span class=\"string\">r'^(\\d+?)(0*)$'</span>, <span class=\"string\">'102300'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'1023'</span>, <span class=\"string\">'00'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"comment\"># 编译:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>)</div><div class=\"line\"><span class=\"comment\"># 使用：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone.match(<span class=\"string\">'010-12345'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'12345'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone.match(<span class=\"string\">'010-8086'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'8086'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用內建模块\"><a href=\"#常用內建模块\" class=\"headerlink\" title=\"常用內建模块\"></a>常用內建模块</h2><h3 id=\"datetime\"><a href=\"#datetime\" class=\"headerlink\" title=\"datetime\"></a>datetime</h3><h4 id=\"获取当前日期和时间\"><a href=\"#获取当前日期和时间\" class=\"headerlink\" title=\"获取当前日期和时间\"></a>获取当前日期和时间</h4><p>datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datetime这个类。<br>如果仅导入import datetime，则必须引用全名datetime.datetime。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now() <span class=\"comment\"># 获取当前datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(now)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-05</span><span class=\"number\">-18</span> <span class=\"number\">16</span>:<span class=\"number\">28</span>:<span class=\"number\">07.198690</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(now))</div><div class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">datetime</span>.<span class=\"title\">datetime</span>'&gt;</span></div></pre></td></tr></table></figure></p>\n<p>datetime.now()返回当前日期和时间，其类型是datetime。</p>\n<h4 id=\"获取指定日期和时间\"><a href=\"#获取指定日期和时间\" class=\"headerlink\" title=\"获取指定日期和时间\"></a>获取指定日期和时间</h4><p>要指定某个日期和时间，我们直接用参数构造一个datetime：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt = datetime(<span class=\"number\">2015</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>) <span class=\"comment\"># 用指定日期时间创建datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dt)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-19</span> <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime转换为timestamp\"><a href=\"#datetime转换为timestamp\" class=\"headerlink\" title=\"datetime转换为timestamp\"></a>datetime转换为timestamp</h4><p>把一个datetime类型转换为timestamp只需要简单调用<strong>timestamp()</strong>方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt = datetime(<span class=\"number\">2015</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>) <span class=\"comment\"># 用指定日期时间创建datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt.timestamp() <span class=\"comment\"># 把datetime转换为timestamp</span></div><div class=\"line\"><span class=\"number\">1429417200.0</span></div></pre></td></tr></table></figure></p>\n<p>注意Python的timestamp是一个浮点数。如果有小数位，小数位表示毫秒数。<br>某些编程语言（如Java和JavaScript）的timestamp使用整数表示毫秒数，这种情况下只需要把timestamp除以1000就得到Python的浮点表示方法.</p>\n<h4 id=\"timestamp转换为datetime\"><a href=\"#timestamp转换为datetime\" class=\"headerlink\" title=\"timestamp转换为datetime\"></a>timestamp转换为datetime</h4><p>要把timestamp转换为datetime，使用datetime提供的<strong>fromtimestamp()</strong>方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = <span class=\"number\">1429417200.0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t))</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-19</span> <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"str转换为datetime\"><a href=\"#str转换为datetime\" class=\"headerlink\" title=\"str转换为datetime\"></a>str转换为datetime</h4><p>转换方法是通过<strong>datetime.strptime()</strong>实现，需要一个日期和时间的格式化字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cday = datetime.strptime(<span class=\"string\">'2015-6-1 18:19:59'</span>, <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(cday)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-06</span><span class=\"number\">-01</span> <span class=\"number\">18</span>:<span class=\"number\">19</span>:<span class=\"number\">59</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime转换为str\"><a href=\"#datetime转换为str\" class=\"headerlink\" title=\"datetime转换为str\"></a>datetime转换为str</h4><p>如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime()实现的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(now.strftime(<span class=\"string\">'%a, %b %d %H:%M'</span>))</div><div class=\"line\">Mon, May <span class=\"number\">05</span> <span class=\"number\">16</span>:<span class=\"number\">28</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime加减\"><a href=\"#datetime加减\" class=\"headerlink\" title=\"datetime加减\"></a>datetime加减</h4><p>对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，不过需要导入timedelta这个类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">18</span>, <span class=\"number\">16</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now + timedelta(hours=<span class=\"number\">10</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">2</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now - timedelta(days=<span class=\"number\">1</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">17</span>, <span class=\"number\">16</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now + timedelta(days=<span class=\"number\">2</span>, hours=<span class=\"number\">12</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div></pre></td></tr></table></figure></p>\n<p>使用timedelta你可以很容易地算出前几天和后几天的时刻</p>\n<h3 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h3><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p>\n<p>最后再次感谢廖老师的辛勤劳动。</p>\n","excerpt":"<p>python还是大一时学的第一门课编程课，学的时候由于没有编程基础，最主要的是完全没有好好学，很煎熬。现在真是悔不当初。<br>当时学的是2.x版本，有点过时了，现在看了<a href=\"http://www.liaoxuefeng.com/\">廖雪峰的博客</a>的3.5版本的语法介绍，做一些摘录。</p>","more":"<h2 id=\"Python基础\"><a href=\"#Python基础\" class=\"headerlink\" title=\"Python基础\"></a>Python基础</h2><p>Python采用缩进方式,写出来的代码就像下面的样子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># print absolute value of an integer:</span></div><div class=\"line\">a = <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">if</span> a &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">    print(a)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(-a)</div></pre></td></tr></table></figure></p>\n<p>以#开头的语句是注释<br>其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块.</p>\n<h3 id=\"数据类型和变量\"><a href=\"#数据类型和变量\" class=\"headerlink\" title=\"数据类型和变量\"></a>数据类型和变量</h3><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本.如果字符串内部既包含’又包含”,可以用转义字符\\来标识。<br>要计算str包含多少个字符，可以用len()函数。<br>%运算符就是用来格式化字符串，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"string\">'Hello, world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)</div><div class=\"line\"><span class=\"string\">'Hi, Michael, you have $1000000.'</span></div></pre></td></tr></table></figure></p>\n<p>有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%.</p>\n<h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>一个布尔值只有True、False两种值<br>布尔值可以用and、or和not运算。</p>\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量</p>\n<h3 id=\"数组和元组\"><a href=\"#数组和元组\" class=\"headerlink\" title=\"数组和元组\"></a>数组和元组</h3><h4 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h4><p>list是一种<strong>可变的</strong>有序的集合，用len()函数可以获得list元素的个数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</div></pre></td></tr></table></figure></p>\n<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置<br>list里面的元素的数据类型也可以不同<br>列表可以看成一个多维数组 s[2][1]拿到元素。<br>如果一个list中一个元素也没有，就是一个空的list，它的长度为0</p>\n<h4 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h4><p>另一种有序列表叫元组，但是tuple一旦初始化就不能修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</div></pre></td></tr></table></figure></p>\n<p>因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。<br>当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来.</p>\n<p>如果要定义一个空的tuple，可以写成(),但是，要定义一个只有1个元素的tuple,必须写成如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">t = (<span class=\"number\">1</span>,)</div></pre></td></tr></table></figure></p>\n<p>这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义</p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p>if-else语句实现：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">age = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</div><div class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</div><div class=\"line\">    print(<span class=\"string\">'adult'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'your age is'</span>, age)</div><div class=\"line\">    print(<span class=\"string\">'teenager'</span>)</div></pre></td></tr></table></figure></p>\n<p>注意不要少写了冒号:<br>完全可以用elif做更细致的判断,elif是else if的缩写</p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h4><p>依次把list或tuple中的每个元素迭代出来<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</div><div class=\"line\">    print(name)</div></pre></td></tr></table></figure></p>\n<p>Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list.在for…in中可以简写成range()<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>):</div><div class=\"line\">    sum = sum + x</div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure></p>\n<h4 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum = <span class=\"number\">0</span></div><div class=\"line\">n = <span class=\"number\">99</span></div><div class=\"line\"><span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</div><div class=\"line\">    sum = sum + n</div><div class=\"line\">    n = n - <span class=\"number\">2</span></div><div class=\"line\">print(sum)</div></pre></td></tr></table></figure>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><h4 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</div></pre></td></tr></table></figure>\n<p><strong>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key</strong></p>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><p>set和dict类似，<strong>也是一组key的集合</strong>，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>要创建一个set，需要<strong>提供一个list作为输入集合</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</div><div class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>重复元素在set中自动被过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</div><div class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h3><h4 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h4><p>Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数</p>\n<h4 id=\"函数名\"><a href=\"#函数名\" class=\"headerlink\" title=\"函数名\"></a>函数名</h4><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = abs <span class=\"comment\"># 变量a指向abs函数</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a(<span class=\"number\">-1</span>) <span class=\"comment\"># 所以也可以通过a调用abs函数</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><p>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> -x</div></pre></td></tr></table></figure></p>\n<p>可以使用from abstest import my_abs来导入my_abs()函数，abstest是my_abs所在的文件名.</p>\n<h4 id=\"空函数\"><a href=\"#空函数\" class=\"headerlink\" title=\"空函数\"></a>空函数</h4><p>用pass语句定义一个什么事都不做的空函数，不用pass会报错。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"comment\"># 或者    </span></div><div class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"返回多个值\"><a href=\"#返回多个值\" class=\"headerlink\" title=\"返回多个值\"></a>返回多个值</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    nx = x + step * math.cos(angle)</div><div class=\"line\">    ny = y - step * math.sin(angle)</div><div class=\"line\">    <span class=\"keyword\">return</span> nx, ny</div></pre></td></tr></table></figure>\n<p>得到返回值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(x, y)</div><div class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(r)</div><div class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</div></pre></td></tr></table></figure></p>\n<p>其实Python函数返回的仍然是单一值.返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p>\n<h3 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h3><h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><p>python不支持重载，可以使用默认参数的方式替代。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    s = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</div><div class=\"line\">        n = n - <span class=\"number\">1</span></div><div class=\"line\">        s = s * x</div><div class=\"line\">    <span class=\"keyword\">return</span> s</div></pre></td></tr></table></figure></p>\n<p>第二个参数n的默认值设定为2.这样，当我们调用power(5)时，相当于调用power(5, 2).</p>\n<p>但是需要注意：</p>\n<ol>\n<li>必选参数在前，默认参数在后，否则Python的解释器会报错。<strong>如果不按顺序提供参数时，需要写成 参数名=xx 的形式。</strong></li>\n<li>默认参数必须指向不变对象。<br>例如：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=[])</span>:</span></div><div class=\"line\">    L.append(<span class=\"string\">'END'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> L</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</div><div class=\"line\">[<span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>, <span class=\"string\">'END'</span>]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当L缺省后，L指向一个数组对象的地址。每次append后，那个地址的数组元素发生改变。</p>\n<p>如果要默认是list，可以这么写：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=None)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        L = []</div><div class=\"line\">    L.append(<span class=\"string\">'END'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> L</div></pre></td></tr></table></figure></p>\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><p>通常可以通过list或tuple实现传入不确定数量的参数。python支持可变参数，写法如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">        sum = sum + n * n</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">14</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"number\">84</span></div></pre></td></tr></table></figure></p>\n<p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。因此无法再内部函数改变传入的list</strong><br><strong>不是可变参数的话，参数需要一一对应</strong></p>\n<p>如果已经有一个list或者tuple，要调用一个可变参数可以写成这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(nums)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(*nums)</div><div class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>calc(*nums)</div><div class=\"line\"><span class=\"number\">14</span></div></pre></td></tr></table></figure></p>\n<p><strong>nums表示一个数组或者元组<br>*nums表示取出nums这个list里的所有元素，代表多个参数</strong></p>\n<h4 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h4><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</div><div class=\"line\"><span class=\"comment\"># 调用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</div><div class=\"line\">name: Adam age: <span class=\"number\">45</span> other: &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"><span class=\"comment\"># 另一种简化写法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>kw表示一个dict<br>**kw表示取出kw中的所有键值对元素，代表多个参数</strong></p>\n<p><strong>另外，和上面的list传入的是tuple一样，kw获得的dict是外部传入的一份拷贝，在函数内部对kw的修改不会影响到外部dict。</strong></p>\n<h4 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h4><p>不知道这么脑残的语法有什么意义。</p>\n<h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>切片（Slice）操作符用来简化经常取指定索引范围的操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Jack'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</div><div class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</div></pre></td></tr></table></figure></p>\n<p>从索引0开始取，直到索引3为止，但不包括索引3,正好是3个元素.</p>\n<p>各种用法示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Python支持L[-1]取倒数第一个元素,同样支持倒数切片</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">-2</span>:]</div><div class=\"line\">[<span class=\"string\">'Bob'</span>, <span class=\"string\">'Jack'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[<span class=\"number\">-2</span>:<span class=\"number\">-1</span>]</div><div class=\"line\">[<span class=\"string\">'Bob'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 前10个数，每两个取一个：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[:<span class=\"number\">10</span>:<span class=\"number\">2</span>]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 所有数，每5个取一个：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[::<span class=\"number\">5</span>]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">35</span>, <span class=\"number\">40</span>, <span class=\"number\">45</span>, <span class=\"number\">50</span>, <span class=\"number\">55</span>, <span class=\"number\">60</span>, <span class=\"number\">65</span>, <span class=\"number\">70</span>, <span class=\"number\">75</span>, <span class=\"number\">80</span>, <span class=\"number\">85</span>, <span class=\"number\">90</span>, <span class=\"number\">95</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 什么都不写，只写[:]就可以原样复制一个list</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>L[:]</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ..., <span class=\"number\">99</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)[:<span class=\"number\">3</span>]</div><div class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABCDEFG'</span>[:<span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"string\">'ABC'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ABCDEFG'</span>[::<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"string\">'ACEG'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><p>我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。只要是可迭代对象，无论有无下标，都可以迭代。</p>\n<p>判断一个对象是否是可迭代对象：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</div><div class=\"line\">isinstance(<span class=\"string\">'abc'</span>, Iterable)</div></pre></td></tr></table></figure></p>\n<h3 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h3><p>感觉没啥用。</p>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>列表元素可以按照某种算法在不断循环的过程中推算出后续元素，不必创建完整的list，节省大量空间。这种一边循环一边计算的机制，叫做generator。<br>例如实现斐波那契函数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(max)</span>:</span></div><div class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; max:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b</div><div class=\"line\">        a, b = b, a + b</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'done'</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fib(<span class=\"number\">6</span>):</div><div class=\"line\">\tprint(n)</div></pre></td></tr></table></figure></p>\n<p>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator.<br>函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p>\n<p>其实就相当于在yield处有个断点，可以获得当时的yield处的值，供for循环内使用。</p>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！<br>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><h4 id=\"变量可以指向函数\"><a href=\"#变量可以指向函数\" class=\"headerlink\" title=\"变量可以指向函数\"></a>变量可以指向函数</h4><p>把函数本身赋值给变量,即：变量可以指向函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = abs</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f(<span class=\"number\">-10</span>)</div><div class=\"line\"><span class=\"number\">10</span></div></pre></td></tr></table></figure></p>\n<p>说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。</p>\n<h4 id=\"传入函数\"><a href=\"#传入函数\" class=\"headerlink\" title=\"传入函数\"></a>传入函数</h4><p>那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</div></pre></td></tr></table></figure></p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h4><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> x * x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(r)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</div></pre></td></tr></table></figure></p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数<strong>必须接收两个参数</strong>，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><p>filter()也接收一个函数和一个序列.filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_odd</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">1</span></div><div class=\"line\">list(filter(is_odd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]))</div><div class=\"line\"><span class=\"comment\"># 结果: [1, 5, 9, 15]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted\"></a>sorted</h4><p>使用sorted()函数就可以对list进行排序。<br>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">-12</span>, <span class=\"number\">9</span>, <span class=\"number\">-21</span>], key=abs)</div><div class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">-12</span>, <span class=\"number\">-21</span>, <span class=\"number\">36</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list = [<span class=\"number\">36</span>, <span class=\"number\">5</span>, <span class=\"number\">-12</span>, <span class=\"number\">9</span>, <span class=\"number\">-21</span>]</div><div class=\"line\">keys = [<span class=\"number\">36</span>, <span class=\"number\">5</span>,  <span class=\"number\">12</span>, <span class=\"number\">9</span>,  <span class=\"number\">21</span>]</div></pre></td></tr></table></figure></p>\n<h3 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h3><p>高阶函数除了接收函数作为参数外，还能将函数作为结果返回。好处是，不需要立即执行，在想要调用的时候执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    fs = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span></div><div class=\"line\">             <span class=\"keyword\">return</span> i*i</div><div class=\"line\">        fs.append(f)</div><div class=\"line\">    <span class=\"keyword\">return</span> fs</div><div class=\"line\"></div><div class=\"line\">f1, f2, f3 = count()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1()</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2()</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3()</div><div class=\"line\"><span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>本例中，执行count()返回了一个以f函数作为元素的数组，分别赋给f1，f2，f3。这里面执行三个函数的结果都是9，因为外层i在循环的时候并没有执行i*i，当循环完后，i为3，由于闭包性，i=3被保存在栈中，直到函数执行。<br>因此，返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">lambda</span> x: x * x</div><div class=\"line\">=&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x * x</div></pre></td></tr></table></figure>\n<p>关键字lambda表示匿名函数，冒号前面的x表示函数参数。<br>匿名函数有个限制，就是<strong>只能有一个表达式</strong>，不用写return，返回值就是该表达式的结果。<br>匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><h4 id=\"不带参数\"><a href=\"#不带参数\" class=\"headerlink\" title=\"不带参数\"></a>不带参数</h4><p>在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></div><div class=\"line\">    \t<span class=\"comment\"># 函数对象有一个__name__属性，可以拿到函数的名字</span></div><div class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"><span class=\"meta\">@log</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now()</div><div class=\"line\">call now():</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-3</span><span class=\"number\">-25</span></div></pre></td></tr></table></figure></p>\n<p>此处把<strong>@log</strong>放到<strong>now()</strong>定义处，相当于执行了<br><strong>now = log(now)</strong>: <strong>now() =&gt; wrapper()</strong><br>将原方法作为参数传入。类似于装饰者模式，只不过由于python的动态性，不需要调用新定义的方法，只要调用原方法就可以动态解析。</p>\n<h4 id=\"带参数\"><a href=\"#带参数\" class=\"headerlink\" title=\"带参数\"></a>带参数</h4><p>如果log带参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></div><div class=\"line\">            print(<span class=\"string\">'%s %s():'</span> % (text, func.__name__))</div><div class=\"line\">            <span class=\"keyword\">return</span> func(*args, **kw)</div><div class=\"line\">        <span class=\"keyword\">return</span> wrapper</div><div class=\"line\">    <span class=\"keyword\">return</span> decorator</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log('execute')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</div></pre></td></tr></table></figure></p>\n<p>首先执行log(‘execute’)，返回的是decorator函数，再调用返回的函数，参数是now函数，返回值最终是wrapper函数。即<strong>now()=&gt;wrapper()</strong></p>\n<h4 id=\"带来的问题\"><a href=\"#带来的问题\" class=\"headerlink\" title=\"带来的问题\"></a>带来的问题</h4><p>上面的过程解析已经说明，最后now()的调用，都转化成了wrapper()的调用。那么，在调用<strong>now.<strong>name</strong></strong>时，结果就会使wrapper，而不是now。<br>因此，需要将<strong>wrapper.<strong>name</strong> = func.<strong>name</strong></strong>。可以使用python内置的方法<strong>functools.wraps</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">import functools</div><div class=\"line\">def log(func):</div><div class=\"line\">    @functools.wraps(func)</div><div class=\"line\">    def wrapper(*args, **kw):</div><div class=\"line\">        print(&apos;call %s():&apos; % func.__name__)</div><div class=\"line\">        return func(*args, **kw)</div><div class=\"line\">    return wrapper</div><div class=\"line\"># 或者</div><div class=\"line\">import functools</div><div class=\"line\">def log(text):</div><div class=\"line\">    def decorator(func):</div><div class=\"line\">        @functools.wraps(func)</div><div class=\"line\">        def wrapper(*args, **kw):</div><div class=\"line\">            print(&apos;%s %s():&apos; % (text, func.__name__))</div><div class=\"line\">            return func(*args, **kw)</div><div class=\"line\">        return wrapper</div><div class=\"line\">    return decorator</div></pre></td></tr></table></figure>\n<h3 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h3><p>使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单</p>\n<p>假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">int2</span><span class=\"params\">(x, base=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> int(x, base)</div></pre></td></tr></table></figure></p>\n<p>我们可以使用<strong>functools.partial</strong>创建一个偏函数，不需要自己定义int2<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>)</div><div class=\"line\"><span class=\"number\">64</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1010101'</span>)</div><div class=\"line\"><span class=\"number\">85</span></div></pre></td></tr></table></figure></p>\n<p>简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单</p>\n<p>创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">max2 = functools.partial(max, <span class=\"number\">10</span>)</div></pre></td></tr></table></figure></p>\n<p>实际上会把10作为*args的一部分<strong>自动加到左边</strong>，也就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">max2(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">相当于：</div><div class=\"line\">args = (<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</div><div class=\"line\">max(*args)</div></pre></td></tr></table></figure></p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Python又引入了按目录来组织模块的方法，称为包（Package）。引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。<br>请注意，每一个包目录下面都会有一个<strong>init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。</strong>init__.py可以是空文件，也可以有Python代码，因为<strong>init</strong>.py本身就是一个模块</p>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">\ttest()</div></pre></td></tr></table></figure>\n<p>导入sys模块后,就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能。<br>sys模块有一个argv变量，用list存储了<strong>命令行的所有参数</strong>。argv至少有一个元素，因为第一个参数永远是该.py文件的名称。<br>在命令行运行该模块文件时，Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong>，而如果在其他地方导入该模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>\n<p>作用域：</p>\n<ul>\n<li>正常的函数和变量名是公开的（public），可以被直接引用</li>\n<li>类似<strong>xxx</strong>这样的变量是特殊变量，可以被直接引用，但是有特殊用途。</li>\n<li>类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用。</li>\n</ul>\n<h3 id=\"安装第三方模块\"><a href=\"#安装第三方模块\" class=\"headerlink\" title=\"安装第三方模块\"></a>安装第三方模块</h3><p>使用pip3 install XXX 安装第三方库<br>当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错。<br>搜索路径存放在sys模块的path变量中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">print(sys.path)</div></pre></td></tr></table></figure></p>\n<p>当要添加自己的搜索目录时可以</p>\n<ol>\n<li>直接修改sys.path:<strong>sys.path.append(‘/Users/xxx/xxx’)</strong></li>\n<li>设置环境变量PYTHONPATH</li>\n</ol>\n<h2 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h2><h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>定义类是通过class关键字，后面紧接着是类名，紧接着是(object)，表示该类是从哪个类继承下来的。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Student(object)</div><div class=\"line\">\tpass</div></pre></td></tr></table></figure></p>\n<p>定义好类，就可以创建出实例了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bart = Student()</div></pre></td></tr></table></figure></p>\n<p>可以<strong>自由地给一个实例变量绑定属性</strong>，比如，给实例bart绑定一个name属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bart.name = <span class=\"string\">'Zachary'</span></div></pre></td></tr></table></figure></p>\n<p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。</p>\n<p>创建实例的时候可以使用特殊的<strong><strong>init</strong></strong>方法初始化：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.score = score</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>注意到<strong>init</strong>方法的第一个参数永远是self，表示创建的实例本身，因此，在<strong>init</strong>方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</li>\n<li>有了<strong>init</strong>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<strong>init</strong>方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去。</li>\n</ol>\n<p>另外：</p>\n<ol>\n<li>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数</li>\n<li>如果是类的方法，不需要传入self，使用类名.方法名调用。和其他语言一样。</li>\n</ol>\n<h3 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p>\n<p>oc中使用.h和.m定义属性的方式区分共有私有。<br>Java中通过public，private的方式区分共有私有。<br>python通过__的方式区分共有私有。</p>\n<p>以_开头的变量表示：可以访问，但是最好视为私有变量。</p>\n<h3 id=\"继承和多态\"><a href=\"#继承和多态\" class=\"headerlink\" title=\"继承和多态\"></a>继承和多态</h3><p>继承和多态和其他语言没什么不同，就不重复了。</p>\n<p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。<br>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了</p>\n<h3 id=\"获取对象信息\"><a href=\"#获取对象信息\" class=\"headerlink\" title=\"获取对象信息\"></a>获取对象信息</h3><h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>使用type()函数,判断对象类型<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> types</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(fn)==types.FunctionType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(abs)==types.BuiltinFunctionType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"keyword\">lambda</span> x: x)==types.LambdaType</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type((x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)))==types.GeneratorType</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"isinstance\"><a href=\"#isinstance\" class=\"headerlink\" title=\"isinstance()\"></a>isinstance()</h4><p>使用isinstance()函数,判断class的继承关系<br>判断基本类型：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"string\">'a'</span>, str)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"number\">123</span>, int)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance(<span class=\"string\">b'a'</span>, bytes)</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<p>判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (list, tuple))</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (list, tuple))</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir()\"></a>dir()</h4><p>如果要获得一个对象的<strong>所有属性和方法</strong>，可以使用dir()函数，它返回一个包含字符串的list.</p>\n<p>仅仅把属性和方法列出来是不够的，配合<strong>getattr()</strong>、<strong>setattr()</strong>以及<strong>hasattr()</strong>，我们可以直接<strong>操作一个对象的状态</strong>：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        self.x = <span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> self.x * self.x</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = MyObject()</div></pre></td></tr></table></figure></p>\n<p>紧接着，可以测试该对象的属性：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'x'</span>) <span class=\"comment\"># 有属性'x'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj.x</div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 有属性'y'吗？</span></div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>setattr(obj, <span class=\"string\">'y'</span>, <span class=\"number\">19</span>) <span class=\"comment\"># 设置一个属性'y'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 有属性'y'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'y'</span>) <span class=\"comment\"># 获取属性'y'</span></div><div class=\"line\"><span class=\"number\">19</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj.y <span class=\"comment\"># 获取属性'y'</span></div><div class=\"line\"><span class=\"number\">19</span></div></pre></td></tr></table></figure></p>\n<p>如果试图获取不存在的属性，会抛出AttributeError的错误<br>可以传入一个default参数，如果属性不存在，就返回默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'z'</span>, <span class=\"number\">404</span>) <span class=\"comment\"># 获取属性'z'，如果不存在，返回默认值404</span></div><div class=\"line\"><span class=\"number\">404</span></div></pre></td></tr></table></figure></p>\n<p>也可以获得对象的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 有属性'power'吗？</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 获取属性'power'</span></div><div class=\"line\">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class=\"number\">0x10077a6a0</span>&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn = getattr(obj, <span class=\"string\">'power'</span>) <span class=\"comment\"># 获取属性'power'并赋值到变量fn</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn <span class=\"comment\"># fn指向obj.power</span></div><div class=\"line\">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class=\"number\">0x10077a6a0</span>&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fn() <span class=\"comment\"># 调用fn()与调用obj.power()是一样的</span></div><div class=\"line\"><span class=\"number\">81</span></div></pre></td></tr></table></figure></p>\n<p><strong>感觉上，用set，get，has方法和直接设置没什么太大区别。</strong></p>\n<h3 id=\"实例属性和类属性\"><a href=\"#实例属性和类属性\" class=\"headerlink\" title=\"实例属性和类属性\"></a>实例属性和类属性</h3><p>python中并没有static修饰符，在一个class中定义的属性，实例和类都可以访问：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"string\">'Student'</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = Student() <span class=\"comment\"># 创建实例s</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student.name) <span class=\"comment\"># 打印类的name属性</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.name = <span class=\"string\">'Michael'</span> <span class=\"comment\"># 给实例绑定name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></div><div class=\"line\">Michael</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student.name) <span class=\"comment\"># 但是类属性并未消失，用Student.name仍然可以访问</span></div><div class=\"line\">Student</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> s.name <span class=\"comment\"># 如果删除实例的name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name) <span class=\"comment\"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></div><div class=\"line\">Student</div></pre></td></tr></table></figure></p>\n<p>在编写程序的时候，千万不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>\n<h2 id=\"面向对象高级编程\"><a href=\"#面向对象高级编程\" class=\"headerlink\" title=\"面向对象高级编程\"></a>面向对象高级编程</h2><h3 id=\"使用slots\"><a href=\"#使用slots\" class=\"headerlink\" title=\"使用slots\"></a>使用<strong>slots</strong></h3><p>我们可以给实例绑定任何属性和方法。<br>创建实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>给实例绑定方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self, age)</span>:</span> <span class=\"comment\"># 定义一个函数作为实例方法</span></div><div class=\"line\"><span class=\"meta\">... </span>    self.age = age</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age, s) <span class=\"comment\"># 给实例绑定一个方法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.set_age(<span class=\"number\">25</span>) <span class=\"comment\"># 调用实例方法</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age <span class=\"comment\"># 测试结果</span></div><div class=\"line\"><span class=\"number\">25</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>这里使用MethodType方法给实例绑定方法，之后调用的时候就不用设置self了。如果使用s.set_age = set_age的方式绑定，那么调用时要自己传入self变量。 </li>\n<li>MethodType()这个方法不要用在给类绑定属性上。</li>\n</ol>\n<p>给类绑定方法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_score</span><span class=\"params\">(self, score)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    self.score = score</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Student.set_score = set_score</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>像这样给类绑定方法后，实例变量不用自己传入self了。</p>\n<p>如果我们想要限制实例的属性。比如，只允许对Student实例添加name和age属性。我们可以使用<strong>slots</strong>来限制属性。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__ = (<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>) <span class=\"comment\"># 用tuple定义允许绑定的属性名称</span></div></pre></td></tr></table></figure></p>\n<p>使用<strong>slots</strong>要注意，<strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的,即<strong><strong>slots</strong>属性并不会被继承</strong></p>\n<p>slots的本质不是限制实例添加属性，而是优化性能。slots绑定的实例属性不保存在dict中，所以在有大量实例存在的情况下能减少hash table的内存开销。不能给实例增加,不能给实例动态添加属性只是<strong>slots</strong>的副作用。</p>\n<h3 id=\"使用-property\"><a href=\"#使用-property\" class=\"headerlink\" title=\"使用@property\"></a>使用@property</h3><p>类的属性都是暴露出来的，写起来方便，但是没办法检查参数。如果使用get，set方法又显得麻烦。可以使用装饰器(decorator)中的@property装饰器。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._score</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @score.setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">100</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0 ~ 100!'</span>)</div><div class=\"line\">        self._score = value</div></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ol>\n<li>把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值.</li>\n<li>只定义getter方法，不定义setter方法就是一个只读属性。</li>\n</ol>\n<h3 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h3><p>python允许多重继承：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal, Runnable)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p><strong>如果继承的类有同名方法，按照继承的顺序执行，即先执行Mammal里的，没有再执行Runnable里的。</strong></p>\n<p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal, RunnableMixIn, CarnivorousMixIn)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<p>感觉MixIn就是个约定啊，并没有太多实质效果啊=。=</p>\n<h3 id=\"定制类\"><a href=\"#定制类\" class=\"headerlink\" title=\"定制类\"></a>定制类</h3><p>形如<strong>xxx</strong>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p>\n<h4 id=\"str\"><a href=\"#str\" class=\"headerlink\" title=\"str\"></a><strong>str</strong></h4><p>怎么才能打印得好看呢？只需要定义好<strong>str</strong>()方法，返回一个好看的字符串就可以了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        self.name = name</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">return</span> <span class=\"string\">'Student object (name: %s)'</span> % self.name</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Student(<span class=\"string\">'Michael'</span>))</div><div class=\"line\">Student object (name: Michael)</div></pre></td></tr></table></figure></p>\n<h4 id=\"iter\"><a href=\"#iter\" class=\"headerlink\" title=\"iter\"></a><strong>iter</strong></h4><p>如果一个类想被用于<strong>for…in</strong>循环，类似list或tuple那样，就必须实现一个<strong><strong>iter</strong>()</strong>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<strong><strong>next</strong>()</strong>方法拿到循环的下一个值，直到遇到<strong>StopIteration</strong>错误时退出循环。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"comment\"># 初始化两个计数器a，b</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self <span class=\"comment\"># 实例本身就是迭代对象，故返回自己</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b = self.b, self.a + self.b <span class=\"comment\"># 计算下一个值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.a &gt; <span class=\"number\">100000</span>: <span class=\"comment\"># 退出循环的条件</span></div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration();</div><div class=\"line\">        <span class=\"keyword\">return</span> self.a <span class=\"comment\"># 返回下一个值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fib():</div><div class=\"line\"><span class=\"meta\">... </span>    print(n)</div></pre></td></tr></table></figure></p>\n<h4 id=\"getitem\"><a href=\"#getitem\" class=\"headerlink\" title=\"getitem\"></a><strong>getitem</strong></h4><p>要表现得像list那样按照下标取出元素，需要实现<strong>getitem</strong>()方法。<strong>getitem</strong>()传入的参数可能是一个int，也可能是一个切片对象slice:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, n)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(n, int): <span class=\"comment\"># n是索引</span></div><div class=\"line\">            a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">                a, b = b, a + b</div><div class=\"line\">            <span class=\"keyword\">return</span> a</div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(n, slice): <span class=\"comment\"># n是切片</span></div><div class=\"line\">            start = n.start</div><div class=\"line\">            stop = n.stop</div><div class=\"line\">            <span class=\"keyword\">if</span> start <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                start = <span class=\"number\">0</span></div><div class=\"line\">            a, b = <span class=\"number\">1</span>, <span class=\"number\">1</span></div><div class=\"line\">            L = []</div><div class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(stop):</div><div class=\"line\">                <span class=\"keyword\">if</span> x &gt;= start:</div><div class=\"line\">                    L.append(a)</div><div class=\"line\">                a, b = b, a + b</div><div class=\"line\">            <span class=\"keyword\">return</span> L</div></pre></td></tr></table></figure></p>\n<p>与之对应的是<strong>setitem</strong>()方法，把对象视作list或dict来对集合赋值。最后，还有一个<strong>delitem</strong>()方法，用于删除某个元素。</p>\n<h4 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"getattr\"></a><strong>getattr</strong></h4><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，那就是写一个<strong>getattr</strong>()方法，动态返回一个属性。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'Michael'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> attr==<span class=\"string\">'score'</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">99</span></div></pre></td></tr></table></figure></p>\n<p>当调用<strong>不存在的属性</strong>时，比如score，Python解释器会试图调用<strong>getattr</strong>(self, ‘score’)来尝试获得属性，这样，我们就有机会返回score的值.</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a><strong>call</strong></h4><p>任何类，只需要定义一个<strong>call</strong>()方法，就可以直接对实例进行调用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'My name is %s.'</span> % self.name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = Student(<span class=\"string\">'Michael'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s() <span class=\"comment\"># self参数不要传入</span></div><div class=\"line\">My name <span class=\"keyword\">is</span> Michael.</div></pre></td></tr></table></figure></p>\n<h3 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h3><p>Python提供了Enum类来实现这个功能<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</div><div class=\"line\">Month = Enum(<span class=\"string\">'Month'</span>, (<span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Mar'</span>, <span class=\"string\">'Apr'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'Jun'</span>, <span class=\"string\">'Jul'</span>, <span class=\"string\">'Aug'</span>, <span class=\"string\">'Sep'</span>, <span class=\"string\">'Oct'</span>, <span class=\"string\">'Nov'</span>, <span class=\"string\">'Dec'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> name, member <span class=\"keyword\">in</span> Month.__members__.items():</div><div class=\"line\">    print(name, <span class=\"string\">'=&gt;'</span>, member, <span class=\"string\">','</span>, member.value)</div></pre></td></tr></table></figure></p>\n<p>value属性则是自动赋给成员的int常量，默认从1开始计数。<br>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum, unique</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Weekday</span><span class=\"params\">(Enum)</span>:</span></div><div class=\"line\">    Sun = <span class=\"number\">0</span> <span class=\"comment\"># Sun的value被设定为0</span></div><div class=\"line\">    Mon = <span class=\"number\">1</span></div><div class=\"line\">    Tue = <span class=\"number\">2</span></div><div class=\"line\">    Wed = <span class=\"number\">3</span></div><div class=\"line\">    Thu = <span class=\"number\">4</span></div><div class=\"line\">    Fri = <span class=\"number\">5</span></div><div class=\"line\">    Sat = <span class=\"number\">6</span></div></pre></td></tr></table></figure>\n<h3 id=\"元类\"><a href=\"#元类\" class=\"headerlink\" title=\"元类\"></a>元类</h3><p>没看</p>\n<h2 id=\"IO编程\"><a href=\"#IO编程\" class=\"headerlink\" title=\"IO编程\"></a>IO编程</h2><h3 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h3><h4 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h4><p>使用Python内置的open()函数，传入文件名和标示符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/test.txt'</span>, <span class=\"string\">'r'</span>)</div></pre></td></tr></table></figure></p>\n<p>标示符’r’表示读.</p>\n<p>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'Hello, world!'</span></div></pre></td></tr></table></figure></p>\n<p>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    f = open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>)</div><div class=\"line\">    print(f.read())</div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span> f:</div><div class=\"line\">        f.close()</div></pre></td></tr></table></figure></p>\n<p>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    print(f.read())</div></pre></td></tr></table></figure></p>\n<p>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>\n<p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>\n<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</div><div class=\"line\">    print(line.strip()) <span class=\"comment\"># 把末尾的'\\n'删掉</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h4><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/test.jpg'</span>, <span class=\"string\">'rb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">b'\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00...'</span> <span class=\"comment\"># 十六进制表示的字节</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"文件读写-1\"><a href=\"#文件读写-1\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><p>阅读: 100273<br>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p>\n<p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>\n<p>读文件</p>\n<p>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f = open(‘/Users/michael/test.txt’, ‘r’)<br>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f=open(‘/Users/michael/notfound.txt’, ‘r’)<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>FileNotFoundError: [Errno 2] No such file or directory: ‘/Users/michael/notfound.txt’<br>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</p>\n<p>f.read()<br>‘Hello, world!’<br>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p>\n<p>f.close()<br>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>try:<br>    f = open(‘/path/to/file’, ‘r’)<br>    print(f.read())<br>finally:<br>    if f:<br>        f.close()<br>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：</p>\n<p>with open(‘/path/to/file’, ‘r’) as f:<br>    print(f.read())<br>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>\n<p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>\n<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>\n<p>for line in f.readlines():<br>    print(line.strip()) # 把末尾的’\\n’删掉<br>file-like Object</p>\n<p>像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</p>\n<p>StringIO就是在内存中创建的file-like Object，常用作临时缓冲。</p>\n<h4 id=\"二进制文件-1\"><a href=\"#二进制文件-1\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h4><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>f = open(‘/Users/michael/test.jpg’, ‘rb’)<br>f.read()<br>b’\\xff\\xd8\\xff\\xe1\\x00\\x18Exif\\x00\\x00…’ # 十六进制表示的字节<br>字符编码</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4><p>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/gbk.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'gbk'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.read()</div><div class=\"line\"><span class=\"string\">'测试'</span></div></pre></td></tr></table></figure></p>\n<p>遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/gbk.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'gbk'</span>, errors=<span class=\"string\">'ignore'</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'/Users/michael/test.txt'</span>, <span class=\"string\">'w'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.write(<span class=\"string\">'Hello, world!'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/michael/test.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(<span class=\"string\">'Hello, world!'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"StringIO和BytesIO\"><a href=\"#StringIO和BytesIO\" class=\"headerlink\" title=\"StringIO和BytesIO\"></a>StringIO和BytesIO</h3><p>读取写内容到内存中，不写了。用到再看。</p>\n<h3 id=\"操作文件和目录\"><a href=\"#操作文件和目录\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"comment\"># 查看当前目录的绝对路径:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.abspath(<span class=\"string\">'.'</span>)</div><div class=\"line\"><span class=\"string\">'/Users/michael'</span></div><div class=\"line\"><span class=\"comment\"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.join(<span class=\"string\">'/Users/michael'</span>, <span class=\"string\">'testdir'</span>)</div><div class=\"line\"><span class=\"string\">'/Users/michael/testdir'</span></div><div class=\"line\"><span class=\"comment\"># 然后创建一个目录:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.mkdir(<span class=\"string\">'/Users/michael/testdir'</span>)</div><div class=\"line\"><span class=\"comment\"># 删掉一个目录:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rmdir(<span class=\"string\">'/Users/michael/testdir'</span>)</div></pre></td></tr></table></figure>\n<p>把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。<br>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.split(<span class=\"string\">'/Users/michael/testdir/file.txt'</span>)</div><div class=\"line\">(<span class=\"string\">'/Users/michael/testdir'</span>, <span class=\"string\">'file.txt'</span>)</div></pre></td></tr></table></figure></p>\n<p>文件操作<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 对文件重命名:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'test.py'</span>)</div><div class=\"line\"><span class=\"comment\"># 删掉文件:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.remove(<span class=\"string\">'test.py'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling。<br>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p>\n<p>Python提供了pickle模块来实现序列化。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> pickle</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict(name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">20</span>, score=<span class=\"number\">88</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'dump.txt'</span>, <span class=\"string\">'wb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pickle.dump(d, f)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure></p>\n<p>pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object.<br>当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = open(<span class=\"string\">'dump.txt'</span>, <span class=\"string\">'rb'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = pickle.load(f)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.close()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">&#123;<span class=\"string\">'age'</span>: <span class=\"number\">20</span>, <span class=\"string\">'score'</span>: <span class=\"number\">88</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>Python内置的json模块提供了非常完善的Python对象到JSON格式的转换。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = dict(name=<span class=\"string\">'Bob'</span>, age=<span class=\"number\">20</span>, score=<span class=\"number\">88</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.dumps(d)</div><div class=\"line\"><span class=\"string\">'&#123;\"age\": 20, \"score\": 88, \"name\": \"Bob\"&#125;'</span></div></pre></td></tr></table></figure></p>\n<p>dumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。</p>\n<p>要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json_str = <span class=\"string\">'&#123;\"age\": 20, \"score\": 88, \"name\": \"Bob\"&#125;'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>json.loads(json_str)</div><div class=\"line\">&#123;<span class=\"string\">'age'</span>: <span class=\"number\">20</span>, <span class=\"string\">'score'</span>: <span class=\"number\">88</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><h3 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h3><h4 id=\"multiprocessing\"><a href=\"#multiprocessing\" class=\"headerlink\" title=\"multiprocessing\"></a>multiprocessing</h4><p>multiprocessing模块就是跨平台版本的多进程模块。<br>multiprocessing模块提供了一个Process类来代表一个进程对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 子进程要执行的代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_proc</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run child process %s (%s)...'</span> % (name, os.getpid()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> % os.getpid())</div><div class=\"line\">    p = Process(target=run_proc, args=(<span class=\"string\">'test'</span>,))</div><div class=\"line\">    print(<span class=\"string\">'Child process will start.'</span>)</div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'Child process end.'</span>)</div></pre></td></tr></table></figure></p>\n<p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。<br>join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p>\n<h4 id=\"pool\"><a href=\"#pool\" class=\"headerlink\" title=\"pool\"></a>pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</div><div class=\"line\"><span class=\"keyword\">import</span> os, time, random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run task %s (%s)...'</span> % (name, os.getpid()))</div><div class=\"line\">    start = time.time()</div><div class=\"line\">    time.sleep(random.random() * <span class=\"number\">3</span>)</div><div class=\"line\">    end = time.time()</div><div class=\"line\">    print(<span class=\"string\">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> % os.getpid())</div><div class=\"line\">    p = Pool(<span class=\"number\">4</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</div><div class=\"line\">        p.apply_async(long_time_task, args=(i,))</div><div class=\"line\">    print(<span class=\"string\">'Waiting for all subprocesses done...'</span>)</div><div class=\"line\">    p.close()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'All subprocesses done.'</span>)</div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Parent process <span class=\"number\">669.</span></div><div class=\"line\">Waiting <span class=\"keyword\">for</span> all subprocesses done...</div><div class=\"line\">Run task <span class=\"number\">0</span> (<span class=\"number\">671</span>)...</div><div class=\"line\">Run task <span class=\"number\">1</span> (<span class=\"number\">672</span>)...</div><div class=\"line\">Run task <span class=\"number\">2</span> (<span class=\"number\">673</span>)...</div><div class=\"line\">Run task <span class=\"number\">3</span> (<span class=\"number\">674</span>)...</div><div class=\"line\">Task <span class=\"number\">2</span> runs <span class=\"number\">0.14</span> seconds.</div><div class=\"line\">Run task <span class=\"number\">4</span> (<span class=\"number\">673</span>)...</div><div class=\"line\">Task <span class=\"number\">1</span> runs <span class=\"number\">0.27</span> seconds.</div><div class=\"line\">Task <span class=\"number\">3</span> runs <span class=\"number\">0.86</span> seconds.</div><div class=\"line\">Task <span class=\"number\">0</span> runs <span class=\"number\">1.41</span> seconds.</div><div class=\"line\">Task <span class=\"number\">4</span> runs <span class=\"number\">1.91</span> seconds.</div><div class=\"line\">All subprocesses done.</div></pre></td></tr></table></figure></p>\n<p>对Pool对象调用join()方法会等待所有子进程执行完毕，调用join()之前必须先调用close()，调用close()之后就不能继续添加新的Process了。<br>注意输出的结果，task 0，1，2，3是立刻执行的，而task 4要等待前面某个task完成后才执行，这是因为Pool的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是Pool有意设计的限制，并不是操作系统的限制。如果改成：<code>p = ool(5)</code>就可以同时跑5个进程。</p>\n<h3 id=\"子进程-amp-进程间通信\"><a href=\"#子进程-amp-进程间通信\" class=\"headerlink\" title=\"子进程&amp;进程间通信\"></a>子进程&amp;进程间通信</h3><p>到时候再看</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新线程执行的代码:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'thread %s is running...'</span> % threading.current_thread().name)</div><div class=\"line\">    n = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</div><div class=\"line\">        n = n + <span class=\"number\">1</span></div><div class=\"line\">        print(<span class=\"string\">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">'thread %s ended.'</span> % threading.current_thread().name)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'thread %s is running...'</span> % threading.current_thread().name)</div><div class=\"line\">t = threading.Thread(target=loop, name=<span class=\"string\">'LoopThread'</span>)</div><div class=\"line\">t.start()</div><div class=\"line\">t.join()</div><div class=\"line\">print(<span class=\"string\">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure></p>\n<p>执行结果如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">thread MainThread <span class=\"keyword\">is</span> running...</div><div class=\"line\">thread LoopThread <span class=\"keyword\">is</span> running...</div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">1</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">2</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">3</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">4</span></div><div class=\"line\">thread LoopThread &gt;&gt;&gt; <span class=\"number\">5</span></div><div class=\"line\">thread LoopThread ended.</div><div class=\"line\">thread MainThread ended.</div></pre></td></tr></table></figure>\n<p>任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块有个current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">balance = <span class=\"number\">0</span></div><div class=\"line\">lock = threading.Lock()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100000</span>):</div><div class=\"line\">        <span class=\"comment\"># 先要获取锁:</span></div><div class=\"line\">        lock.acquire()</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"comment\"># 放心地改吧:</span></div><div class=\"line\">            change_it(n)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            <span class=\"comment\"># 改完了一定要释放锁:</span></div><div class=\"line\">            lock.release()</div></pre></td></tr></table></figure></p>\n<p>创建一个锁就是通过threading.Lock()来实现.当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try…finally来确保锁一定会被释放。</p>\n<h3 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h3><p>一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建全局ThreadLocal对象:</span></div><div class=\"line\">local_school = threading.local()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 获取当前线程关联的student:</span></div><div class=\"line\">    std = local_school.student</div><div class=\"line\">    print(<span class=\"string\">'Hello, %s (in %s)'</span> % (std, threading.current_thread().name))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 绑定ThreadLocal的student:</span></div><div class=\"line\">    local_school.student = name</div><div class=\"line\">    process_student()</div><div class=\"line\"></div><div class=\"line\">t1 = threading.Thread(target= process_thread, args=(<span class=\"string\">'Alice'</span>,), name=<span class=\"string\">'Thread-A'</span>)</div><div class=\"line\">t2 = threading.Thread(target= process_thread, args=(<span class=\"string\">'Bob'</span>,), name=<span class=\"string\">'Thread-B'</span>)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div></pre></td></tr></table></figure></p>\n<p>执行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello, Alice (<span class=\"keyword\">in</span> Thread-A)</div><div class=\"line\">Hello, Bob (<span class=\"keyword\">in</span> Thread-B)</div></pre></td></tr></table></figure>\n<p>全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。</p>\n<p>可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。</p>\n<p>ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p>\n<h3 id=\"分布式进程\"><a href=\"#分布式进程\" class=\"headerlink\" title=\"分布式进程\"></a>分布式进程</h3><p>用到再看</p>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><ul>\n<li>\\d可以匹配一个数字</li>\n<li>\\w可以匹配一个字母或数字</li>\n<li>.可以匹配任意字符</li>\n<li>*表示任意个字符（包括0个）</li>\n<li>用+表示至少一个字符</li>\n<li>用?表示0个或1个字符</li>\n<li>用{n}表示n个字符</li>\n<li>用{n,m}表示n-m个字符</li>\n<li>\\s可以匹配一个空格（也包括Tab等空白符）</li>\n<li>要做更精确地匹配，可以用[]表示范围    <ul>\n<li>[0-9a-zA-Z_]可以匹配一个数字、字母或者下划线</li>\n</ul>\n</li>\n<li>[0-9a-zA-Z_]可以匹配一个数字、字母或者下划线<ul>\n<li>(P|p)ython可以匹配’Python’或者’python’</li>\n</ul>\n</li>\n<li>^表示行的开头</li>\n<li>$表示行的结束</li>\n<li>^py$就变成了整行匹配,就只能匹配’py’</li>\n</ul>\n<h3 id=\"re模块\"><a href=\"#re模块\" class=\"headerlink\" title=\"re模块\"></a>re模块</h3><p>Python提供re模块，包含所有正则表达式的功能。<br>Python的字符串本身也用\\转义，因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = <span class=\"string\">r'ABC\\-001'</span> <span class=\"comment\"># Python的字符串</span></div><div class=\"line\"><span class=\"comment\"># 对应的正则表达式字符串不变：</span></div><div class=\"line\"><span class=\"comment\"># 'ABC\\-001'</span></div></pre></td></tr></table></figure></p>\n<p>match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test = <span class=\"string\">'用户输入的字符串'</span></div><div class=\"line\"><span class=\"keyword\">if</span> re.match(<span class=\"string\">r'正则表达式'</span>, test):</div><div class=\"line\">    print(<span class=\"string\">'ok'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'failed'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"切分字符串\"><a href=\"#切分字符串\" class=\"headerlink\" title=\"切分字符串\"></a>切分字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.split(<span class=\"string\">r'[\\s\\,\\;]+'</span>, <span class=\"string\">'a,b;; c  d'</span>)</div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]</div></pre></td></tr></table></figure>\n<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：<strong>^(\\d{3})-(\\d{3,8})$</strong>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = re.match(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>, <span class=\"string\">'010-12345'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m</div><div class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">9</span>), match=<span class=\"string\">'010-12345'</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"string\">'010-12345'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"string\">'010'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"string\">'12345'</span></div></pre></td></tr></table></figure></p>\n<p>注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。</p>\n<h3 id=\"贪婪匹配\"><a href=\"#贪婪匹配\" class=\"headerlink\" title=\"贪婪匹配\"></a>贪婪匹配</h3><p>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.match(<span class=\"string\">r'^(\\d+)(0*)$'</span>, <span class=\"string\">'102300'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'102300'</span>, <span class=\"string\">''</span>)</div></pre></td></tr></table></figure></p>\n<p>由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。<br>必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.match(<span class=\"string\">r'^(\\d+?)(0*)$'</span>, <span class=\"string\">'102300'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'1023'</span>, <span class=\"string\">'00'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"comment\"># 编译:</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>)</div><div class=\"line\"><span class=\"comment\"># 使用：</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone.match(<span class=\"string\">'010-12345'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'12345'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_telephone.match(<span class=\"string\">'010-8086'</span>).groups()</div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'8086'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用內建模块\"><a href=\"#常用內建模块\" class=\"headerlink\" title=\"常用內建模块\"></a>常用內建模块</h2><h3 id=\"datetime\"><a href=\"#datetime\" class=\"headerlink\" title=\"datetime\"></a>datetime</h3><h4 id=\"获取当前日期和时间\"><a href=\"#获取当前日期和时间\" class=\"headerlink\" title=\"获取当前日期和时间\"></a>获取当前日期和时间</h4><p>datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datetime这个类。<br>如果仅导入import datetime，则必须引用全名datetime.datetime。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now() <span class=\"comment\"># 获取当前datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(now)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-05</span><span class=\"number\">-18</span> <span class=\"number\">16</span>:<span class=\"number\">28</span>:<span class=\"number\">07.198690</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(type(now))</div><div class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">datetime</span>.<span class=\"title\">datetime</span>'&gt;</span></div></pre></td></tr></table></figure></p>\n<p>datetime.now()返回当前日期和时间，其类型是datetime。</p>\n<h4 id=\"获取指定日期和时间\"><a href=\"#获取指定日期和时间\" class=\"headerlink\" title=\"获取指定日期和时间\"></a>获取指定日期和时间</h4><p>要指定某个日期和时间，我们直接用参数构造一个datetime：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt = datetime(<span class=\"number\">2015</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>) <span class=\"comment\"># 用指定日期时间创建datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dt)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-19</span> <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime转换为timestamp\"><a href=\"#datetime转换为timestamp\" class=\"headerlink\" title=\"datetime转换为timestamp\"></a>datetime转换为timestamp</h4><p>把一个datetime类型转换为timestamp只需要简单调用<strong>timestamp()</strong>方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt = datetime(<span class=\"number\">2015</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>) <span class=\"comment\"># 用指定日期时间创建datetime</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt.timestamp() <span class=\"comment\"># 把datetime转换为timestamp</span></div><div class=\"line\"><span class=\"number\">1429417200.0</span></div></pre></td></tr></table></figure></p>\n<p>注意Python的timestamp是一个浮点数。如果有小数位，小数位表示毫秒数。<br>某些编程语言（如Java和JavaScript）的timestamp使用整数表示毫秒数，这种情况下只需要把timestamp除以1000就得到Python的浮点表示方法.</p>\n<h4 id=\"timestamp转换为datetime\"><a href=\"#timestamp转换为datetime\" class=\"headerlink\" title=\"timestamp转换为datetime\"></a>timestamp转换为datetime</h4><p>要把timestamp转换为datetime，使用datetime提供的<strong>fromtimestamp()</strong>方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = <span class=\"number\">1429417200.0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(datetime.fromtimestamp(t))</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-04</span><span class=\"number\">-19</span> <span class=\"number\">12</span>:<span class=\"number\">20</span>:<span class=\"number\">00</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"str转换为datetime\"><a href=\"#str转换为datetime\" class=\"headerlink\" title=\"str转换为datetime\"></a>str转换为datetime</h4><p>转换方法是通过<strong>datetime.strptime()</strong>实现，需要一个日期和时间的格式化字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cday = datetime.strptime(<span class=\"string\">'2015-6-1 18:19:59'</span>, <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(cday)</div><div class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-06</span><span class=\"number\">-01</span> <span class=\"number\">18</span>:<span class=\"number\">19</span>:<span class=\"number\">59</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime转换为str\"><a href=\"#datetime转换为str\" class=\"headerlink\" title=\"datetime转换为str\"></a>datetime转换为str</h4><p>如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime()实现的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(now.strftime(<span class=\"string\">'%a, %b %d %H:%M'</span>))</div><div class=\"line\">Mon, May <span class=\"number\">05</span> <span class=\"number\">16</span>:<span class=\"number\">28</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"datetime加减\"><a href=\"#datetime加减\" class=\"headerlink\" title=\"datetime加减\"></a>datetime加减</h4><p>对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，不过需要导入timedelta这个类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime, timedelta</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now = datetime.now()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">18</span>, <span class=\"number\">16</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now + timedelta(hours=<span class=\"number\">10</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">19</span>, <span class=\"number\">2</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now - timedelta(days=<span class=\"number\">1</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">17</span>, <span class=\"number\">16</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now + timedelta(days=<span class=\"number\">2</span>, hours=<span class=\"number\">12</span>)</div><div class=\"line\">datetime.datetime(<span class=\"number\">2015</span>, <span class=\"number\">5</span>, <span class=\"number\">21</span>, <span class=\"number\">4</span>, <span class=\"number\">57</span>, <span class=\"number\">3</span>, <span class=\"number\">540997</span>)</div></pre></td></tr></table></figure></p>\n<p>使用timedelta你可以很容易地算出前几天和后几天的时刻</p>\n<h3 id=\"collections\"><a href=\"#collections\" class=\"headerlink\" title=\"collections\"></a>collections</h3><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p>\n<p>最后再次感谢廖老师的辛勤劳动。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cis4scmqk0005weruab9r7l6v","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmqu000bwerum515ifb9"},{"post_id":"cis4scmq70000weru1mljah80","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmqz000fweruxwycyyz1"},{"post_id":"cis4scmqq0007weru57434z2u","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr1000iweruky5pxebf"},{"post_id":"cis4scmqt000aweru8xnfv4nk","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr5000mweruykhsh8b6"},{"post_id":"cis4scmqb0001weruukyhm08e","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr6000owerutai26nbm"},{"post_id":"cis4scmqu000cweru3x7jgvld","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr9000sweruwxmpbyry"},{"post_id":"cis4scmqi0004werulfwlo10n","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr9000vweru5ya62rmx"},{"post_id":"cis4scmr3000jweruns6pefp6","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmr9000xwerufr9au85z"},{"post_id":"cis4scmr5000nwerutrfen0yq","category_id":"cis4scmqh0003werumtt68mk0","_id":"cis4scmra0010weruetm4lt1c"},{"post_id":"cis4scmr0000hwerun039drkz","category_id":"cis4scmr4000lweruxt1qkdld","_id":"cis4scmra0011werue3s8bhun"},{"post_id":"cis4scmr7000pweruodrccj55","category_id":"cis4scmr9000uweruz3n4pkco","_id":"cis4scmrb0013weruzw5hdze3"},{"post_id":"cis4scmuo001hwerumwwy9gva","category_id":"cis4scmr9000uweruz3n4pkco","_id":"cis4scmuz001oweru11br58tl"},{"post_id":"cis4scmus001jweru0klaezlr","category_id":"cis4scmuz001nwerujy0d08rr","_id":"cis4scmv0001qwerukzlj25xu"}],"PostTag":[{"post_id":"cis4scmq70000weru1mljah80","tag_id":"cis4scmqe0002werunk6aw40x","_id":"cis4scmqs0009weruyjrfdjkx"},{"post_id":"cis4scmqb0001weruukyhm08e","tag_id":"cis4scmqq0006weruj3wkyt3c","_id":"cis4scmqz000gweruyt74n2z0"},{"post_id":"cis4scmr5000nwerutrfen0yq","tag_id":"cis4scmqy000ewerukomb4s2l","_id":"cis4scmr8000qweruenbr29of"},{"post_id":"cis4scmqi0004werulfwlo10n","tag_id":"cis4scmqy000ewerukomb4s2l","_id":"cis4scmr9000tweru3p7h9taj"},{"post_id":"cis4scmqi0004werulfwlo10n","tag_id":"cis4scmr4000kweru899gdmfy","_id":"cis4scmr9000wweru2vbyi2pc"},{"post_id":"cis4scmqk0005weruab9r7l6v","tag_id":"cis4scmr8000rweruc9so3w0p","_id":"cis4scmra000zwerujh31ju5w"},{"post_id":"cis4scmqq0007weru57434z2u","tag_id":"cis4scmr9000ywerungh6iaj5","_id":"cis4scmrb0014werucn7hq557"},{"post_id":"cis4scmqt000aweru8xnfv4nk","tag_id":"cis4scmrb0012werugjoj4ps8","_id":"cis4scmre0017weru561zdhrt"},{"post_id":"cis4scmqt000aweru8xnfv4nk","tag_id":"cis4scmr9000ywerungh6iaj5","_id":"cis4scmre0018weruzkkzigeu"},{"post_id":"cis4scmqu000cweru3x7jgvld","tag_id":"cis4scmrd0016weru0gjvaysa","_id":"cis4scmre001aweruzbr5opqq"},{"post_id":"cis4scmr0000hwerun039drkz","tag_id":"cis4scmr9000ywerungh6iaj5","_id":"cis4scmrf001cweru16c6vmot"},{"post_id":"cis4scmr3000jweruns6pefp6","tag_id":"cis4scmrf001bweruacneh2ih","_id":"cis4scmrg001eweru67tquerg"},{"post_id":"cis4scmr7000pweruodrccj55","tag_id":"cis4scmrf001dwerugm22ar8m","_id":"cis4scmri001fweru6x8cioj8"},{"post_id":"cis4scmus001jweru0klaezlr","tag_id":"cis4scmr9000ywerungh6iaj5","_id":"cis4scmuy001mweruw3urcldt"},{"post_id":"cis4scmuo001hwerumwwy9gva","tag_id":"cis4scmuw001kwerutgy933nk","_id":"cis4scmuz001pwerutcgzk68k"}],"Tag":[{"name":"GCD","_id":"cis4scmqe0002werunk6aw40x"},{"name":"UIScrollView","_id":"cis4scmqq0006weruj3wkyt3c"},{"name":"Animation","_id":"cis4scmqy000ewerukomb4s2l"},{"name":"UI","_id":"cis4scmr4000kweru899gdmfy"},{"name":"UICollectionView","_id":"cis4scmr8000rweruc9so3w0p"},{"name":"读书笔记","_id":"cis4scmr9000ywerungh6iaj5"},{"name":"objective-c","_id":"cis4scmrb0012werugjoj4ps8"},{"name":"runtime","_id":"cis4scmrd0016weru0gjvaysa"},{"name":"xib","_id":"cis4scmrf001bweruacneh2ih"},{"name":"hexo","_id":"cis4scmrf001dwerugm22ar8m"},{"name":"杂谈","_id":"cis4scmuw001kwerutgy933nk"}]}}