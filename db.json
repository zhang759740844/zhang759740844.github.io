{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"2397329c29e3e37b18b9401cc20efe95d7a857a9","modified":1470213478000},{"_id":"source/_posts/GCD队列.md","hash":"b1180be2b405fba0d73b21fef565f19ab1d6c9b0","modified":1470204227000},{"_id":"source/_posts/.DS_Store","hash":"025fe548181d824dcfc3530960b2c31667f61f1b","modified":1470213893000},{"_id":"source/_posts/hello-world.md","hash":"41ae448b5fd217c29a7be87e56f8ca7c430cfadd","modified":1469788213000},{"_id":"source/_posts/collectionView.md","hash":"37f3964c8e942223e3dcc3b32f086de808f776ae","modified":1470394495000},{"_id":"source/_posts/图解TCP_IP.md","hash":"6cf8e97e0f8fb021dedb96b66294257c92277efc","modified":1470213920000},{"_id":"source/_posts/objectice-c.md","hash":"05620b740674734a9b11ae6552680e661f354565","modified":1470210676000},{"_id":"source/_posts/重新开始.md","hash":"0493e944f925fda5a1f0153fc43b708ff377b97c","modified":1470014592000},{"_id":"source/_posts/UIScrollView部分属性.md","hash":"2c73279627f10b6d59d5e03451b97162616497ca","modified":1470287438000},{"_id":"source/_posts/ios编程（第四版.md","hash":"3964706aae7581e9dbe363c374c5ba75f748c724","modified":1470211587000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1469784778000},{"_id":"themes/landscape/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1470014592000},{"_id":"themes/landscape/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1470014592000},{"_id":"themes/landscape/_config.yml","hash":"ff5639a6d91e1f2c1b95334f7aab4afc7972688a","modified":1470014592000},{"_id":"themes/landscape/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1470014592000},{"_id":"themes/landscape/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1470014592000},{"_id":"themes/landscape/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1470014592000},{"_id":"source/categories/index.md","hash":"ca9ce2d6c165e3826b6fe70c4d6f21af059b99a2","modified":1470014592000},{"_id":"source/about/index.md","hash":"0d3d216cb610b10447e97566fe3789d313cbbad4","modified":1470014592000},{"_id":"themes/landscape/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1470014592000},{"_id":"themes/landscape/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1470014592000},{"_id":"themes/landscape/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1470014592000},{"_id":"themes/landscape/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1470014592000},{"_id":"themes/landscape/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1470014592000},{"_id":"themes/landscape/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1470014592000},{"_id":"themes/landscape/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1470014592000},{"_id":"themes/landscape/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1470014592000},{"_id":"themes/landscape/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1470014592000},{"_id":"themes/landscape/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1470014592000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1470014592000},{"_id":"themes/landscape/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1470014592000},{"_id":"themes/landscape/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1470014592000},{"_id":"themes/landscape/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1470014592000},{"_id":"themes/landscape/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1470014592000},{"_id":"themes/landscape/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1470014592000},{"_id":"themes/landscape/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1470014592000},{"_id":"themes/landscape/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1470014592000},{"_id":"themes/landscape/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1470014592000},{"_id":"themes/landscape/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1470014592000},{"_id":"source/tags/.DS_Store","hash":"3a6d91627803c9abf2c1b7b06a3a3caf7c89e421","modified":1469787756000},{"_id":"themes/landscape/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1470014592000},{"_id":"themes/landscape/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1470014592000},{"_id":"themes/landscape/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1470014592000},{"_id":"source/tags/index.md","hash":"5a034eac201382d18d2e8f7b53e7868e6bd948e2","modified":1469787781000},{"_id":"themes/landscape/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/images/logo.png","hash":"44201457192532a1ecadb7aacf85d987a67903e2","modified":1470014592000},{"_id":"themes/landscape/images/author.png","hash":"5b9e9293ad03091a3094ee299ce2e36231b961dd","modified":1470014592000},{"_id":"themes/landscape/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1470014592000},{"_id":"themes/landscape/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1470014592000},{"_id":"themes/landscape/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1470014592000},{"_id":"themes/landscape/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1470014592000},{"_id":"themes/landscape/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470014592000},{"_id":"themes/landscape/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470014592000},{"_id":"themes/landscape/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470014592000},{"_id":"themes/landscape/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470014592000},{"_id":"themes/landscape/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1470014592000},{"_id":"themes/landscape/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1470014592000},{"_id":"themes/landscape/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1470014592000},{"_id":"themes/landscape/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1470014592000},{"_id":"themes/landscape/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1470014592000},{"_id":"themes/landscape/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1470014592000},{"_id":"themes/landscape/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1470014592000},{"_id":"themes/landscape/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1470014592000},{"_id":"themes/landscape/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1470014592000},{"_id":"themes/landscape/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1470014592000},{"_id":"themes/landscape/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1470014592000},{"_id":"themes/landscape/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1470014592000},{"_id":"themes/landscape/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1470014592000},{"_id":"themes/landscape/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1470014592000},{"_id":"themes/landscape/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1470014592000},{"_id":"themes/landscape/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1470014592000},{"_id":"themes/landscape/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1470014592000},{"_id":"themes/landscape/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1470014592000},{"_id":"themes/landscape/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1470014592000},{"_id":"themes/landscape/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1470014592000},{"_id":"themes/landscape/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1470014592000},{"_id":"themes/landscape/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1470014592000},{"_id":"themes/landscape/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1470014592000},{"_id":"themes/landscape/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1470014592000},{"_id":"themes/landscape/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1470014592000},{"_id":"themes/landscape/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1470014592000},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1470014592000},{"_id":"themes/landscape/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1470014592000},{"_id":"themes/landscape/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1470014592000},{"_id":"themes/landscape/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1470014592000},{"_id":"themes/landscape/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1470014592000},{"_id":"themes/landscape/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470014592000},{"_id":"themes/landscape/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1470014592000},{"_id":"themes/landscape/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1470014592000},{"_id":"public/about/index.html","hash":"811240cbf4db68913182af051cf9a85d2ea07c37","modified":1470389904689},{"_id":"public/categories/index.html","hash":"2328dc93eea93b57e87b167dec2d7ca5bfcc6300","modified":1470389904690},{"_id":"public/tags/index.html","hash":"9a731eb5e75481930f18cc83ec50656991d4631e","modified":1470389904691},{"_id":"public/2016/08/04/UIScrollView部分属性/index.html","hash":"f8752ce6736daf4c3bacd1a7b9405921efa02a94","modified":1470389904691},{"_id":"public/2016/07/29/hello-world/index.html","hash":"7b54baacf68f39d18ae7a4d9f87c486d2fad7a52","modified":1470389904691},{"_id":"public/archives/index.html","hash":"b18461e58094bc48d5b4db0342fd00455922634d","modified":1470389904691},{"_id":"public/archives/2016/index.html","hash":"1622dbd76249ff666676e967f87101094909f27c","modified":1470389904691},{"_id":"public/archives/2016/07/index.html","hash":"73e0ca524107db3ae023a81820d7f42f571e76c3","modified":1470389904691},{"_id":"public/archives/2016/08/index.html","hash":"1b7a6d7d82088fe4c37bab83208000dddfc99aab","modified":1470389904691},{"_id":"public/categories/IOS/index.html","hash":"b8829dadd85d460391b250459fd4e083d162a05f","modified":1470389904691},{"_id":"public/categories/无处置放/index.html","hash":"85d896296865f2874d5188a3fcfabc24dd80fba5","modified":1470389904691},{"_id":"public/categories/计算机/index.html","hash":"d413ef3ee37c5546021567b194efb2a8eed2470a","modified":1470389904691},{"_id":"public/2016/07/30/重新开始/index.html","hash":"fe071f812952f40639947c4b0ad76e3aa34cf109","modified":1470389904691},{"_id":"public/tags/hexo/index.html","hash":"6fae5a92ad5208891ab61ee7bf8be017198c9f99","modified":1470389904691},{"_id":"public/2016/08/02/GCD队列/index.html","hash":"1abbe2b5bf6fd463b4bba2db78c9e25c19911d3b","modified":1470389904691},{"_id":"public/2016/07/31/图解TCP_IP/index.html","hash":"ad4f6b098e522417e6f580b0d500939a9f08d07d","modified":1470389904691},{"_id":"public/2016/07/31/ios编程（第四版/index.html","hash":"e387426eb3271b26ca46e6077b3fefdba498b28e","modified":1470389904691},{"_id":"public/index.html","hash":"2072c900e88346481c8de1775ad8a7dad7309eb7","modified":1470389904691},{"_id":"public/tags/读书笔记/index.html","hash":"928e6af2c7e6c302cdc70729b23ed1f42b5c7e7f","modified":1470389904763},{"_id":"public/tags/objective-c/index.html","hash":"6f80b2f45ecb14d48fda44bf9074ab9c450e9c91","modified":1470389904765},{"_id":"public/tags/杂谈/index.html","hash":"aca5b927ede94a1df5785152c62f664a0cd4599e","modified":1470389904765},{"_id":"public/tags/UIScrollView/index.html","hash":"a5a105bbef4af3424f5579ae6825341cffa52a2d","modified":1470389904765},{"_id":"public/tags/GCD/index.html","hash":"edf9670bf56455a80ee7cddc9369e6758bd48d50","modified":1470389904765},{"_id":"public/2016/07/31/objectice-c/index.html","hash":"4697d355f8f565382751d7e246b8425ec3710315","modified":1470389904765},{"_id":"public/tags/UICollectionView/index.html","hash":"7c6b9f8d51f48a4550fad5b668f2983bf4ab6705","modified":1470389904771},{"_id":"public/2016/08/05/collectionView/index.html","hash":"7a01458365a5ab3e62f3c06a7de7833d5f0daaad","modified":1470394531740},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1470389904771},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470389904771},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470389904771},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470389904771},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470389904771},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470389904771},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470389904771},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470389904771},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470389904771},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1470389904771},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1470389904771},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1470389904771},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1470389904772},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1470389904772},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1470389904772},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470389904772},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470389904772},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470389904772},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470389904772},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470389904772},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1470389904772},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1470389904772},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470389904772},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470389904772},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1470389905883},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1470389905886},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1470389905891},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1470389905891},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1470389905891},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1470389905891},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1470389905891},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1470389905891},{"_id":"public/css/main.css","hash":"e49759e6b1a99261267add3c3e93f5d521db16d3","modified":1470389905891},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1470389905891},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1470389905891},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1470389905891},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1470389905897},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1470389905897},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1470389905897},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1470389905897},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1470389905897},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1470389905897},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1470389905897},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1470389905897},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1470389905898},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1470389905898},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1470389905898},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1470389905898},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1470389905898},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1470389905898},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1470389905898},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470389905898},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470389905898},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1470389905898},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1470389905898},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1470389905898},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1470389905898},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1470389905898},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1470389905898},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1470389905898},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1470389905898},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1470389905898},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1470389905898},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1470389905898},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1470389905899},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1470389905929}],"Category":[{"name":"IOS","_id":"cirhk6m7f0003c6ruz66avshm"},{"name":"无处置放","_id":"cirhk6m7o0008c6rucgom2m16"},{"name":"计算机","_id":"cirhk6m8g000jc6ruk1rb07pq"}],"Data":[],"Page":[{"title":"about","date":"2016-07-29T15:19:36.000Z","type":"about","_content":"\n欢迎来到我的空间。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-29 23:19:36\ntype: \"about\"\n\n---\n\n欢迎来到我的空间。","updated":"2016-08-01T01:23:12.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cirhk6m960012c6ruqrlhp1xj","content":"<p>欢迎来到我的空间。</p>\n","excerpt":"","more":"<p>欢迎来到我的空间。</p>\n"},{"title":"categories","date":"2016-07-29T15:21:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-29 23:21:33\ntype: \"categories\"\n\n---\n","updated":"2016-08-01T01:23:12.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cirhk6m970013c6ruoyut1cla","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-07-29T10:08:03.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-29 18:08:03\ntype: \"tags\"\n\n\n---\n\n","updated":"2016-07-29T10:23:01.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cirhk6mdq0014c6rupb9olzte","content":"","excerpt":"","more":""}],"Post":[{"title":"GCD队列 学习与整理","date":"2016-08-02T06:07:12.000Z","_content":"\nGrand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。\n\n<!--more-->\n\n### 基本概念\n- **Serial vs. Concurrent 串行 vs. 并发**\n这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。\n- **Synchronous vs. Asynchronous 同步 vs. 异步**\n在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。\n\n### 队列分类\n1. **Serial Queues 串行队列**\n这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。\n由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。\n2. **Concurrent Queues 并发队列**\n在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。\n\n### 队列类型\n1. **The main queue**\n与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。\n2. **Global queues**\n全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。\n3. **用户队列**\n用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。\n\n### 队列创建方式\n1. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.serial\", DISPATCH_QUEUE_SERIAL);**\n生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。\n2. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.concurrent\", DISPATCH_QUEUE_CONCURRENT);**\n生成一个并发执行队列。\n3. **dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);**\n获得全局队列。\n4. **dispatch_queue_t queue = dispatch_get_main_queue()**\n获得主线程队列。\n\n### 提交 Job\n向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。\n\n1. **dispatch_async**\ndispatch_async 函数会立即返回, block会在后台异步执行。\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        NSLog(@\"Done doing something long and involved\");\n});\n```\n\t在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [textField setStringValue:@\"Done doing something long and involved\"];\n        });\n});\n```\n2. **dispatch_sync**\ndispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。\n实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。\n\n**总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。**\n\n### 常用方法\n1. **dispatch_apply**\n重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_apply([array count], queue, ^(size_t index){\n    [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n});\n[self doSomethingWith:array];\n```\n\t如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    dispatch_apply([array count], queue, ^(size_t index){\n        [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n    });\n    [self doSomethingWith:array];\n});\n```\n\t那何时才适合用 dispatch_apply 呢？\n\n\t- 自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。\n\n\t- 主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。\n\n\t- 并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。\n\t\n2. **dispatch_after**\n延迟执行block\n```objc\ndouble delayInSeconds = 1.0; \ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n});\n```\n3. **dispatch_once**\n保证在APP运行期间，block中的代码只执行一次\n```objc\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\n    // code to be executed once\n});\n```\n\n4. **dispatch_group**\n一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。\n- *dispatch_group_create*创建一个调度任务组\n- *dispatch_group_async* 把一个任务异步提交到任务组里\n- *dispatch_group_notify* 用来监听任务组事件的执行完毕\n- *dispatch_group_wait* 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\nfor(id obj in array)\n    dispatch_group_async(group, queue, ^{\n        [self doSomethingIntensiveWith:obj];\n    });\ndispatch_group_notify(group, queue, ^{\n    [self doSomethingWith:array];\n});\n```\n\n","source":"_posts/GCD队列.md","raw":"title: GCD队列 学习与整理\ndate: 2016/8/2 14:07:12  \ncategories: IOS\ntags: [GCD]\n\n---\n\nGrand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。\n\n<!--more-->\n\n### 基本概念\n- **Serial vs. Concurrent 串行 vs. 并发**\n这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。\n- **Synchronous vs. Asynchronous 同步 vs. 异步**\n在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。\n\n### 队列分类\n1. **Serial Queues 串行队列**\n这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。\n由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。\n2. **Concurrent Queues 并发队列**\n在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。\n\n### 队列类型\n1. **The main queue**\n与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。\n2. **Global queues**\n全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。\n3. **用户队列**\n用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。\n\n### 队列创建方式\n1. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.serial\", DISPATCH_QUEUE_SERIAL);**\n生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。\n2. **dispatch_queue_t queue = dispatch_queue_create(\"com.dispatch.concurrent\", DISPATCH_QUEUE_CONCURRENT);**\n生成一个并发执行队列。\n3. **dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);**\n获得全局队列。\n4. **dispatch_queue_t queue = dispatch_get_main_queue()**\n获得主线程队列。\n\n### 提交 Job\n向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。\n\n1. **dispatch_async**\ndispatch_async 函数会立即返回, block会在后台异步执行。\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        NSLog(@\"Done doing something long and involved\");\n});\n```\n\t在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：\n```objc\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        [self goDoSomethingLongAndInvolved];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [textField setStringValue:@\"Done doing something long and involved\"];\n        });\n});\n```\n2. **dispatch_sync**\ndispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。\n实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。\n\n**总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。**\n\n### 常用方法\n1. **dispatch_apply**\n重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_apply([array count], queue, ^(size_t index){\n    [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n});\n[self doSomethingWith:array];\n```\n\t如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_async(queue, ^{\n    dispatch_apply([array count], queue, ^(size_t index){\n        [self doSomethingIntensiveWith:[array objectAtIndex:index]];\n    });\n    [self doSomethingWith:array];\n});\n```\n\t那何时才适合用 dispatch_apply 呢？\n\n\t- 自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。\n\n\t- 主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。\n\n\t- 并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。\n\t\n2. **dispatch_after**\n延迟执行block\n```objc\ndouble delayInSeconds = 1.0; \ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));\ndispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n});\n```\n3. **dispatch_once**\n保证在APP运行期间，block中的代码只执行一次\n```objc\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{\n    // code to be executed once\n});\n```\n\n4. **dispatch_group**\n一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。\n- *dispatch_group_create*创建一个调度任务组\n- *dispatch_group_async* 把一个任务异步提交到任务组里\n- *dispatch_group_notify* 用来监听任务组事件的执行完毕\n- *dispatch_group_wait* 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败\n```objc\ndispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\ndispatch_group_t group = dispatch_group_create();\nfor(id obj in array)\n    dispatch_group_async(group, queue, ^{\n        [self doSomethingIntensiveWith:obj];\n    });\ndispatch_group_notify(group, queue, ^{\n    [self doSomethingWith:array];\n});\n```\n\n","slug":"GCD队列","published":1,"updated":"2016-08-03T06:03:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m700000c6ru4t81z0v1","content":"<p>Grand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。</p>\n<a id=\"more\"></a>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>Serial vs. Concurrent 串行 vs. 并发</strong><br>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</li>\n<li><strong>Synchronous vs. Asynchronous 同步 vs. 异步</strong><br>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</li>\n</ul>\n<h3 id=\"队列分类\"><a href=\"#队列分类\" class=\"headerlink\" title=\"队列分类\"></a>队列分类</h3><ol>\n<li><strong>Serial Queues 串行队列</strong><br>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。<br>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。</li>\n<li><strong>Concurrent Queues 并发队列</strong><br>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</li>\n</ol>\n<h3 id=\"队列类型\"><a href=\"#队列类型\" class=\"headerlink\" title=\"队列类型\"></a>队列类型</h3><ol>\n<li><strong>The main queue</strong><br>与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。</li>\n<li><strong>Global queues</strong><br>全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。</li>\n<li><strong>用户队列</strong><br>用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。</li>\n</ol>\n<h3 id=\"队列创建方式\"><a href=\"#队列创建方式\" class=\"headerlink\" title=\"队列创建方式\"></a>队列创建方式</h3><ol>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.serial”, DISPATCH_QUEUE_SERIAL);</strong><br>生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。</li>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.concurrent”, DISPATCH_QUEUE_CONCURRENT);</strong><br>生成一个并发执行队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</strong><br>获得全局队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_main_queue()</strong><br>获得主线程队列。</li>\n</ol>\n<h3 id=\"提交-Job\"><a href=\"#提交-Job\" class=\"headerlink\" title=\"提交 Job\"></a>提交 Job</h3><p>向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。</p>\n<ol>\n<li><p><strong>dispatch_async</strong><br>dispatch_async 函数会立即返回, block会在后台异步执行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Done doing something long and involved\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [textField setStringValue:<span class=\"string\">@\"Done doing something long and involved\"</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_sync</strong><br>dispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。<br>实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。</p>\n</li>\n</ol>\n<p><strong>总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。</strong></p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ol>\n<li><p><strong>dispatch_apply</strong><br>重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">&#125;);</div><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWith:array];</div></pre></td></tr></table></figure>\n<p> 如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 那何时才适合用 dispatch_apply 呢？</p>\n<ul>\n<li><p>自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。</p>\n</li>\n<li><p>主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。</p>\n</li>\n<li><p>并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>dispatch_after</strong><br>延迟执行block</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">1.0</span>; </div><div class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</div><div class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</div><div class=\"line\">     <span class=\"comment\">// code to be executed on the main queue after delay</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_once</strong><br>保证在APP运行期间，block中的代码只执行一次</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\"><span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">    <span class=\"comment\">// code to be executed once</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_group</strong><br>一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。</p>\n</li>\n</ol>\n<ul>\n<li><em>dispatch_group_create</em>创建一个调度任务组</li>\n<li><em>dispatch_group_async</em> 把一个任务异步提交到任务组里</li>\n<li><em>dispatch_group_notify</em> 用来监听任务组事件的执行完毕</li>\n<li><em>dispatch_group_wait</em> 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_group_t group = dispatch_group_create();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> array)</div><div class=\"line\">    dispatch_group_async(group, queue, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:obj];</div><div class=\"line\">    &#125;);</div><div class=\"line\">dispatch_group_notify(group, queue, ^&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"<p>Grand Central Dispatch或者GCD，是一套低层API，提供了一种新的方法来进行并发程序编写。从基本功能上讲，GCD有点像NSOperationQueue，他们都允许程序将任务切分为多个单一任务然后提交至工作队列来并发地或者串行地执行。GCD比之NSOpertionQueue更底层更高效，并且它不是Cocoa框架的一部分。</p>","more":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>Serial vs. Concurrent 串行 vs. 并发</strong><br>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</li>\n<li><strong>Synchronous vs. Asynchronous 同步 vs. 异步</strong><br>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</li>\n</ul>\n<h3 id=\"队列分类\"><a href=\"#队列分类\" class=\"headerlink\" title=\"队列分类\"></a>队列分类</h3><ol>\n<li><strong>Serial Queues 串行队列</strong><br>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。<br>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区，实现了锁的功能。</li>\n<li><strong>Concurrent Queues 并发队列</strong><br>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</li>\n</ol>\n<h3 id=\"队列类型\"><a href=\"#队列类型\" class=\"headerlink\" title=\"队列类型\"></a>队列类型</h3><ol>\n<li><strong>The main queue</strong><br>与主线程功能相同。实际上，提交至main queue的任务会在主线程中执行。因为main queue是与主线程相关的，所以这是一个串行队列。由于是系统默认生成的，所以无法调用dispatch_resume()和dispatch_suspend()来控制执行继续或中断。这是在一个并发队列上完成任务后更新 UI 的共同选择。</li>\n<li><strong>Global queues</strong><br>全局队列是并发队列，并由整个进程共享。进程中存在三个全局队列：高、中（默认）、低三个优先级队列。同样无法控制主线程dispatch队列的执行继续或中断。需要注意的是，三个队列不代表三个线程，可能会有更多的线程。并发队列可以根据实际情况来自动产生合理的线程数。</li>\n<li><strong>用户队列</strong><br>用户自己创建的队列。可以创建单线程的串行队列，也可以创建多线程的并行队列。</li>\n</ol>\n<h3 id=\"队列创建方式\"><a href=\"#队列创建方式\" class=\"headerlink\" title=\"队列创建方式\"></a>队列创建方式</h3><ol>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.serial”, DISPATCH_QUEUE_SERIAL);</strong><br>生成一个串行队列。第一个参数是队列的名称，在调试程序时会非常有用，所有尽量不要重名。</li>\n<li><strong>dispatch_queue_t queue = dispatch_queue_create(“com.dispatch.concurrent”, DISPATCH_QUEUE_CONCURRENT);</strong><br>生成一个并发执行队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</strong><br>获得全局队列。</li>\n<li><strong>dispatch_queue_t queue = dispatch_get_main_queue()</strong><br>获得主线程队列。</li>\n</ol>\n<h3 id=\"提交-Job\"><a href=\"#提交-Job\" class=\"headerlink\" title=\"提交 Job\"></a>提交 Job</h3><p>向一个队列提交Job很简单：调用dispatch_async或dispatch_sync函数，传入一个队列和一个block。队列会在轮到这个block执行时执行这个block的代码。</p>\n<ol>\n<li><p><strong>dispatch_async</strong><br>dispatch_async 函数会立即返回, block会在后台异步执行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Done doing something long and involved\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 在典型的Cocoa程序中，你很有可能希望在任务完成时更新界面，这就意味着需要在主线程中执行一些代码。你可以简单地完成这个任务——使用嵌套的dispatch，在外层中执行后台任务，在内层中将任务dispatch到main queue：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> goDoSomethingLongAndInvolved];</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [textField setStringValue:<span class=\"string\">@\"Done doing something long and involved\"</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_sync</strong><br>dispatch_sync //同步执行block，函数不返回，一直等到block执行完毕。编译器会根据实际情况优化代码，所以有时候你会发现block其实还在当前线程上执行，并没用产生新线程。<br>实际编程经验告诉我们，尽可能避免使用dispatch_sync，嵌套使用时还容易引起程序死锁。</p>\n</li>\n</ol>\n<p><strong>总结：队列是串行或并发的，操作队列的函数是同步或者异步执行的。</strong></p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ol>\n<li><p><strong>dispatch_apply</strong><br>重复执行block，需要注意的是这个方法是同步返回，也就是说等到所有block执行完毕才返回。多个block的运行是否并发或串行执行也依赖queue的是否并发或串行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">&#125;);</div><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWith:array];</div></pre></td></tr></table></figure>\n<p> 如果需要异步执行这些代码，只需要用dispatch_async方法，将所有代码推至后台。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(queue, ^&#123;</div><div class=\"line\">    dispatch_apply([array count], queue, ^(size_t index)&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:[array objectAtIndex:index]];</div><div class=\"line\">    &#125;);</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p> 那何时才适合用 dispatch_apply 呢？</p>\n<ul>\n<li><p>自定义串行队列：串行队列会完全抵消 dispatch_apply 的功能；你还不如直接使用普通的 for 循环。</p>\n</li>\n<li><p>主队列（串行）：与上面一样，在串行队列上不适合使用 dispatch_apply 。还是用普通的 for 循环吧。</p>\n</li>\n<li><p>并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>dispatch_after</strong><br>延迟执行block</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">1.0</span>; </div><div class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class=\"built_in\">NSEC_PER_SEC</span>));</div><div class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>)&#123;</div><div class=\"line\">     <span class=\"comment\">// code to be executed on the main queue after delay</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_once</strong><br>保证在APP运行期间，block中的代码只执行一次</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\"><span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class=\"line\">    <span class=\"comment\">// code to be executed once</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>dispatch_group</strong><br>一个dispatch group可以用来将多个block组成一组以监测这些Block全部完成或者等待全部完成时发出的消息。</p>\n</li>\n</ol>\n<ul>\n<li><em>dispatch_group_create</em>创建一个调度任务组</li>\n<li><em>dispatch_group_async</em> 把一个任务异步提交到任务组里</li>\n<li><em>dispatch_group_notify</em> 用来监听任务组事件的执行完毕</li>\n<li><em>dispatch_group_wait</em> 设置等待时间，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>);</div><div class=\"line\">dispatch_group_t group = dispatch_group_create();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> array)</div><div class=\"line\">    dispatch_group_async(group, queue, ^&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingIntensiveWith:obj];</div><div class=\"line\">    &#125;);</div><div class=\"line\">dispatch_group_notify(group, queue, ^&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWith:array];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Hello World","date":"2016-07-29T06:07:12.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016/7/29 14:07:12  \ncategories: 无处置放\ntags: hexo\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-07-29T10:30:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m760001c6ru5ls49xja","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"UICollectionView 使用方法总结","date":"2016-08-05T06:07:12.000Z","_content":"\nUICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。\n\n<!--more-->\n\n## 视图\nUICollectionView上面显示内容的视图有三种**Cell**视图、**Supplementary View**和**Decoration View**。\n- Cell视图\nCollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。\n- Supplementary View\n它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。\n例如flow layout当中的headers和footers就是可选的Supplementary View。\n- Decoration View\n这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。\n\n## 注册与重用\n### 注册\n在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。\n- registerClass: forCellWithReuseIdentifier:\n- registerNib: forCellWithReuseIdentifier:\n- registerClass: forSupplementaryViewOfKind: withReuseIdentifier:\n- registerNib: forSupplementaryViewOfKind: withReuseIdentifier:\n\n前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。\n\n### 重用\n注册后，调用一下方法进行重用:\n- dequeueReusableCellWithReuseIdentifier:forIndexPath:\n- dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:\n\n## 数据源方法\n### 基本方法\n数据源方法与UITableView类似，主要有：\n- numberOfSectionsInCollectionView:\n- collectionView: numberOfItemsInSection:\n- collectionView: cellForItemAtIndexPath:\n- collectionView: viewForSupplementaryElementOfKind: atIndexPath:\n\n### 添加头部和尾部视图\ncollection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。然而和 table view 中用法不一样，supplementary view 并不一定会作为 header 或 footer view；他们的数量和放置的位置完全由布局控制。\n```objc\n-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{\n    if ([kind isEqual:UICollectionElementKindSectionFooter] ) {\n        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];\n        mineTicketListReusableView.delegate = self;\n        return mineTicketListReusableView;\n    }else{\n    \treturn nil;\n    }\n}\n\n```\n\n### 设置高度\n```objc\n-(CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{\n    return CGSizeMake(APP_WIDTH, 130);\n}\n```\n\n## 部分代理方法\n###  移动cell\n```objc\n//返回YES允许其item移动\n- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n//移动item时回调\n- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath {\n}\n\n//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势\nUILongPressGestureRecognizer *longGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handlelongGesture:)];\n    [self.collectionView addGestureRecognizer:longGesture];\n    \n//再实现手势操作\n- (void)handlelongGesture:(UILongPressGestureRecognizer *)longGesture {\n    //判断手势状态\n    switch (longGesture.state) {\n        case UIGestureRecognizerStateBegan:{\n            //判断手势落点位置是否在路径上\n            NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:[longGesture locationInView:self.collectionView]];\n            if (indexPath == nil) {\n                break;\n            }\n            //在路径上则开始移动该路径上的cell\n            [self.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];\n        }\n            break;\n        case UIGestureRecognizerStateChanged:\n            //移动过程当中随时更新cell位置\n            [self.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:self.collectionView]];\n            break;\n        case UIGestureRecognizerStateEnded:\n            //移动结束后关闭cell移动\n            [self.collectionView endInteractiveMovement];\n            break;\n        default:\n            [self.collectionView cancelInteractiveMovement];\n            break;\n    }\n}\n\n```\n\n### 点击cell高亮\n```objc\n// 允许选中时，高亮\n-(BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n// 高亮完成后回调  \n// 放大缩小效果\n-(void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(2.0f, 2.0f);\n    }];\n}\n\n// 由高亮转成非高亮完成时的回调  \n-(void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(1.0f, 1.0f);\n    }];\n}\n```\n\n### 点击cell选中\n```objc\n// 设置是否允许选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 设置是否允许取消选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n  \n// 取消选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n```\n\n\n\n## UICollectionViewLayout子类\nUICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。\n\n\n\n\n\n\n\n","source":"_posts/collectionView.md","raw":"title: UICollectionView 使用方法总结\ndate: 2016/8/5 14:07:12  \ncategories: IOS\ntags: [UICollectionView]\n\n---\n\nUICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。\n\n<!--more-->\n\n## 视图\nUICollectionView上面显示内容的视图有三种**Cell**视图、**Supplementary View**和**Decoration View**。\n- Cell视图\nCollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。\n- Supplementary View\n它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。\n例如flow layout当中的headers和footers就是可选的Supplementary View。\n- Decoration View\n这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。\n\n## 注册与重用\n### 注册\n在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。\n- registerClass: forCellWithReuseIdentifier:\n- registerNib: forCellWithReuseIdentifier:\n- registerClass: forSupplementaryViewOfKind: withReuseIdentifier:\n- registerNib: forSupplementaryViewOfKind: withReuseIdentifier:\n\n前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。\n\n### 重用\n注册后，调用一下方法进行重用:\n- dequeueReusableCellWithReuseIdentifier:forIndexPath:\n- dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:\n\n## 数据源方法\n### 基本方法\n数据源方法与UITableView类似，主要有：\n- numberOfSectionsInCollectionView:\n- collectionView: numberOfItemsInSection:\n- collectionView: cellForItemAtIndexPath:\n- collectionView: viewForSupplementaryElementOfKind: atIndexPath:\n\n### 添加头部和尾部视图\ncollection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。然而和 table view 中用法不一样，supplementary view 并不一定会作为 header 或 footer view；他们的数量和放置的位置完全由布局控制。\n```objc\n-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath{\n    if ([kind isEqual:UICollectionElementKindSectionFooter] ) {\n        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionFooter withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];\n        mineTicketListReusableView.delegate = self;\n        return mineTicketListReusableView;\n    }else{\n    \treturn nil;\n    }\n}\n\n```\n\n### 设置高度\n```objc\n-(CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath{\n    return CGSizeMake(APP_WIDTH, 130);\n}\n```\n\n## 部分代理方法\n###  移动cell\n```objc\n//返回YES允许其item移动\n- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n//移动item时回调\n- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath {\n}\n\n//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势\nUILongPressGestureRecognizer *longGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handlelongGesture:)];\n    [self.collectionView addGestureRecognizer:longGesture];\n    \n//再实现手势操作\n- (void)handlelongGesture:(UILongPressGestureRecognizer *)longGesture {\n    //判断手势状态\n    switch (longGesture.state) {\n        case UIGestureRecognizerStateBegan:{\n            //判断手势落点位置是否在路径上\n            NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:[longGesture locationInView:self.collectionView]];\n            if (indexPath == nil) {\n                break;\n            }\n            //在路径上则开始移动该路径上的cell\n            [self.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];\n        }\n            break;\n        case UIGestureRecognizerStateChanged:\n            //移动过程当中随时更新cell位置\n            [self.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:self.collectionView]];\n            break;\n        case UIGestureRecognizerStateEnded:\n            //移动结束后关闭cell移动\n            [self.collectionView endInteractiveMovement];\n            break;\n        default:\n            [self.collectionView cancelInteractiveMovement];\n            break;\n    }\n}\n\n```\n\n### 点击cell高亮\n```objc\n// 允许选中时，高亮\n-(BOOL)collectionView:(UICollectionView *)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    return YES;\n}\n\n// 高亮完成后回调  \n// 放大缩小效果\n-(void)collectionView:(UICollectionView *)collectionView didHighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(2.0f, 2.0f);\n    }];\n}\n\n// 由高亮转成非高亮完成时的回调  \n-(void)collectionView:(UICollectionView *)collectionView didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath{\n    UICollectionViewCell *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];\n    [UIView animateWithDuration:kAnimationDuration animations:^{\n        selectedCell.transform = CGAffineTransformMakeScale(1.0f, 1.0f);\n    }];\n}\n```\n\n### 点击cell选中\n```objc\n// 设置是否允许选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 设置是否允许取消选中  \n- (BOOL)collectionView:(UICollectionView *)collectionView shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n  return YES;  \n}  \n  \n// 选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n  \n// 取消选中操作  \n- (void)collectionView:(UICollectionView *)collectionView didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {  \n  NSLog(@\"%s\", __FUNCTION__);  \n}  \n```\n\n\n\n## UICollectionViewLayout子类\nUICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。\n\n\n\n\n\n\n\n","slug":"collectionView","published":1,"updated":"2016-08-05T10:54:55.000Z","_id":"cirhk6m7g0004c6rubvztawbf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>UICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>UICollectionView上面显示内容的视图有三种<strong>Cell</strong>视图、<strong>Supplementary View</strong>和<strong>Decoration View</strong>。</p>\n<ul>\n<li>Cell视图<br>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</li>\n<li>Supplementary View<br>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。<br>例如flow layout当中的headers和footers就是可选的Supplementary View。</li>\n<li>Decoration View<br>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</li>\n</ul>\n<h2 id=\"注册与重用\"><a href=\"#注册与重用\" class=\"headerlink\" title=\"注册与重用\"></a>注册与重用</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。</p>\n<ul>\n<li>registerClass: forCellWithReuseIdentifier:</li>\n<li>registerNib: forCellWithReuseIdentifier:</li>\n<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n<li>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n</ul>\n<p>前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。</p>\n<h3 id=\"重用\"><a href=\"#重用\" class=\"headerlink\" title=\"重用\"></a>重用</h3><p>注册后，调用一下方法进行重用:</p>\n<ul>\n<li>dequeueReusableCellWithReuseIdentifier:forIndexPath:</li>\n<li>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</li>\n</ul>\n<h2 id=\"数据源方法\"><a href=\"#数据源方法\" class=\"headerlink\" title=\"数据源方法\"></a>数据源方法</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><p>数据源方法与UITableView类似，主要有：</p>\n<ul>\n<li>numberOfSectionsInCollectionView:</li>\n<li>collectionView: numberOfItemsInSection:</li>\n<li>collectionView: cellForItemAtIndexPath:</li>\n<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>\n</ul>\n<h3 id=\"添加头部和尾部视图\"><a href=\"#添加头部和尾部视图\" class=\"headerlink\" title=\"添加头部和尾部视图\"></a>添加头部和尾部视图</h3><p>collection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。然而和 table view 中用法不一样，supplementary view 并不一定会作为 header 或 footer view；他们的数量和放置的位置完全由布局控制。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UICollectionReusableView</span> *)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView viewForSupplementaryElementOfKind:(<span class=\"built_in\">NSString</span> *)kind atIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([kind isEqual:<span class=\"built_in\">UICollectionElementKindSectionFooter</span>] ) &#123;</div><div class=\"line\">        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:<span class=\"built_in\">UICollectionElementKindSectionFooter</span> withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];</div><div class=\"line\">        mineTicketListReusableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> mineTicketListReusableView;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置高度\"><a href=\"#设置高度\" class=\"headerlink\" title=\"设置高度\"></a>设置高度</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">CGSize</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView layout:(<span class=\"built_in\">UICollectionViewLayout</span> *)collectionViewLayout sizeForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">CGSizeMake</span>(APP_WIDTH, <span class=\"number\">130</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"部分代理方法\"><a href=\"#部分代理方法\" class=\"headerlink\" title=\"部分代理方法\"></a>部分代理方法</h2><h3 id=\"移动cell\"><a href=\"#移动cell\" class=\"headerlink\" title=\"移动cell\"></a>移动cell</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回YES允许其item移动</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView canMoveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移动item时回调</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView moveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)destinationIndexPath &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势</span></div><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longGesture = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(handlelongGesture:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.collectionView addGestureRecognizer:longGesture];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//再实现手势操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)handlelongGesture:(<span class=\"built_in\">UILongPressGestureRecognizer</span> *)longGesture &#123;</div><div class=\"line\">    <span class=\"comment\">//判断手势状态</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (longGesture.state) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateBegan</span>:&#123;</div><div class=\"line\">            <span class=\"comment\">//判断手势落点位置是否在路径上</span></div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.collectionView indexPathForItemAtPoint:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (indexPath == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//在路径上则开始移动该路径上的cell</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];</div><div class=\"line\">        &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateChanged</span>:</div><div class=\"line\">            <span class=\"comment\">//移动过程当中随时更新cell位置</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateEnded</span>:</div><div class=\"line\">            <span class=\"comment\">//移动结束后关闭cell移动</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView endInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView cancelInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell高亮\"><a href=\"#点击cell高亮\" class=\"headerlink\" title=\"点击cell高亮\"></a>点击cell高亮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 允许选中时，高亮</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 高亮完成后回调  </span></div><div class=\"line\"><span class=\"comment\">// 放大缩小效果</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">2.0</span>f, <span class=\"number\">2.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由高亮转成非高亮完成时的回调  </span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didUnhighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell选中\"><a href=\"#点击cell选中\" class=\"headerlink\" title=\"点击cell选中\"></a>点击cell选中</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置是否允许选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 设置是否允许取消选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 取消选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UICollectionViewLayout子类\"><a href=\"#UICollectionViewLayout子类\" class=\"headerlink\" title=\"UICollectionViewLayout子类\"></a>UICollectionViewLayout子类</h2><p>UICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。</p>\n","excerpt":"<p>UICollectionView最强大、同时显著超出UITableView的特色就是其完全灵活的布局结构。本篇将对UICollectionView的基本使用方法进行总结。</p>","more":"<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>UICollectionView上面显示内容的视图有三种<strong>Cell</strong>视图、<strong>Supplementary View</strong>和<strong>Decoration View</strong>。</p>\n<ul>\n<li>Cell视图<br>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</li>\n<li>Supplementary View<br>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。<br>例如flow layout当中的headers和footers就是可选的Supplementary View。</li>\n<li>Decoration View<br>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</li>\n</ul>\n<h2 id=\"注册与重用\"><a href=\"#注册与重用\" class=\"headerlink\" title=\"注册与重用\"></a>注册与重用</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册。</p>\n<ul>\n<li>registerClass: forCellWithReuseIdentifier:</li>\n<li>registerNib: forCellWithReuseIdentifier:</li>\n<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n<li>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</li>\n</ul>\n<p>前面两个方法是注册cell，后两个方法注册Supplementary View。注册Supplementary View时需要指定是headerview还是footer。</p>\n<h3 id=\"重用\"><a href=\"#重用\" class=\"headerlink\" title=\"重用\"></a>重用</h3><p>注册后，调用一下方法进行重用:</p>\n<ul>\n<li>dequeueReusableCellWithReuseIdentifier:forIndexPath:</li>\n<li>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</li>\n</ul>\n<h2 id=\"数据源方法\"><a href=\"#数据源方法\" class=\"headerlink\" title=\"数据源方法\"></a>数据源方法</h2><h3 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h3><p>数据源方法与UITableView类似，主要有：</p>\n<ul>\n<li>numberOfSectionsInCollectionView:</li>\n<li>collectionView: numberOfItemsInSection:</li>\n<li>collectionView: cellForItemAtIndexPath:</li>\n<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>\n</ul>\n<h3 id=\"添加头部和尾部视图\"><a href=\"#添加头部和尾部视图\" class=\"headerlink\" title=\"添加头部和尾部视图\"></a>添加头部和尾部视图</h3><p>collection view 额外管理着两种视图：supplementary views ， Supplementary views 相当于 table view 的 section header 和 footer views。像cells一样，他们的内容都由数据源对象驱动。然而和 table view 中用法不一样，supplementary view 并不一定会作为 header 或 footer view；他们的数量和放置的位置完全由布局控制。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">UICollectionReusableView</span> *)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView viewForSupplementaryElementOfKind:(<span class=\"built_in\">NSString</span> *)kind atIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([kind isEqual:<span class=\"built_in\">UICollectionElementKindSectionFooter</span>] ) &#123;</div><div class=\"line\">        MineTicketListReusableView *mineTicketListReusableView = [collectionView dequeueReusableSupplementaryViewOfKind:<span class=\"built_in\">UICollectionElementKindSectionFooter</span> withReuseIdentifier:MineTicketListReusableViewIdentifier forIndexPath:indexPath];</div><div class=\"line\">        mineTicketListReusableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> mineTicketListReusableView;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置高度\"><a href=\"#设置高度\" class=\"headerlink\" title=\"设置高度\"></a>设置高度</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">CGSize</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView layout:(<span class=\"built_in\">UICollectionViewLayout</span> *)collectionViewLayout sizeForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">CGSizeMake</span>(APP_WIDTH, <span class=\"number\">130</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"部分代理方法\"><a href=\"#部分代理方法\" class=\"headerlink\" title=\"部分代理方法\"></a>部分代理方法</h2><h3 id=\"移动cell\"><a href=\"#移动cell\" class=\"headerlink\" title=\"移动cell\"></a>移动cell</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//返回YES允许其item移动</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView canMoveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移动item时回调</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView moveItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)destinationIndexPath &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//collectionView不像tableView可以设置setEditing属性切换是否能够编辑，需要声明长按手势</span></div><div class=\"line\"><span class=\"built_in\">UILongPressGestureRecognizer</span> *longGesture = [[<span class=\"built_in\">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(handlelongGesture:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.collectionView addGestureRecognizer:longGesture];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//再实现手势操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)handlelongGesture:(<span class=\"built_in\">UILongPressGestureRecognizer</span> *)longGesture &#123;</div><div class=\"line\">    <span class=\"comment\">//判断手势状态</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (longGesture.state) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateBegan</span>:&#123;</div><div class=\"line\">            <span class=\"comment\">//判断手势落点位置是否在路径上</span></div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.collectionView indexPathForItemAtPoint:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (indexPath == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//在路径上则开始移动该路径上的cell</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView beginInteractiveMovementForItemAtIndexPath:indexPath];</div><div class=\"line\">        &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateChanged</span>:</div><div class=\"line\">            <span class=\"comment\">//移动过程当中随时更新cell位置</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView updateInteractiveMovementTargetPosition:[longGesture locationInView:<span class=\"keyword\">self</span>.collectionView]];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">UIGestureRecognizerStateEnded</span>:</div><div class=\"line\">            <span class=\"comment\">//移动结束后关闭cell移动</span></div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView endInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            [<span class=\"keyword\">self</span>.collectionView cancelInteractiveMovement];</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell高亮\"><a href=\"#点击cell高亮\" class=\"headerlink\" title=\"点击cell高亮\"></a>点击cell高亮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 允许选中时，高亮</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 高亮完成后回调  </span></div><div class=\"line\"><span class=\"comment\">// 放大缩小效果</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didHighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">2.0</span>f, <span class=\"number\">2.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由高亮转成非高亮完成时的回调  </span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didUnhighlightItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *selectedCell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:kAnimationDuration animations:^&#123;</div><div class=\"line\">        selectedCell.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f);</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"点击cell选中\"><a href=\"#点击cell选中\" class=\"headerlink\" title=\"点击cell选中\"></a>点击cell选中</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置是否允许选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 设置是否允许取消选中  </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView shouldDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">// 取消选中操作  </span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didDeselectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;  </div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%s\"</span>, __FUNCTION__);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UICollectionViewLayout子类\"><a href=\"#UICollectionViewLayout子类\" class=\"headerlink\" title=\"UICollectionViewLayout子类\"></a>UICollectionViewLayout子类</h2><p>UICollectionView和UITableView最重要的区别就是UICollectionView并不知道如何布局，它把布局机制委托给了UICollectionViewLayout子类，默认的布局方式是UICollectionFlowViewLayout类提供的流式布局。不过也可以创建自己的布局方式，通过继承UICollectionViewLayout。</p>"},{"title":"图解TCP-IP学习笔记","date":"2016-07-31T08:07:12.000Z","_content":"\n本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙\n<!--more-->\n## 网络基础知识\n### 协议分层\nISO制定了国际标准OSI，对通信系统进行了标准化。\n- **应用层**：针对特定应用的协议。\n- **表示层**：设备固有数据格式和网络标准设局格式的转换。\n- **会话层**：通信管理，负责建立和断开通信连接。\n- **传输层**：管理两个节点之间的数据传输。\n- **网络层**：地址管理和路由选择。\n- **数据链路层**：互联设备间传送和识别数据帧。\n- **物理层**：01代表高低平的互换\n\n### 电路交换与分组交换\n- **电路交换**：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。\n- **分组交换**：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。\n\n### 地址\n- **MAC地址**：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。\n- **IP地址**：IP地址由网络号和主机号两部分组成。具有层次性。\n\nMAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。\n\n### 网络的构成元素\n- **网卡**：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。\n- **中继器**：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。\n- **网桥**：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。\n- **路由器/3层交换机**：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。\n- **4-7层交换机**：负责处理OSI模型中从传输层到应用层的数据。\n- **网关**：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。\n\n## TCP/IP基础知识\n### TCP/IP模型\n- **硬件(物理层)**\n- **网络接口层(数据链路层)**\n- **互联网层(网络层)**\n + IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。\n + ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的\n + ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。\n- **传输层**\n + TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。\n + UDP：面向无连接的传输层协议。\n- **应用层(会话层以上的分层)**\n + WWW\n + 电子邮件(E-Mail)\n + 文件传输(FTP)\n + 远程登录(TELNET,SSH)\n + 网络管理(SNMP)\n \n## 数据链路\n### 数据链路的作用\n数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。\n\n数据链路的**段**是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。\n\n网络的连接和构成形态成为**网络拓扑**。\n\n### 数据链路相关技术\n**共享介质型网络**：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。\n\n**非共享介质网络**：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。\n\n以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。\n\n### 以太网\n众多数据链路中最著名，使用最广发的是以太网。\n\n## IP协议\n### IP即网络协议\n网络层的下一层——数据链路层主要作用是在互连**同一种数据链路节点**之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。\n\n配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。\n\n**网络层与数据链路层关系**：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。\n\n### IP基础知识\nIP大致分为三大模块，IP寻址，路由，IP分包和组包。\n\n为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。\n\n路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。\n\nIP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。\n\n### IP地址的基础知识\nIP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。\n\nIP地址的分类：\n1. A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识\n2. B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识\n3. C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识\n4. D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。\n\n**广播地址**用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。\n\n**多播**用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。\n\n网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做\"**子网掩码**\"的识别码通过子网网络地址细分出比ABC更小粒度的网络。  \n子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.\n\n由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于**私有IP**，在此之外的IP称为**全局IP**。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。\n\n对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。\n\n### 路由控制\n仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是**路由控制表**。\n\n路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。\n\n## IP协议相关\n### DNS\nDNS将主机名字符串转换为具体的IP地址。\n\n### ARP\n只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。\n\nARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。\n\n从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过**ARP**从IP地址获得MAC地址，实现链路内的IP通信。\n\n根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/图解TCP_IP.md","raw":"\ntitle: 图解TCP-IP学习笔记\ndate: 2016/7/31 16:07:12  \ncategories: 计算机\ntags: [读书笔记]\n\n---\n\n本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙\n<!--more-->\n## 网络基础知识\n### 协议分层\nISO制定了国际标准OSI，对通信系统进行了标准化。\n- **应用层**：针对特定应用的协议。\n- **表示层**：设备固有数据格式和网络标准设局格式的转换。\n- **会话层**：通信管理，负责建立和断开通信连接。\n- **传输层**：管理两个节点之间的数据传输。\n- **网络层**：地址管理和路由选择。\n- **数据链路层**：互联设备间传送和识别数据帧。\n- **物理层**：01代表高低平的互换\n\n### 电路交换与分组交换\n- **电路交换**：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。\n- **分组交换**：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。\n\n### 地址\n- **MAC地址**：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。\n- **IP地址**：IP地址由网络号和主机号两部分组成。具有层次性。\n\nMAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。\n\n### 网络的构成元素\n- **网卡**：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。\n- **中继器**：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。\n- **网桥**：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。\n- **路由器/3层交换机**：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。\n- **4-7层交换机**：负责处理OSI模型中从传输层到应用层的数据。\n- **网关**：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。\n\n## TCP/IP基础知识\n### TCP/IP模型\n- **硬件(物理层)**\n- **网络接口层(数据链路层)**\n- **互联网层(网络层)**\n + IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。\n + ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的\n + ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。\n- **传输层**\n + TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。\n + UDP：面向无连接的传输层协议。\n- **应用层(会话层以上的分层)**\n + WWW\n + 电子邮件(E-Mail)\n + 文件传输(FTP)\n + 远程登录(TELNET,SSH)\n + 网络管理(SNMP)\n \n## 数据链路\n### 数据链路的作用\n数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。\n\n数据链路的**段**是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。\n\n网络的连接和构成形态成为**网络拓扑**。\n\n### 数据链路相关技术\n**共享介质型网络**：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。\n\n**非共享介质网络**：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。\n\n以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。\n\n### 以太网\n众多数据链路中最著名，使用最广发的是以太网。\n\n## IP协议\n### IP即网络协议\n网络层的下一层——数据链路层主要作用是在互连**同一种数据链路节点**之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。\n\n配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。\n\n**网络层与数据链路层关系**：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。\n\n### IP基础知识\nIP大致分为三大模块，IP寻址，路由，IP分包和组包。\n\n为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。\n\n路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。\n\nIP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。\n\n### IP地址的基础知识\nIP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。\n\nIP地址的分类：\n1. A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识\n2. B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识\n3. C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识\n4. D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。\n\n**广播地址**用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。\n\n**多播**用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。\n\n网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做\"**子网掩码**\"的识别码通过子网网络地址细分出比ABC更小粒度的网络。  \n子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.\n\n由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于**私有IP**，在此之外的IP称为**全局IP**。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。\n\n对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。\n\n### 路由控制\n仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是**路由控制表**。\n\n路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。\n\n## IP协议相关\n### DNS\nDNS将主机名字符串转换为具体的IP地址。\n\n### ARP\n只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。\n\nARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。\n\n从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过**ARP**从IP地址获得MAC地址，实现链路内的IP通信。\n\n根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。\n\n\n\n\n\n\n\n\n\n\n","slug":"图解TCP_IP","published":1,"updated":"2016-08-03T08:45:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m7h0005c6ruuagtj066","content":"<p>本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙<br><a id=\"more\"></a></p>\n<h2 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h2><h3 id=\"协议分层\"><a href=\"#协议分层\" class=\"headerlink\" title=\"协议分层\"></a>协议分层</h3><p>ISO制定了国际标准OSI，对通信系统进行了标准化。</p>\n<ul>\n<li><strong>应用层</strong>：针对特定应用的协议。</li>\n<li><strong>表示层</strong>：设备固有数据格式和网络标准设局格式的转换。</li>\n<li><strong>会话层</strong>：通信管理，负责建立和断开通信连接。</li>\n<li><strong>传输层</strong>：管理两个节点之间的数据传输。</li>\n<li><strong>网络层</strong>：地址管理和路由选择。</li>\n<li><strong>数据链路层</strong>：互联设备间传送和识别数据帧。</li>\n<li><strong>物理层</strong>：01代表高低平的互换</li>\n</ul>\n<h3 id=\"电路交换与分组交换\"><a href=\"#电路交换与分组交换\" class=\"headerlink\" title=\"电路交换与分组交换\"></a>电路交换与分组交换</h3><ul>\n<li><strong>电路交换</strong>：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。</li>\n<li><strong>分组交换</strong>：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。</li>\n</ul>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><ul>\n<li><strong>MAC地址</strong>：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。</li>\n<li><strong>IP地址</strong>：IP地址由网络号和主机号两部分组成。具有层次性。</li>\n</ul>\n<p>MAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。</p>\n<h3 id=\"网络的构成元素\"><a href=\"#网络的构成元素\" class=\"headerlink\" title=\"网络的构成元素\"></a>网络的构成元素</h3><ul>\n<li><strong>网卡</strong>：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。</li>\n<li><strong>中继器</strong>：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。</li>\n<li><strong>网桥</strong>：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。</li>\n<li><strong>路由器/3层交换机</strong>：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。</li>\n<li><strong>4-7层交换机</strong>：负责处理OSI模型中从传输层到应用层的数据。</li>\n<li><strong>网关</strong>：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。</li>\n</ul>\n<h2 id=\"TCP-IP基础知识\"><a href=\"#TCP-IP基础知识\" class=\"headerlink\" title=\"TCP/IP基础知识\"></a>TCP/IP基础知识</h2><h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><ul>\n<li><strong>硬件(物理层)</strong></li>\n<li><strong>网络接口层(数据链路层)</strong></li>\n<li><strong>互联网层(网络层)</strong><ul>\n<li>IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。</li>\n<li>ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的</li>\n<li>ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。</li>\n</ul>\n</li>\n<li><strong>传输层</strong><ul>\n<li>TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。</li>\n<li>UDP：面向无连接的传输层协议。</li>\n</ul>\n</li>\n<li><strong>应用层(会话层以上的分层)</strong><ul>\n<li>WWW</li>\n<li>电子邮件(E-Mail)</li>\n<li>文件传输(FTP)</li>\n<li>远程登录(TELNET,SSH)</li>\n<li>网络管理(SNMP)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据链路\"><a href=\"#数据链路\" class=\"headerlink\" title=\"数据链路\"></a>数据链路</h2><h3 id=\"数据链路的作用\"><a href=\"#数据链路的作用\" class=\"headerlink\" title=\"数据链路的作用\"></a>数据链路的作用</h3><p>数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。</p>\n<p>数据链路的<strong>段</strong>是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。</p>\n<p>网络的连接和构成形态成为<strong>网络拓扑</strong>。</p>\n<h3 id=\"数据链路相关技术\"><a href=\"#数据链路相关技术\" class=\"headerlink\" title=\"数据链路相关技术\"></a>数据链路相关技术</h3><p><strong>共享介质型网络</strong>：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。</p>\n<p><strong>非共享介质网络</strong>：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。</p>\n<p>以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>众多数据链路中最著名，使用最广发的是以太网。</p>\n<h2 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h2><h3 id=\"IP即网络协议\"><a href=\"#IP即网络协议\" class=\"headerlink\" title=\"IP即网络协议\"></a>IP即网络协议</h3><p>网络层的下一层——数据链路层主要作用是在互连<strong>同一种数据链路节点</strong>之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。</p>\n<p>配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。</p>\n<p><strong>网络层与数据链路层关系</strong>：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。</p>\n<h3 id=\"IP基础知识\"><a href=\"#IP基础知识\" class=\"headerlink\" title=\"IP基础知识\"></a>IP基础知识</h3><p>IP大致分为三大模块，IP寻址，路由，IP分包和组包。</p>\n<p>为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。</p>\n<p>路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。</p>\n<p>IP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。</p>\n<h3 id=\"IP地址的基础知识\"><a href=\"#IP地址的基础知识\" class=\"headerlink\" title=\"IP地址的基础知识\"></a>IP地址的基础知识</h3><p>IP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。</p>\n<p>IP地址的分类：</p>\n<ol>\n<li>A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识</li>\n<li>B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识</li>\n<li>C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识</li>\n<li>D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。</li>\n</ol>\n<p><strong>广播地址</strong>用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。</p>\n<p><strong>多播</strong>用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。</p>\n<p>网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做”<strong>子网掩码</strong>“的识别码通过子网网络地址细分出比ABC更小粒度的网络。<br>子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.</p>\n<p>由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于<strong>私有IP</strong>，在此之外的IP称为<strong>全局IP</strong>。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。</p>\n<p>对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是<strong>路由控制表</strong>。</p>\n<p>路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。</p>\n<h2 id=\"IP协议相关\"><a href=\"#IP协议相关\" class=\"headerlink\" title=\"IP协议相关\"></a>IP协议相关</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS将主机名字符串转换为具体的IP地址。</p>\n<h3 id=\"ARP\"><a href=\"#ARP\" class=\"headerlink\" title=\"ARP\"></a>ARP</h3><p>只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。</p>\n<p>ARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。</p>\n<p>从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过<strong>ARP</strong>从IP地址获得MAC地址，实现链路内的IP通信。</p>\n<p>根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。</p>\n","excerpt":"<p>本文是对《图解TCP-IP》一书学习后摘录的笔记。都是网络中最基础的知识。虽然是图解，但是传图太麻烦。就不截图了。˙<br>","more":"</p>\n<h2 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h2><h3 id=\"协议分层\"><a href=\"#协议分层\" class=\"headerlink\" title=\"协议分层\"></a>协议分层</h3><p>ISO制定了国际标准OSI，对通信系统进行了标准化。</p>\n<ul>\n<li><strong>应用层</strong>：针对特定应用的协议。</li>\n<li><strong>表示层</strong>：设备固有数据格式和网络标准设局格式的转换。</li>\n<li><strong>会话层</strong>：通信管理，负责建立和断开通信连接。</li>\n<li><strong>传输层</strong>：管理两个节点之间的数据传输。</li>\n<li><strong>网络层</strong>：地址管理和路由选择。</li>\n<li><strong>数据链路层</strong>：互联设备间传送和识别数据帧。</li>\n<li><strong>物理层</strong>：01代表高低平的互换</li>\n</ul>\n<h3 id=\"电路交换与分组交换\"><a href=\"#电路交换与分组交换\" class=\"headerlink\" title=\"电路交换与分组交换\"></a>电路交换与分组交换</h3><ul>\n<li><strong>电路交换</strong>：交换机负责数据中转处理。计算机首先被连接到交换机上，交换机与交换机之间由众多通信线路再继续连接。因此计算机间发送数据时，需要通过交换机与目标主机建立通信电路。建立好后，可以一直使用该条电路，直到断开连接。一台计算机在收发信息时会独占整条电路，其他计算机只能等待该计算机处理结束。如电话线路。</li>\n<li><strong>分组交换</strong>：将要发送的数据分成多个数据包，按照一定的顺序排列后发送。数据被细分后，所有计算机可以一齐发送数据。</li>\n</ul>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><ul>\n<li><strong>MAC地址</strong>：MAC地址由设备的制造厂商针对每块网卡进行制定。通过制造商识别号，内部产品编号等确保MAC地址的唯一性。</li>\n<li><strong>IP地址</strong>：IP地址由网络号和主机号两部分组成。具有层次性。</li>\n</ul>\n<p>MAC寻址参考的表叫地址转发表，IP寻址参考的是路由控制表。交换机通过地址转发表，将数据转发至对应路由器。路由器通过路由控制表将数据转发给对应路由。再由路由转发给接收的交换机，进而转给接收的主机。。</p>\n<h3 id=\"网络的构成元素\"><a href=\"#网络的构成元素\" class=\"headerlink\" title=\"网络的构成元素\"></a>网络的构成元素</h3><ul>\n<li><strong>网卡</strong>：计算机连接网络需要使用网卡，全称：网络接口卡(NIC)。</li>\n<li><strong>中继器</strong>：OSI模型第一层，物理层面上延长网路的设备。对电缆传来的减弱的信号进行放大和发送给另外一个电缆的设备。</li>\n<li><strong>网桥</strong>：OSI模型第二层，数据链路上连接两个网络设备。能够识别数据链路层中的数据帧，将数据帧存储于内存，在重新生成一个全新的帧转发给相连的另一个网段。</li>\n<li><strong>路由器/3层交换机</strong>：OSI第三层，连接两个网络，并对分组报文进行转发的设备。网桥更具MAC地址进行处理，而路由器/3层交换机更具IP地址进行处理。</li>\n<li><strong>4-7层交换机</strong>：负责处理OSI模型中从传输层到应用层的数据。</li>\n<li><strong>网关</strong>：负责OSI传输层到应用层的数据进行转换和转发的设备。还可以根据两个不能通行的协议之间进行翻译，最终实现两者的通信。代理服务器也是网关的一种，客户端和服务器间不是在网络层上直接通信，而是从传输层到应用层对数据的访问进行各种控制和处理。防火墙也是一种网关。</li>\n</ul>\n<h2 id=\"TCP-IP基础知识\"><a href=\"#TCP-IP基础知识\" class=\"headerlink\" title=\"TCP/IP基础知识\"></a>TCP/IP基础知识</h2><h3 id=\"TCP-IP模型\"><a href=\"#TCP-IP模型\" class=\"headerlink\" title=\"TCP/IP模型\"></a>TCP/IP模型</h3><ul>\n<li><strong>硬件(物理层)</strong></li>\n<li><strong>网络接口层(数据链路层)</strong></li>\n<li><strong>互联网层(网络层)</strong><ul>\n<li>IP：跨越网络发送数据包，使整个互联网都能收到数据的协议。</li>\n<li>ICMP：IP数据包发送途中出现异常无法发送到目标地址时，给发送端一个异常通知。ICMP就是为这一功能定制的</li>\n<li>ARP：从分组数据包的IP地址解析出物理地址(MAC地址)的一种协议。</li>\n</ul>\n</li>\n<li><strong>传输层</strong><ul>\n<li>TCP：面向连接的传输层协议。可以保证两端通信主机间的通信可达。</li>\n<li>UDP：面向无连接的传输层协议。</li>\n</ul>\n</li>\n<li><strong>应用层(会话层以上的分层)</strong><ul>\n<li>WWW</li>\n<li>电子邮件(E-Mail)</li>\n<li>文件传输(FTP)</li>\n<li>远程登录(TELNET,SSH)</li>\n<li>网络管理(SNMP)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据链路\"><a href=\"#数据链路\" class=\"headerlink\" title=\"数据链路\"></a>数据链路</h2><h3 id=\"数据链路的作用\"><a href=\"#数据链路的作用\" class=\"headerlink\" title=\"数据链路的作用\"></a>数据链路的作用</h3><p>数据链路层定义了一个通过通信媒介互连的设备之间传输的规范。</p>\n<p>数据链路的<strong>段</strong>是指一个被分割的网络。引入中继器，将两条网线连接组成一个网络。</p>\n<p>网络的连接和构成形态成为<strong>网络拓扑</strong>。</p>\n<h3 id=\"数据链路相关技术\"><a href=\"#数据链路相关技术\" class=\"headerlink\" title=\"数据链路相关技术\"></a>数据链路相关技术</h3><p><strong>共享介质型网络</strong>：多个设备共享一个通信介质的一种网络。共享介质网络两种访问方式：争用方式，令牌传递方式。早期以太网就是共享介质型网络。</p>\n<p><strong>非共享介质网络</strong>：网络中每个站直连交换机，由交换机转发数据帧。此方法下，发送端和接收端并不共享通信介质。</p>\n<p>以太网交换机是持有多个端口的网桥，根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。这时所参考的，用以记录发送接口的表就是转发表。</p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>众多数据链路中最著名，使用最广发的是以太网。</p>\n<h2 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h2><h3 id=\"IP即网络协议\"><a href=\"#IP即网络协议\" class=\"headerlink\" title=\"IP即网络协议\"></a>IP即网络协议</h3><p>网络层的下一层——数据链路层主要作用是在互连<strong>同一种数据链路节点</strong>之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同数据链路，即使在不同数据链路上也能实现两端节点之间的数据包传输。</p>\n<p>配有IP的地址的设备称为主机。和路由器不同，路由器即配有IP地址，又具有路由控制能力。节点是主机和路由器的统称。</p>\n<p><strong>网络层与数据链路层关系</strong>：数据链路层提供直连两个设备的能力。与之相比，网络层的IP则负责在没有直连的两个网络之间进行通信传输。比如旅行，数据链路相当于各个中转的火车票，而IP相当于真个旅行表。没有车票，无法达到目的地，没有旅行表，则不知道做什么车。</p>\n<h3 id=\"IP基础知识\"><a href=\"#IP基础知识\" class=\"headerlink\" title=\"IP基础知识\"></a>IP基础知识</h3><p>IP大致分为三大模块，IP寻址，路由，IP分包和组包。</p>\n<p>为识别通信对端，必须有一个类似于地址的识别码进行标识。MAC地址正是用来标识同一个链路中不同计算机的一种识别码。IP也有这种地址信息，用于在连接到网络中的所有主机中识别出进行通信的目标地址。因此，TCP/IP中所有主机或路由必须设定自己的IP地址。</p>\n<p>路由控制将分组数据发送到最终目标地址。为了将数据发给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发给哪个路由器。IP包将更具这个路由表在各个数据链路上传输。</p>\n<p>IP是实现多个数据链路之间通信的协议。数据链路根据种类不同各有特点。不同数据链路最大区别在于它们各自的最大传输单位不同。为解决这个问题，IP进行分片处理。将较大的IP包分成多个较小的IP包，到达对端目标地址后再组合传输给上一层。</p>\n<h3 id=\"IP地址的基础知识\"><a href=\"#IP地址的基础知识\" class=\"headerlink\" title=\"IP地址的基础知识\"></a>IP地址的基础知识</h3><p>IP地址由网络标识和主机标识组成。网络标识必须保证相互连接的每个段的地址不重复。而相同段内相连的主机必须有相同的网络地址。IP地址的“主机标识”则不允许在同一个网段内重复出现。</p>\n<p>IP地址的分类：</p>\n<ol>\n<li>A类：以0开头的地址，即0.0.0.0-127.0.0.0，地址后24位为主机标识</li>\n<li>B类：以10开头的地址，即128.0.0.1-191.255.0.0 地址后16为为主机标识</li>\n<li>C类：以110开头的地址，即192.168.0.0-239.255.255.0 地址后8位为主机标识</li>\n<li>D类：以1110开头的地址，即224.0.0.0-239.255.255.255 无主机标识，多用于多播。</li>\n</ol>\n<p><strong>广播地址</strong>用于在同一个链路中互相连接的主机间发送数据。将主机地址部分全部设置为1，就成了广播地址。</p>\n<p><strong>多播</strong>用于将包发送给特定组内的所有主机。凡是以1110开头的都是多播地址，剩下的28为是多播的组编号。</p>\n<p>网络标识相同的计算机必须属于同一链路，但如A类B类将产生大量浪费的地址，因为不可能有那么多主机连接在一个链路上。现在，可以通过一个叫做”<strong>子网掩码</strong>“的识别码通过子网网络地址细分出比ABC更小粒度的网络。<br>子网掩码也是32位，对应网络地址的部分为1，对应主机地址的部分对应为0.</p>\n<p>由于互联网的普及，IP地址不足问题严重。于是出现私有网络的IP地址。它的地址范围：A类，10.0.0.0-10.2555.255.255；B类，172.16.0.0-172.31.255.255；C类，12.168.0.0-192.168.255.255。包含在这个范围内的IP都属于<strong>私有IP</strong>，在此之外的IP称为<strong>全局IP</strong>。内部每个终端使用私有IP，而在路由器(宽带路由器)或必要服务器上设置全局IP。当配有私有IP的主机联网时，使用NAT进行通信。</p>\n<p>对于FTTH和ADSL服务，网络供应商直接给用户分配全局IP地址，并且每次用户重连，该IP地址都可能发生变化。这里的IP地址由供应商维护，不需要用户自己申请全局IP。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>仅仅有IP地址不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要指明路由器或主机的信息，以便真正发往目标地址。保存这种信息的就是<strong>路由控制表</strong>。</p>\n<p>路由控制表记录着网络地址和下一步应该发送至路由器的地址。发送IP包时，先确定IP包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将IP包转发给相应的下一个路由器。</p>\n<h2 id=\"IP协议相关\"><a href=\"#IP协议相关\" class=\"headerlink\" title=\"IP协议相关\"></a>IP协议相关</h2><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS将主机名字符串转换为具体的IP地址。</p>\n<h3 id=\"ARP\"><a href=\"#ARP\" class=\"headerlink\" title=\"ARP\"></a>ARP</h3><p>只要确定了IP地址，就可以想这个目标发送IP数据包，但是底层数据链路层，进行实际通信是却要了解每个IP地址所对应的MAC地址。</p>\n<p>ARP是一种解决地址问题的协议。以目标IP地址为线索，用来定位下一个应该接收数据分包的网络设备对应的MAC地址。如果目标主机不再同一个链路上，可以通过ARP查找下一跳路由器的MAC地址。</p>\n<p>从一个IP地址发送ARP请求包以了解其MAC地址。目标地址将自己的MAC地址填入其中的ARP响应包返回到IP地址。由此，可以通过<strong>ARP</strong>从IP地址获得MAC地址，实现链路内的IP通信。</p>\n<p>根据ARP可以进行动态的地址解析。因此，在TCP/IP网络构造和网络通信中无需事先知道MAC地址究竟是什么，只要有IP地址即可。</p>"},{"title":"objective-c 学习笔记","date":"2016-07-31T02:07:12.000Z","_content":"\n开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。\n\n<!--more-->\n\n### 函数\n函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。\n\n### 全局变量\n在函数外声明的变量，只要类被import就能使用。  \nJava中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。  \n为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。  \n**那么这和@property有什么区别？**静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。\n\n### 指针\n&表示取地址，*表示取值。  \n空指针用nil而不是null。\n\n### 结构\n使用结构保存多个相关数据。\n```objc\nstruct Person{\n\tfloat height；\n\tint age；\n}；\n```\n使用：`struct Person mikey；`  \n使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。\n```objc\ntypedef struct {\n\tfloat height；\n\tint age；\n} Person；\n```\n使用：`Person mikey；`\n\n### 获取结构中的属性：\n当结构的使用者是一个指针时，使用->表示先获取指针p指向的数据结构，然后返回该结构的成员变量。  \n当结构的使用者是一个实例时，使用.表示访问属性。\n\n### id %@\nid表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。\nInstanceType表示方法的返回类型。  \n%@表示占位符，代表指针，会向相应指针变量对象发送description消息。\n\n### ARC\n@“…”表示创建一个NSString对象。需要知道字符串完整内容。  \n也可使用stringWithFormat方法动态创建：\n```objc\nNSString *dateString = [NSString stringWithFormat:@“The date is %@”, now]\n```\n\n### NSArray\n创建：\n```objc\nNSArray *dateList = @[now, tomorrow ,yesterday];\n```\nNSArray是无法改变的，被创建后无法添加删除以及改变顺序。  \n快速遍历数组： \n```objc\nfor(NSDate *d in daeList){}\n```\n\n### NSMutableArray\n可变数组，可添加删除和修改顺序。  \ninsertObject：atIndex在指定位置插入  \nremoveObject：atIndex删除数组中对象  \n快速遍历时不能添加删除数组内数据。\n\n### 自定义一个类\n头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始\n取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。\n\n### self\nself是指针，指向运行当前方法的对象。\n\n### 属性\n属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。  \n使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。\n\n### 继承\nNSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。\n\n### @class\n一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.  \n如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB\n\n### 类拓展\n类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。\n```objc\n\t#import “BNREmployee.h”\n\t@interface BNREmployee()\t\n\t@property (nonatomic) unsigned int officeAlarmCode;\n\t@end\n```\n注意要有括号，写在implement前面。  \n头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。\n\n### 弱引用\n通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。\n\n### Collection类\nNSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。  \nNSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。  \nNSMutable是NS的子类。  \ncollection不能保存nil。如果要保存nil则要保存NSNull类的实例。\n```objc\n[hotel addObject:[NSNull null]];\n```\n\n### 常量\n可以通过两种途径定义常量，#define和全局变量。  \n1. #define A B 告诉编译器看到A用B替换\n2. extern NSString const *NSLocaleCurrencyCode；  \nconst表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义\n\n### #include和#import\nimport会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。\n\n### enum\n定义一组常量。\n```objc\ntypedef enum{\n\tBlenderSpeedStir=1，\n\tBlenderSpeedChop=2，\n} BlenderSpeed；\n```\n还可以写成这样：\n```objc\ntypedef NS_ENUM(NSInteger, BlenderSpeed) {\n//以下是枚举成员\n    Test1A = 0,\n    Test1B = 1,\n    Test1C = 2,\n    Test1D = 3\n};\n```\n使用： BlenderSpeed speed；\n\n### 通过NSString和NSData写入文件\n没看\n\n### 回调\n没看\n\n### Block\n```objc\n^(double dividend){\n\tdouble quotient = dividend / divisor;\n\treturn quotient;\n}\n```\nBlock对象可以被当做一个实参来传递给可以接收block的方法。\n\n### 声明block变量:\n```objc \nvoid (^devowelizer)(id, NSUInteger, BOOL*);\n```\nvoid 表示返回类型  \n^ 表示是一个block对象  \ndevowelizer 表示block变量的名称  \n后面的是实参类型  \n方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block\n\n### 编写Block对象\n```objc\ndevowelizer = ^(id string,NSUInteger i, BOOL *stop){\n\t……\n};\n```\n\n### 调用block变量\n```objc\ndevowelizer(string,i,stop);\n```\n### typedef\n不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。\n```objc\ntypedef void(^ArrayEnumerationBlock)(id,NSUInteger,BOOL *);\n```\n需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。\n```objc\nArrayEnumerationBlock devowelizer；\n```\n\n### 外部变量\n在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。\n\n### 在Block中使用self\n如果要写一个使用self的Block对象，需要避免强引用循环。  \n在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。\n```objc\n_weak BNREmployee *weakSelf = self;\t//弱引用指针\n\tmyBlock = ^{\n\t\tNSLog(@“Employee:%@”,weakSelf);\n\t};\n```\n### 修改外部变量\n如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。\n\n### 协议\n协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。  \nUITableView数据源协议是UITableViewDataSource，方法声明如下：\n```objc\n@protocal UITableViewDataSource<NSObject>\n@required\n- (NSInteger)tableView:(UITableView *)tv\n\tnumberOfRowsInSection:(NSInteger) section;\n@optional\n……. \n```\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议  \n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n\t@property (nonatomic) UITableView *taskTable;\n\t@property (nonatomic) NSMutableArray *tasks;\n@end\n```\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n```objc\nself.taskTable.dataSource = self;\n```\nUITableViewDataSource设置了两个必须方法：\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n\t- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t\treturn [self.tasks count];\n\t}\n\t- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\t\tUITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t//重用cell\n\t\tNSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t\tc.textLabel.text = item;\n\t\treturn c;\n\t}\n```\n刷新表格：[self.taskTable reloadData];\n\n### 范畴\n通过范畴（category）可以为任何已有的类添加方法。  \n创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。  \n打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。\n声明示例：NSString+MD5.h\n```objc\n@interface NSString (MD5)\n+ (NSString *)md5:(NSString *)originalStr;\n@end\n```\n\n### KVC，KVO\n动态编程 ，暂时没看\n\n### 内省\n能够让他对象在程序运行时候回答关于自身的问题。\n\n\n\n\n","source":"_posts/objectice-c.md","raw":"title: objective-c 学习笔记\ndate: 2016/7/31 10:07:12  \ncategories: IOS\ntags:\n\t- objective-c\n\t- 读书笔记\n\n---\n\n开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。\n\n<!--more-->\n\n### 函数\n函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。\n\n### 全局变量\n在函数外声明的变量，只要类被import就能使用。  \nJava中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。  \n为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。  \n**那么这和@property有什么区别？**静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。\n\n### 指针\n&表示取地址，*表示取值。  \n空指针用nil而不是null。\n\n### 结构\n使用结构保存多个相关数据。\n```objc\nstruct Person{\n\tfloat height；\n\tint age；\n}；\n```\n使用：`struct Person mikey；`  \n使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。\n```objc\ntypedef struct {\n\tfloat height；\n\tint age；\n} Person；\n```\n使用：`Person mikey；`\n\n### 获取结构中的属性：\n当结构的使用者是一个指针时，使用->表示先获取指针p指向的数据结构，然后返回该结构的成员变量。  \n当结构的使用者是一个实例时，使用.表示访问属性。\n\n### id %@\nid表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。\nInstanceType表示方法的返回类型。  \n%@表示占位符，代表指针，会向相应指针变量对象发送description消息。\n\n### ARC\n@“…”表示创建一个NSString对象。需要知道字符串完整内容。  \n也可使用stringWithFormat方法动态创建：\n```objc\nNSString *dateString = [NSString stringWithFormat:@“The date is %@”, now]\n```\n\n### NSArray\n创建：\n```objc\nNSArray *dateList = @[now, tomorrow ,yesterday];\n```\nNSArray是无法改变的，被创建后无法添加删除以及改变顺序。  \n快速遍历数组： \n```objc\nfor(NSDate *d in daeList){}\n```\n\n### NSMutableArray\n可变数组，可添加删除和修改顺序。  \ninsertObject：atIndex在指定位置插入  \nremoveObject：atIndex删除数组中对象  \n快速遍历时不能添加删除数组内数据。\n\n### 自定义一个类\n头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始\n取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。\n\n### self\nself是指针，指向运行当前方法的对象。\n\n### 属性\n属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。  \n使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。\n\n### 继承\nNSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。\n\n### @class\n一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.  \n如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB\n\n### 类拓展\n类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。\n```objc\n\t#import “BNREmployee.h”\n\t@interface BNREmployee()\t\n\t@property (nonatomic) unsigned int officeAlarmCode;\n\t@end\n```\n注意要有括号，写在implement前面。  \n头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。\n\n### 弱引用\n通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。\n\n### Collection类\nNSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。  \nNSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。  \nNSMutable是NS的子类。  \ncollection不能保存nil。如果要保存nil则要保存NSNull类的实例。\n```objc\n[hotel addObject:[NSNull null]];\n```\n\n### 常量\n可以通过两种途径定义常量，#define和全局变量。  \n1. #define A B 告诉编译器看到A用B替换\n2. extern NSString const *NSLocaleCurrencyCode；  \nconst表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义\n\n### #include和#import\nimport会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。\n\n### enum\n定义一组常量。\n```objc\ntypedef enum{\n\tBlenderSpeedStir=1，\n\tBlenderSpeedChop=2，\n} BlenderSpeed；\n```\n还可以写成这样：\n```objc\ntypedef NS_ENUM(NSInteger, BlenderSpeed) {\n//以下是枚举成员\n    Test1A = 0,\n    Test1B = 1,\n    Test1C = 2,\n    Test1D = 3\n};\n```\n使用： BlenderSpeed speed；\n\n### 通过NSString和NSData写入文件\n没看\n\n### 回调\n没看\n\n### Block\n```objc\n^(double dividend){\n\tdouble quotient = dividend / divisor;\n\treturn quotient;\n}\n```\nBlock对象可以被当做一个实参来传递给可以接收block的方法。\n\n### 声明block变量:\n```objc \nvoid (^devowelizer)(id, NSUInteger, BOOL*);\n```\nvoid 表示返回类型  \n^ 表示是一个block对象  \ndevowelizer 表示block变量的名称  \n后面的是实参类型  \n方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block\n\n### 编写Block对象\n```objc\ndevowelizer = ^(id string,NSUInteger i, BOOL *stop){\n\t……\n};\n```\n\n### 调用block变量\n```objc\ndevowelizer(string,i,stop);\n```\n### typedef\n不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。\n```objc\ntypedef void(^ArrayEnumerationBlock)(id,NSUInteger,BOOL *);\n```\n需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。\n```objc\nArrayEnumerationBlock devowelizer；\n```\n\n### 外部变量\n在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。\n\n### 在Block中使用self\n如果要写一个使用self的Block对象，需要避免强引用循环。  \n在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。\n```objc\n_weak BNREmployee *weakSelf = self;\t//弱引用指针\n\tmyBlock = ^{\n\t\tNSLog(@“Employee:%@”,weakSelf);\n\t};\n```\n### 修改外部变量\n如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。\n\n### 协议\n协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。  \nUITableView数据源协议是UITableViewDataSource，方法声明如下：\n```objc\n@protocal UITableViewDataSource<NSObject>\n@required\n- (NSInteger)tableView:(UITableView *)tv\n\tnumberOfRowsInSection:(NSInteger) section;\n@optional\n……. \n```\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议  \n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n\t@property (nonatomic) UITableView *taskTable;\n\t@property (nonatomic) NSMutableArray *tasks;\n@end\n```\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n```objc\nself.taskTable.dataSource = self;\n```\nUITableViewDataSource设置了两个必须方法：\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n\t- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t\treturn [self.tasks count];\n\t}\n\t- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\t\tUITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t//重用cell\n\t\tNSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t\tc.textLabel.text = item;\n\t\treturn c;\n\t}\n```\n刷新表格：[self.taskTable reloadData];\n\n### 范畴\n通过范畴（category）可以为任何已有的类添加方法。  \n创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。  \n打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。\n声明示例：NSString+MD5.h\n```objc\n@interface NSString (MD5)\n+ (NSString *)md5:(NSString *)originalStr;\n@end\n```\n\n### KVC，KVO\n动态编程 ，暂时没看\n\n### 内省\n能够让他对象在程序运行时候回答关于自身的问题。\n\n\n\n\n","slug":"objectice-c","published":1,"updated":"2016-08-03T07:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m7n0007c6ruq4z8vlo6","content":"<p>开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。</p>\n<a id=\"more\"></a>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>在函数外声明的变量，只要类被import就能使用。<br>Java中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。<br>为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。<br><strong>那么这和@property有什么区别？</strong>静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>&amp;表示取地址，*表示取值。<br>空指针用nil而不是null。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>使用结构保存多个相关数据。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Person&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125;；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>struct Person mikey；</code><br>使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125; Person；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>Person mikey；</code></p>\n<h3 id=\"获取结构中的属性：\"><a href=\"#获取结构中的属性：\" class=\"headerlink\" title=\"获取结构中的属性：\"></a>获取结构中的属性：</h3><p>当结构的使用者是一个指针时，使用-&gt;表示先获取指针p指向的数据结构，然后返回该结构的成员变量。<br>当结构的使用者是一个实例时，使用.表示访问属性。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id %@\"></a>id %@</h3><p>id表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。<br>InstanceType表示方法的返回类型。<br>%@表示占位符，代表指针，会向相应指针变量对象发送description消息。</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>@“…”表示创建一个NSString对象。需要知道字符串完整内容。<br>也可使用stringWithFormat方法动态创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [<span class=\"built_in\">NSString</span> stringWithFormat:@“The date is %@”, now]</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h3><p>创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *dateList = @[now, tomorrow ,yesterday];</div></pre></td></tr></table></figure></p>\n<p>NSArray是无法改变的，被创建后无法添加删除以及改变顺序。<br>快速遍历数组：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">NSDate</span> *d <span class=\"keyword\">in</span> daeList)&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h3><p>可变数组，可添加删除和修改顺序。<br>insertObject：atIndex在指定位置插入<br>removeObject：atIndex删除数组中对象<br>快速遍历时不能添加删除数组内数据。</p>\n<h3 id=\"自定义一个类\"><a href=\"#自定义一个类\" class=\"headerlink\" title=\"自定义一个类\"></a>自定义一个类</h3><p>头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始<br>取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>self是指针，指向运行当前方法的对象。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。<br>使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>NSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"@class\"></a>@class</h3><p>一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.<br>如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB</p>\n<h3 id=\"类拓展\"><a href=\"#类拓展\" class=\"headerlink\" title=\"类拓展\"></a>类拓展</h3><p>类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import “BNREmployee.h”</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNREmployee</span>()\t</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> officeAlarmCode;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意要有括号，写在implement前面。<br>头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。</p>\n<h3 id=\"Collection类\"><a href=\"#Collection类\" class=\"headerlink\" title=\"Collection类\"></a>Collection类</h3><p>NSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。<br>NSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。<br>NSMutable是NS的子类。<br>collection不能保存nil。如果要保存nil则要保存NSNull类的实例。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[hotel addObject:[<span class=\"built_in\">NSNull</span> null]];</div></pre></td></tr></table></figure></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>可以通过两种途径定义常量，#define和全局变量。  </p>\n<ol>\n<li>#define A B 告诉编译器看到A用B替换</li>\n<li>extern NSString const *NSLocaleCurrencyCode；<br>const表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义</li>\n</ol>\n<h3 id=\"include和-import\"><a href=\"#include和-import\" class=\"headerlink\" title=\"#include和#import\"></a>#include和#import</h3><p>import会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。</p>\n<h3 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h3><p>定义一组常量。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</div><div class=\"line\">\tBlenderSpeedStir=<span class=\"number\">1</span>，</div><div class=\"line\">\tBlenderSpeedChop=<span class=\"number\">2</span>，</div><div class=\"line\">&#125; BlenderSpeed；</div></pre></td></tr></table></figure></p>\n<p>还可以写成这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, BlenderSpeed) &#123;</div><div class=\"line\"><span class=\"comment\">//以下是枚举成员</span></div><div class=\"line\">    Test1A = <span class=\"number\">0</span>,</div><div class=\"line\">    Test1B = <span class=\"number\">1</span>,</div><div class=\"line\">    Test1C = <span class=\"number\">2</span>,</div><div class=\"line\">    Test1D = <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用： BlenderSpeed speed；</p>\n<h3 id=\"通过NSString和NSData写入文件\"><a href=\"#通过NSString和NSData写入文件\" class=\"headerlink\" title=\"通过NSString和NSData写入文件\"></a>通过NSString和NSData写入文件</h3><p>没看</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>没看</p>\n<h3 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"keyword\">double</span> dividend)&#123;</div><div class=\"line\">\t<span class=\"keyword\">double</span> quotient = dividend / divisor;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quotient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Block对象可以被当做一个实参来传递给可以接收block的方法。</p>\n<h3 id=\"声明block变量\"><a href=\"#声明block变量\" class=\"headerlink\" title=\"声明block变量:\"></a>声明block变量:</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (^devowelizer)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSUInteger</span>, <span class=\"built_in\">BOOL</span>*);</div></pre></td></tr></table></figure>\n<p>void 表示返回类型<br>^ 表示是一个block对象<br>devowelizer 表示block变量的名称<br>后面的是实参类型<br>方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block</p>\n<h3 id=\"编写Block对象\"><a href=\"#编写Block对象\" class=\"headerlink\" title=\"编写Block对象\"></a>编写Block对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer = ^(<span class=\"keyword\">id</span> string,<span class=\"built_in\">NSUInteger</span> i, <span class=\"built_in\">BOOL</span> *stop)&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"调用block变量\"><a href=\"#调用block变量\" class=\"headerlink\" title=\"调用block变量\"></a>调用block变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer(string,i,stop);</div></pre></td></tr></table></figure>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^ArrayEnumerationBlock)(<span class=\"keyword\">id</span>,<span class=\"built_in\">NSUInteger</span>,<span class=\"built_in\">BOOL</span> *);</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayEnumerationBlock devowelizer；</div></pre></td></tr></table></figure></p>\n<h3 id=\"外部变量\"><a href=\"#外部变量\" class=\"headerlink\" title=\"外部变量\"></a>外部变量</h3><p>在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。</p>\n<h3 id=\"在Block中使用self\"><a href=\"#在Block中使用self\" class=\"headerlink\" title=\"在Block中使用self\"></a>在Block中使用self</h3><p>如果要写一个使用self的Block对象，需要避免强引用循环。<br>在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"keyword\">weak</span> BNREmployee *weakSelf = <span class=\"keyword\">self</span>;\t<span class=\"comment\">//弱引用指针</span></div><div class=\"line\">\tmyBlock = ^&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">NSLog</span>(@“Employee:%@”,weakSelf);</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改外部变量\"><a href=\"#修改外部变量\" class=\"headerlink\" title=\"修改外部变量\"></a>修改外部变量</h3><p>如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。<br>UITableView数据源协议是UITableViewDataSource，方法声明如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocal <span class=\"built_in\">UITableViewDataSource</span>&lt;<span class=\"built_in\">NSObject</span>&gt;</div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tv</div><div class=\"line\">\tnumberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>) section;</div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\">…….</div></pre></td></tr></table></figure></p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure></p>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">\t- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t<span class=\"comment\">//重用cell</span></div><div class=\"line\">\t\t<span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t\tc.textLabel.text = item;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：[self.taskTable reloadData];</p>\n<h3 id=\"范畴\"><a href=\"#范畴\" class=\"headerlink\" title=\"范畴\"></a>范畴</h3><p>通过范畴（category）可以为任何已有的类添加方法。<br>创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。<br>打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。<br>声明示例：NSString+MD5.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">MD5</span>)</span></div><div class=\"line\">+ (<span class=\"built_in\">NSString</span> *)md5:(<span class=\"built_in\">NSString</span> *)originalStr;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"KVC，KVO\"><a href=\"#KVC，KVO\" class=\"headerlink\" title=\"KVC，KVO\"></a>KVC，KVO</h3><p>动态编程 ，暂时没看</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>能够让他对象在程序运行时候回答关于自身的问题。</p>\n","excerpt":"<p>开始IOS开发必然要先学会objective-c，本篇是阅读了《object-c编程》一书后摘录的笔记，比较浅显。</p>","more":"<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>函数可以有很多局部变量，这些变量都会保存在函数的帧中。这些帧存于栈内。执行函数时，函数的帧会在栈的顶部被创建。函数返回时，帧退出栈，等待下一个调用它的函数继续执行。</p>\n<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>在函数外声明的变量，只要类被import就能使用。<br>Java中不存在这种全局变量，只能定义一个类，通过类名，资源名访问。<br>为了防止混淆问题，引用静态变量。与全局变量一样，也需要在函数外声明。不过只有某个声明静态变量的文件才能访问。好处是：既保留了非局部的、存在于任何函数之外的优点，又避免了其他文件修改的问题。<br><strong>那么这和@property有什么区别？</strong>静态变量是持久的，存储于静态存储区，在程序刚运行时就被唯一一次初始化，不会像property随着实例化而变化。</p>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>&amp;表示取地址，*表示取值。<br>空指针用nil而不是null。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>使用结构保存多个相关数据。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Person&#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125;；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>struct Person mikey；</code><br>使用typedef简化。typedef可以为某类型声明一个等价的别名，该别名用法和常规数据类型无异。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">float</span> height；</div><div class=\"line\">\t<span class=\"keyword\">int</span> age；</div><div class=\"line\">&#125; Person；</div></pre></td></tr></table></figure></p>\n<p>使用：<code>Person mikey；</code></p>\n<h3 id=\"获取结构中的属性：\"><a href=\"#获取结构中的属性：\" class=\"headerlink\" title=\"获取结构中的属性：\"></a>获取结构中的属性：</h3><p>当结构的使用者是一个指针时，使用-&gt;表示先获取指针p指向的数据结构，然后返回该结构的成员变量。<br>当结构的使用者是一个实例时，使用.表示访问属性。</p>\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id %@\"></a>id %@</h3><p>id表示可以指向任意类型的指针。变量声明不使用星号。id已经隐含了星号的作用。<br>InstanceType表示方法的返回类型。<br>%@表示占位符，代表指针，会向相应指针变量对象发送description消息。</p>\n<h3 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h3><p>@“…”表示创建一个NSString对象。需要知道字符串完整内容。<br>也可使用stringWithFormat方法动态创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *dateString = [<span class=\"built_in\">NSString</span> stringWithFormat:@“The date is %@”, now]</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSArray\"><a href=\"#NSArray\" class=\"headerlink\" title=\"NSArray\"></a>NSArray</h3><p>创建：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *dateList = @[now, tomorrow ,yesterday];</div></pre></td></tr></table></figure></p>\n<p>NSArray是无法改变的，被创建后无法添加删除以及改变顺序。<br>快速遍历数组：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">NSDate</span> *d <span class=\"keyword\">in</span> daeList)&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"NSMutableArray\"><a href=\"#NSMutableArray\" class=\"headerlink\" title=\"NSMutableArray\"></a>NSMutableArray</h3><p>可变数组，可添加删除和修改顺序。<br>insertObject：atIndex在指定位置插入<br>removeObject：atIndex删除数组中对象<br>快速遍历时不能添加删除数组内数据。</p>\n<h3 id=\"自定义一个类\"><a href=\"#自定义一个类\" class=\"headerlink\" title=\"自定义一个类\"></a>自定义一个类</h3><p>头文件以@interface开始，@end结束。花括号内声明实例变量，实例变量以下划线”_”开始<br>取方法名字和相应实例变量一样，弹药去掉实例变量开头的下划线。存方法以set开头，后面更上去掉下划线的实例变量名。</p>\n<h3 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h3><p>self是指针，指向运行当前方法的对象。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>属性的声明以@property开头，然后是类型和名称。属性自动声明存取方法。<br>使用”.”获取属性其实是在发送消息，调用getset方法。语法糖。</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>NSObject是所有类的基类，拥有一个实例变量：isa指针。任何一个对象的isa指针都指向创建爱你该对象的类。发送消息时，对象查询是否有该消息名的方法。没有则继续查询父类。父类也没有，查找参数超类。</p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"@class\"></a>@class</h3><p>一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.<br>如果ClassA.h中仅需要声明一个ClassB的指针，那么就可以在ClassA.h中声明@ClassB</p>\n<h3 id=\"类拓展\"><a href=\"#类拓展\" class=\"headerlink\" title=\"类拓展\"></a>类拓展</h3><p>类拓展是一组私有的声明。只有类和其实例才能使用在类拓展中声明的属性方法。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import “BNREmployee.h”</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNREmployee</span>()\t</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> officeAlarmCode;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>注意要有括号，写在implement前面。<br>头文件中的属性相当于公有，可以通过同样公有的getset方法获取。类拓展无法则无法在其它类中直接获得，必须手动设置getset方法。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>通过弱引用可以解决强引用循环。强引用会保留对象的拥有方，使其不会释放。弱引用则不会保留。</p>\n<h3 id=\"Collection类\"><a href=\"#Collection类\" class=\"headerlink\" title=\"Collection类\"></a>Collection类</h3><p>NSSet对象包含的内容是无序的，并且在NSSet对象中，特定对象只能出现一次。其最大用处是检查某个对象是否存在。NSMutableSet可以添加删除set内数据。<br>NSDictionary对象是键值对集合。字典的字面量语法由@和{}组成。字典里的键是独一无二的。<br>NSMutable是NS的子类。<br>collection不能保存nil。如果要保存nil则要保存NSNull类的实例。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[hotel addObject:[<span class=\"built_in\">NSNull</span> null]];</div></pre></td></tr></table></figure></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>可以通过两种途径定义常量，#define和全局变量。  </p>\n<ol>\n<li>#define A B 告诉编译器看到A用B替换</li>\n<li>extern NSString const *NSLocaleCurrencyCode；<br>const表示指针的不会变化,extern表示指针是存在的，但是会在另一个文件里定义。提示编译器遇到此变量和函数时在其他模块中寻找其定义</li>\n</ol>\n<h3 id=\"include和-import\"><a href=\"#include和-import\" class=\"headerlink\" title=\"#include和#import\"></a>#include和#import</h3><p>import会确保预处理器只导入特定的文件一次，include允许多次导入同一个文件。最好使用import。</p>\n<h3 id=\"enum\"><a href=\"#enum\" class=\"headerlink\" title=\"enum\"></a>enum</h3><p>定义一组常量。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span>&#123;</div><div class=\"line\">\tBlenderSpeedStir=<span class=\"number\">1</span>，</div><div class=\"line\">\tBlenderSpeedChop=<span class=\"number\">2</span>，</div><div class=\"line\">&#125; BlenderSpeed；</div></pre></td></tr></table></figure></p>\n<p>还可以写成这样：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, BlenderSpeed) &#123;</div><div class=\"line\"><span class=\"comment\">//以下是枚举成员</span></div><div class=\"line\">    Test1A = <span class=\"number\">0</span>,</div><div class=\"line\">    Test1B = <span class=\"number\">1</span>,</div><div class=\"line\">    Test1C = <span class=\"number\">2</span>,</div><div class=\"line\">    Test1D = <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用： BlenderSpeed speed；</p>\n<h3 id=\"通过NSString和NSData写入文件\"><a href=\"#通过NSString和NSData写入文件\" class=\"headerlink\" title=\"通过NSString和NSData写入文件\"></a>通过NSString和NSData写入文件</h3><p>没看</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><p>没看</p>\n<h3 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^(<span class=\"keyword\">double</span> dividend)&#123;</div><div class=\"line\">\t<span class=\"keyword\">double</span> quotient = dividend / divisor;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quotient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Block对象可以被当做一个实参来传递给可以接收block的方法。</p>\n<h3 id=\"声明block变量\"><a href=\"#声明block变量\" class=\"headerlink\" title=\"声明block变量:\"></a>声明block变量:</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (^devowelizer)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSUInteger</span>, <span class=\"built_in\">BOOL</span>*);</div></pre></td></tr></table></figure>\n<p>void 表示返回类型<br>^ 表示是一个block对象<br>devowelizer 表示block变量的名称<br>后面的是实参类型<br>方法的调用参数类型为^(id  string, NSUInteger i, BOOL *stop)block</p>\n<h3 id=\"编写Block对象\"><a href=\"#编写Block对象\" class=\"headerlink\" title=\"编写Block对象\"></a>编写Block对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer = ^(<span class=\"keyword\">id</span> string,<span class=\"built_in\">NSUInteger</span> i, <span class=\"built_in\">BOOL</span> *stop)&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"调用block变量\"><a href=\"#调用block变量\" class=\"headerlink\" title=\"调用block变量\"></a>调用block变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">devowelizer(string,i,stop);</div></pre></td></tr></table></figure>\n<h3 id=\"typedef\"><a href=\"#typedef\" class=\"headerlink\" title=\"typedef\"></a>typedef</h3><p>不能再方法的实现代码中使用typedef，需要在实现文件的顶部，或者头文件内使用typedef。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^ArrayEnumerationBlock)(<span class=\"keyword\">id</span>,<span class=\"built_in\">NSUInteger</span>,<span class=\"built_in\">BOOL</span> *);</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这里定义的是一个新的类型，不是变量。跟在^后面的是类型名称。创建这个新类型后，可以简化相应Block的声明。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayEnumerationBlock devowelizer；</div></pre></td></tr></table></figure></p>\n<h3 id=\"外部变量\"><a href=\"#外部变量\" class=\"headerlink\" title=\"外部变量\"></a>外部变量</h3><p>在执行Block对象时，为了确保其下的外部变量能够始终存在，相应的Block对象会捕获这些变量。意味着程序会拷贝变量的值，用Block的局部变量保存。造成强引用。</p>\n<h3 id=\"在Block中使用self\"><a href=\"#在Block中使用self\" class=\"headerlink\" title=\"在Block中使用self\"></a>在Block中使用self</h3><p>如果要写一个使用self的Block对象，需要避免强引用循环。<br>在Block外声明一个_weak指正，然后将这个指针指向Block对象使用的self，最后在Block对象中使用这个新的指针。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_<span class=\"keyword\">weak</span> BNREmployee *weakSelf = <span class=\"keyword\">self</span>;\t<span class=\"comment\">//弱引用指针</span></div><div class=\"line\">\tmyBlock = ^&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">NSLog</span>(@“Employee:%@”,weakSelf);</div><div class=\"line\">\t&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改外部变量\"><a href=\"#修改外部变量\" class=\"headerlink\" title=\"修改外部变量\"></a>修改外部变量</h3><p>如果需要在Block对象内修改某个外部变量，则可以声明相应的外部变量时，在前面加上__block关键字。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>协议可以为一个对象指定角色。类似于接口。如果某个对象要扮演特定的角色，就一定要实现相应的必须方法，并选择实现部分可选方法。<br>UITableView数据源协议是UITableViewDataSource，方法声明如下：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocal <span class=\"built_in\">UITableViewDataSource</span>&lt;<span class=\"built_in\">NSObject</span>&gt;</div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tv</div><div class=\"line\">\tnumberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>) section;</div><div class=\"line\"><span class=\"keyword\">@optional</span></div><div class=\"line\">…….</div></pre></td></tr></table></figure></p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure></p>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">\t- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”]\t\t<span class=\"comment\">//重用cell</span></div><div class=\"line\">\t\t<span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t\tc.textLabel.text = item;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> c;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：[self.taskTable reloadData];</p>\n<h3 id=\"范畴\"><a href=\"#范畴\" class=\"headerlink\" title=\"范畴\"></a>范畴</h3><p>通过范畴（category）可以为任何已有的类添加方法。<br>创建一个新文件，类型为Objective-c category，将新范畴命名为BNRVowelCounting，对应类为NSString。<br>打开NSString+BNRVowelCounting.h为范畴声明一个方法。该方法会被加入NSString类。<br>声明示例：NSString+MD5.h<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSString</span> (<span class=\"title\">MD5</span>)</span></div><div class=\"line\">+ (<span class=\"built_in\">NSString</span> *)md5:(<span class=\"built_in\">NSString</span> *)originalStr;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"KVC，KVO\"><a href=\"#KVC，KVO\" class=\"headerlink\" title=\"KVC，KVO\"></a>KVC，KVO</h3><p>动态编程 ，暂时没看</p>\n<h3 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h3><p>能够让他对象在程序运行时候回答关于自身的问题。</p>"},{"title":"重新开始","date":"2016-07-30T06:07:12.000Z","_content":"时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。\n\n<!--more-->\n\n不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。\n\n今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！\n\n\n\n![fighting](http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg)","source":"_posts/重新开始.md","raw":"---\ntitle: 重新开始\ndate: 2016/7/30 14:07:12  \ncategories: 无处置放\ntags: 杂谈\n\n---\n时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。\n\n<!--more-->\n\n不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。\n\n今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！\n\n\n\n![fighting](http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg)","slug":"重新开始","published":1,"updated":"2016-08-01T01:23:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m7p000ac6ruz7el8e3q","content":"<p>时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。</p>\n<a id=\"more\"></a>\n<p>不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。</p>\n<p>今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！</p>\n<p><img src=\"http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg\" alt=\"fighting\"></p>\n","excerpt":"<p>时隔接近一年，终于还是准备重开个人网站。过去一年学了很多，记了很多，这是我感到非常宽慰的。知识是要不断巩固的，个人网页不见得要给别人看到，自己没事的时候经常翻翻自己曾经做了什么，学了什么。无形中，也是一种记忆的脚印。</p>","more":"<p>不过，之前一来对于git，hexo的掌握程度较低，二来没有仔细检查备份，导致在迁移的时候，辛辛苦苦写的十几篇笔记都丢失了。一度非常懊恼，不想再做这些费时费力的事了。</p>\n<p>今天，终于又耐下性子，把整个个人网站又弄起来了。虽然功能还是很简单，全当是一个记录的地方吧。总之，这就算是重新开始了。这也算是一个新的起点吧。多做总结，多做分享。希望自己能够保持学习的动力，再接再厉！</p>\n<p><img src=\"http://7xwxux.com1.z0.glb.clouddn.com/Come%20on.jpg\" alt=\"fighting\"></p>"},{"title":"UIScrollView部分属性","date":"2016-08-04T06:07:12.000Z","_content":"\n碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。\n\n<!--more-->\n\n## **contentSize**、**contentInset**和**contentOffset**\n- contentSize: 就是scrollview可以滚动的区域.\n比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。\n- contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。\n比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 \n- contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。\n例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 \n\n/* 上拉刷新一般实现代码如下 */\n```objc\n- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{     \n    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  \n    float offset=scrollView.contentOffset.y;  \n    float contentHeight=scrollView.contentSize.height;  \n    float sub=contentHeight-offset;  \n    if ((scrollView.height-sub)>20) {//如果上拉距离超过20p，则加载更多数据  \n        //[self loadMoreData];//此处在view底部加载更多数据  \n    }  \n}\n```","source":"_posts/UIScrollView部分属性.md","raw":"title: UIScrollView部分属性\ndate: 2016/8/4 14:07:12  \ncategories: IOS\ntags: [UIScrollView]\n\n---\n\n碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。\n\n<!--more-->\n\n## **contentSize**、**contentInset**和**contentOffset**\n- contentSize: 就是scrollview可以滚动的区域.\n比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。\n- contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。\n比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 \n- contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。\n例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 \n\n/* 上拉刷新一般实现代码如下 */\n```objc\n- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{     \n    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  \n    float offset=scrollView.contentOffset.y;  \n    float contentHeight=scrollView.contentSize.height;  \n    float sub=contentHeight-offset;  \n    if ((scrollView.height-sub)>20) {//如果上拉距离超过20p，则加载更多数据  \n        //[self loadMoreData];//此处在view底部加载更多数据  \n    }  \n}\n```","slug":"UIScrollView部分属性","published":1,"updated":"2016-08-04T05:10:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m7s000cc6ru8056hxhe","content":"<p>碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。</p>\n<a id=\"more\"></a>\n<h2 id=\"contentSize、contentInset和contentOffset\"><a href=\"#contentSize、contentInset和contentOffset\" class=\"headerlink\" title=\"contentSize、contentInset和contentOffset\"></a><strong>contentSize</strong>、<strong>contentInset</strong>和<strong>contentOffset</strong></h2><ul>\n<li>contentSize: 就是scrollview可以滚动的区域.<br>比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。</li>\n<li>contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。<br>比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 </li>\n<li>contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。<br>例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 </li>\n</ul>\n<p>/<em> 上拉刷新一般实现代码如下 </em>/<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate&#123;     </div><div class=\"line\">    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  </div><div class=\"line\">    <span class=\"keyword\">float</span> offset=scrollView.contentOffset.y;  </div><div class=\"line\">    <span class=\"keyword\">float</span> contentHeight=scrollView.contentSize.height;  </div><div class=\"line\">    <span class=\"keyword\">float</span> sub=contentHeight-offset;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((scrollView.height-sub)&gt;<span class=\"number\">20</span>) &#123;<span class=\"comment\">//如果上拉距离超过20p，则加载更多数据  </span></div><div class=\"line\">        <span class=\"comment\">//[self loadMoreData];//此处在view底部加载更多数据  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>碰到contentSize、contentOffset不知道用法是什么，就到网上搜索。网上的介绍也比较多，基本大同小异。再此略作摘录、整理。</p>","more":"<h2 id=\"contentSize、contentInset和contentOffset\"><a href=\"#contentSize、contentInset和contentOffset\" class=\"headerlink\" title=\"contentSize、contentInset和contentOffset\"></a><strong>contentSize</strong>、<strong>contentInset</strong>和<strong>contentOffset</strong></h2><ul>\n<li>contentSize: 就是scrollview可以滚动的区域.<br>比如frame = (0 ,0 ,320 ,480) contentSize = (320 ,960)，代表你的scrollview可以上下滚动，滚动区域为frame大小的两倍。</li>\n<li>contentOffset:就是scrollview当前显示区域顶点相对于frame顶点的偏移量。<br>比如上个例子你拉到最下面，contentoffset就是(0 ,480)，也就是y偏移了480 </li>\n<li>contentInset:就是scrollview的contentview的顶点相对于scrollview的位置。<br>例如你的contentInset = (0 ,100)，那么你的contentview就是从scrollview的(0 ,100)开始显示 </li>\n</ul>\n<p>/<em> 上拉刷新一般实现代码如下 </em>/<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate&#123;     </div><div class=\"line\">    [_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];  </div><div class=\"line\">    <span class=\"keyword\">float</span> offset=scrollView.contentOffset.y;  </div><div class=\"line\">    <span class=\"keyword\">float</span> contentHeight=scrollView.contentSize.height;  </div><div class=\"line\">    <span class=\"keyword\">float</span> sub=contentHeight-offset;  </div><div class=\"line\">    <span class=\"keyword\">if</span> ((scrollView.height-sub)&gt;<span class=\"number\">20</span>) &#123;<span class=\"comment\">//如果上拉距离超过20p，则加载更多数据  </span></div><div class=\"line\">        <span class=\"comment\">//[self loadMoreData];//此处在view底部加载更多数据  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"ios编程(第四版) 学习笔记","date":"2016-07-31T06:07:12.000Z","_content":"\n本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。\n\n<!--more-->\n## 第一个ios应用\n### 声明插座变量\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n声明了一个叫questionLabel的插座变量.  \n**IBOutlet**告诉Xcode需要使用Interface Builder关联该插座变量。\n\n### 声明动作方法\n```objc\n- (IBAction)showQuestion:(id)sender{\n\t……\n}\n```\n**IBAction**关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。\n\n### 应用图标\nImages.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。\n\n## objective-c\n### 类方法\n实例方法使用的字符是-，类方法使用字符+。  \n类方法作用通常是创建对象，获取类的某些全局属性。\n\n## 通过ARC管理内存\n### copy\n当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。  \n当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。\n\n## 视图与视图层次结构\n### 视图层次结构\n任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。\n层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。\n\n### 创建UIView子类\nUIView子类模板会自动生成一个方法 **initWithFrame:**，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。\n\n```objc\n@property （nonatomic） CGRect frame；\n```\n\nCGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。    \n创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；\n  \n可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。  \n每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。  \nbounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。\n\n### 图形绘制\n没看\n\n## 视图：重绘与UIScrollView\n### ScrollView\n设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。  \n在scrollview中addSubView。\n\n## 视图控制器\n### 视图控制器\n视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。\n使用UITabBarController的类在两个视图控制器间切换。  \n\nUIViewController有一个重要属性：\n\n```objc \n@property (nonatomic, strong) UIView *view;\n```\n\n这个view就是视图的根视图。\n\n### 创建视图层次结构\n1. 覆盖UIViewController的loadView方法\n```objc\n-(void)loadView{\n        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];\n        self.view = backgroundView;\n}\n```\n\n\t此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。\n2. 通过xib创建\n.m中声明各个控件(注意控件使用弱引用)\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n\n\t再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。\n\n### 设置根视图控制器\nUIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。\n```objc\nBNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];\nself.window.rootViewController = hvc;\n```\n\nsetRootViewController其实就是将ViewController的view设置为其subview。\n\n### 加载nib文件\n加载不同名的nib文件时，需要使用**initWithNibName:Bundle:**方法。该方法的两个参数，分别用于指定NIB文件文件名和其**所在的程序包**。如果是Bundle传入nil默认是[NSBundle mainBundle];\n\n### UITabBarController\nUITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   \n\n在APPDelegate中创建两个视图控制器，加入Tabbar的**viewControllers**属性中，并将tabbar设置为rootViewController\n```objc\nUITabBarController *tabBarController = [[UITabBarController alloc] init];\ntabBarController.viewControllers = @[hvc,rvc] //两个viewController 可以写在tabbarController的viewDidLoad方法里\nself.window.rootViewController = tabBarController;\n```\n\n设置标签项，使用**tabBarItem**属性：\n\n```objc\n    UIImage *orderImage = [UIImage imageNamed:@\"tab_order\"];\n    UIImage *orderImageSel = [UIImage imageNamed:@\"tab_order_active\"];\n    orderImage = [orderImage imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    orderImageSel = [orderImageSel imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    UITabBarItem *orderTabBarItem = [[UITabBarItem alloc] initWithTitle:@\"订单\" image:orderImage selectedImage:orderImageSel];\n    orderNav.tabBarItem = orderTabBarItem;\n```\n\n为tabbar添加subview，UITabBarController里有一个**tabBar**的view\n\n```objc\nUIView *backview = [[UIView alloc] initWithFrame:self.tabBar.bounds];\n[backview setBackgroundColor:[UIColor whiteColor]];\n[self.tabBar addSubview:backview];\n```\n\n\n### 本地通知\n本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。\n```objc\nUILocalNotification *note = [][UILocalNotification alloc] init];\nnote.alertBody = @\"xxx\";\nnote.fireDate = date;\n[[UIApplication sharedApplication] scheduleLocalNotification:note];\n```\n\n### 加载和显示视图\nviewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。  \n另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。\n  \n如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。\n\n### 与视图控制器及其视图交互\n**application:didFinishLaunchingWithOptions:**\t该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。      \n**initWithNibName：bundle：**该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。  \n**loadView：**覆盖该方法，使用代码方式设置视图控制的的view属性。  \n**viewDidLoad：**该方法会在视图控制器加载完视图后被调用。  \n**viewWillAppear：**该方法会在视图控制器的view显示在屏幕上时被调用。  \n\n## 委托与文本输入\n### 委托（代理模式）\n当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。  \n例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  \n\n类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。\n\n### 协议\n凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  \n\n协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束  \n使用@optional指令，可以将写在指令后的全部声明为可选的。  \n发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  \n\n声明示例：\n```objc\n@interface BNRHypnosisViewController()<UITextFieldDelegate>\n@end\n```\n### 设置异常断点\n当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。\n\n### 类方法与实例方法\n这里需要注意：\n1. 类方法可以调用类方法。\n2. 类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。\n3. 类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。\n + 实例方法里面的self，是对象的首地址。\n + 类方法里面的self，是Class.\n4. 类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。\n\n## UITableView与UITableViewController\n### UITableView 的样式\n1. UITableViewStylePlain\n2. UITableViewStyleGrouped\n\n```objc\nUITableView *tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyle];\n```\n\n其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源.  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议\n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n@property (nonatomic) UITableView *taskTable;\n@property (nonatomic) NSMutable Array *tasks;\n@end\n```\n\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n\n```objc\nself.taskTable.dataSource = self;\n```\n\nUITableViewDataSource设置了两个必须方法：\n\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t    return [self.tasks count];\n}\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n        UITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”];\n\t    //重用cell\n\t    NSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t    c.textLabel.text = item;\n\t    return c;\n}\n```\n\n刷新表格：`[self.taskTable reloadData];`\n\n### 重用UITableViewCell对象\n需要将自定义的cell类和identifier进行关联。  \n在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell\n```objc\n-(void)viewDidLoad{\n\t[super viewDidLoad];\n\t[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@“UITableViewCell”];\n}\n```\n\n这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联\n```objc\n[self.tableView registerNib:[UINib nibWithNibName:@\"MineUserInfoCell\" bundle:nil]  forCellReuseIdentifier:@\"MineUserInfoCellIdentifier\"];\n```\n\n## 编辑UITableView\n### TableView表头视图\n表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。\n```objc\nUIView *headerView = [[[NSBundle mainBundle] loadNibNamed:@\"HotelReviewsHeaderView\" owner:nil options:nil]lastObject];\n```\n\n**loadNibNamed:owner:options:**返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。\n```objc\n- (void)viewDidLoad{\n\tUIView *header = self.headerView;\n\t[self.tableView setTableHeaderView:header];\n}\n```\n\n加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 **(UIView *)tableView:viewForHeaderInSection:**方法中设置，当只有一个section时效果相同。\n\n### TableView 插入行\n添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。\n```objc\n[self.dataSource addObject:comment];\nNSInteger lastRow = [self.tableView numberOfRowsInSection:0];\nNSIndexPath *indexPath2 = [NSIndexPath indexPathForRow:lastRow inSection:0];\n[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:UITableViewRowAnimationTop];\n```\n\n也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。\n\n### TableView 删除行\n实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。  \n第一个实参是发送该消息的UITableView对象。  \n第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。  \n第三个实参是一个NSIndexPath对象。\n```objc\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        [self.dataSource removeObjectAtIndex:indexPath.row];\n        [self.tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];\n    }\n}\n```\n\n### TableView 移动行\n使用**setEditing:animated:**方法让tableView进入编辑模式.\n实现tableView:moveRowAtIndexPath:方法\n```objc\n- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath{\n    if(sourceIndexPath == destinationIndexPath){\n        return ;\n    }else{\n        Comment *comment = [self.dataSource objectAtIndex:sourceIndexPath.row];\n        [self.dataSource removeObjectAtIndex:sourceIndexPath.row];\n        [self.dataSource insertObject:comment atIndex:destinationIndexPath.row];\n    }\n}\n```\n\n### TableView 编辑行\n使用**setEditing:animated:**方法让tableView进入编辑模式.可以使用**tableView:canEditRowAtIndexPath**方法筛选能进入编辑模式的行：\n```objc\n- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {\n    if(indexPath.row == (10 | 12 | 14)){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n如果不实现该方法，默认为YES。\n\n### TableView 修改删除按钮\n```objc\n- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath{\n    return @\"删除\";\n}\n```\n\n## UINavigationController\n### UINavigationController对象\nUINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。\n\nUINavigationController对象有一个名为**viewControllers**的属性，指向一个负责保存视图控制器的数组。**topViewController**属性是一个指针，指向当前位于栈顶的视图控制器。\n\nUINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有**两个子视图**：一个是**UINavigationBar对象**，一个是**topViewController的视图**。\n\n初始化UINavigationController对象：\n```objc\nUINavigationController *navController = [[UINavigationController alloc]initWithRootViewController:viewController];\n```\n\n### 关联xib\n不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）\n\n在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。\n\n设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。\n\n### 将视图控制器压入栈\n使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。\n```objc\n[self.navigationController pushViewController:detailController animated:YES];\n```\n视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。\n\n### 视图控制器间传递数据\n\n### NavigationBar\nUIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。\n\nUINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。\n\n创建一个buttonItem：\n```objc\n- (void)initNavigationView{\n    UIButton *backBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 26, 44)];\n    [backBtn setImage:[UIImage imageNamed:@\"systemback\"] forState:UIControlStateNormal];\n    [backBtn addTarget:self action:@selector(backButtonPressedForOrder:) forControlEvents:UIControlEventTouchUpInside];\n    UIBarButtonItem *leftItem  = [[UIBarButtonItem alloc]initWithCustomView:backBtn];\n    [self.navigationItem setLeftBarButtonItem:leftItem];\n}\n```\n","source":"_posts/ios编程（第四版.md","raw":"title: ios编程(第四版) 学习笔记\ndate: 2016/7/31 14:07:12  \ncategories: IOS\ntags: [读书笔记]\n\n---\n\n本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。\n\n<!--more-->\n## 第一个ios应用\n### 声明插座变量\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n声明了一个叫questionLabel的插座变量.  \n**IBOutlet**告诉Xcode需要使用Interface Builder关联该插座变量。\n\n### 声明动作方法\n```objc\n- (IBAction)showQuestion:(id)sender{\n\t……\n}\n```\n**IBAction**关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。\n\n### 应用图标\nImages.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。\n\n## objective-c\n### 类方法\n实例方法使用的字符是-，类方法使用字符+。  \n类方法作用通常是创建对象，获取类的某些全局属性。\n\n## 通过ARC管理内存\n### copy\n当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。  \n当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。\n\n## 视图与视图层次结构\n### 视图层次结构\n任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。\n层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。\n\n### 创建UIView子类\nUIView子类模板会自动生成一个方法 **initWithFrame:**，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。\n\n```objc\n@property （nonatomic） CGRect frame；\n```\n\nCGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。    \n创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；\n  \n可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。  \n每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。  \nbounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。\n\n### 图形绘制\n没看\n\n## 视图：重绘与UIScrollView\n### ScrollView\n设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。  \n在scrollview中addSubView。\n\n## 视图控制器\n### 视图控制器\n视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。\n使用UITabBarController的类在两个视图控制器间切换。  \n\nUIViewController有一个重要属性：\n\n```objc \n@property (nonatomic, strong) UIView *view;\n```\n\n这个view就是视图的根视图。\n\n### 创建视图层次结构\n1. 覆盖UIViewController的loadView方法\n```objc\n-(void)loadView{\n        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];\n        self.view = backgroundView;\n}\n```\n\n\t此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。\n2. 通过xib创建\n.m中声明各个控件(注意控件使用弱引用)\n```objc\n@property(nonatomic, weak) IBOutlet UILabel *questionLabel\n```\n\n\t再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。\n\n### 设置根视图控制器\nUIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。\n```objc\nBNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];\nself.window.rootViewController = hvc;\n```\n\nsetRootViewController其实就是将ViewController的view设置为其subview。\n\n### 加载nib文件\n加载不同名的nib文件时，需要使用**initWithNibName:Bundle:**方法。该方法的两个参数，分别用于指定NIB文件文件名和其**所在的程序包**。如果是Bundle传入nil默认是[NSBundle mainBundle];\n\n### UITabBarController\nUITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   \n\n在APPDelegate中创建两个视图控制器，加入Tabbar的**viewControllers**属性中，并将tabbar设置为rootViewController\n```objc\nUITabBarController *tabBarController = [[UITabBarController alloc] init];\ntabBarController.viewControllers = @[hvc,rvc] //两个viewController 可以写在tabbarController的viewDidLoad方法里\nself.window.rootViewController = tabBarController;\n```\n\n设置标签项，使用**tabBarItem**属性：\n\n```objc\n    UIImage *orderImage = [UIImage imageNamed:@\"tab_order\"];\n    UIImage *orderImageSel = [UIImage imageNamed:@\"tab_order_active\"];\n    orderImage = [orderImage imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    orderImageSel = [orderImageSel imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    UITabBarItem *orderTabBarItem = [[UITabBarItem alloc] initWithTitle:@\"订单\" image:orderImage selectedImage:orderImageSel];\n    orderNav.tabBarItem = orderTabBarItem;\n```\n\n为tabbar添加subview，UITabBarController里有一个**tabBar**的view\n\n```objc\nUIView *backview = [[UIView alloc] initWithFrame:self.tabBar.bounds];\n[backview setBackgroundColor:[UIColor whiteColor]];\n[self.tabBar addSubview:backview];\n```\n\n\n### 本地通知\n本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。\n```objc\nUILocalNotification *note = [][UILocalNotification alloc] init];\nnote.alertBody = @\"xxx\";\nnote.fireDate = date;\n[[UIApplication sharedApplication] scheduleLocalNotification:note];\n```\n\n### 加载和显示视图\nviewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。  \n另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。\n  \n如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。\n\n### 与视图控制器及其视图交互\n**application:didFinishLaunchingWithOptions:**\t该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。      \n**initWithNibName：bundle：**该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。  \n**loadView：**覆盖该方法，使用代码方式设置视图控制的的view属性。  \n**viewDidLoad：**该方法会在视图控制器加载完视图后被调用。  \n**viewWillAppear：**该方法会在视图控制器的view显示在屏幕上时被调用。  \n\n## 委托与文本输入\n### 委托（代理模式）\n当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。  \n例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  \n\n类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。\n\n### 协议\n凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  \n\n协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束  \n使用@optional指令，可以将写在指令后的全部声明为可选的。  \n发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  \n\n声明示例：\n```objc\n@interface BNRHypnosisViewController()<UITextFieldDelegate>\n@end\n```\n### 设置异常断点\n当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。\n\n### 类方法与实例方法\n这里需要注意：\n1. 类方法可以调用类方法。\n2. 类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。\n3. 类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。\n + 实例方法里面的self，是对象的首地址。\n + 类方法里面的self，是Class.\n4. 类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。\n\n## UITableView与UITableViewController\n### UITableView 的样式\n1. UITableViewStylePlain\n2. UITableViewStyleGrouped\n\n```objc\nUITableView *tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStyle];\n```\n\n其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。\n\n### UITableView对象提供数据\nUITableView不包含任何数据，需要提供一个数据源.  \n我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。  \n在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议\n```objc\n@interface BNRAppDelegate: UIResponder <UIApplicationDelegate,UITableViewDataSource>\n@property (nonatomic) UITableView *taskTable;\n@property (nonatomic) NSMutable Array *tasks;\n@end\n```\n\n在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源\n\n```objc\nself.taskTable.dataSource = self;\n```\n\nUITableViewDataSource设置了两个必须方法：\n\n1. 根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）\n2. 根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）\n```objc\n@implementation BNRAppDelegate\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n\t    return [self.tasks count];\n}\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n        UITableViewCell *c = [self.taskTable dequeueReusableCellWithIdentifier:@“cell”];\n\t    //重用cell\n\t    NSString *item = [self.tasks objectAtIndex:indexPath.row];\n\t    c.textLabel.text = item;\n\t    return c;\n}\n```\n\n刷新表格：`[self.taskTable reloadData];`\n\n### 重用UITableViewCell对象\n需要将自定义的cell类和identifier进行关联。  \n在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell\n```objc\n-(void)viewDidLoad{\n\t[super viewDidLoad];\n\t[self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:@“UITableViewCell”];\n}\n```\n\n这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联\n```objc\n[self.tableView registerNib:[UINib nibWithNibName:@\"MineUserInfoCell\" bundle:nil]  forCellReuseIdentifier:@\"MineUserInfoCellIdentifier\"];\n```\n\n## 编辑UITableView\n### TableView表头视图\n表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。\n```objc\nUIView *headerView = [[[NSBundle mainBundle] loadNibNamed:@\"HotelReviewsHeaderView\" owner:nil options:nil]lastObject];\n```\n\n**loadNibNamed:owner:options:**返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。\n```objc\n- (void)viewDidLoad{\n\tUIView *header = self.headerView;\n\t[self.tableView setTableHeaderView:header];\n}\n```\n\n加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 **(UIView *)tableView:viewForHeaderInSection:**方法中设置，当只有一个section时效果相同。\n\n### TableView 插入行\n添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。\n```objc\n[self.dataSource addObject:comment];\nNSInteger lastRow = [self.tableView numberOfRowsInSection:0];\nNSIndexPath *indexPath2 = [NSIndexPath indexPathForRow:lastRow inSection:0];\n[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:UITableViewRowAnimationTop];\n```\n\n也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。\n\n### TableView 删除行\n实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。  \n第一个实参是发送该消息的UITableView对象。  \n第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。  \n第三个实参是一个NSIndexPath对象。\n```objc\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        [self.dataSource removeObjectAtIndex:indexPath.row];\n        [self.tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];\n    }\n}\n```\n\n### TableView 移动行\n使用**setEditing:animated:**方法让tableView进入编辑模式.\n实现tableView:moveRowAtIndexPath:方法\n```objc\n- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath{\n    if(sourceIndexPath == destinationIndexPath){\n        return ;\n    }else{\n        Comment *comment = [self.dataSource objectAtIndex:sourceIndexPath.row];\n        [self.dataSource removeObjectAtIndex:sourceIndexPath.row];\n        [self.dataSource insertObject:comment atIndex:destinationIndexPath.row];\n    }\n}\n```\n\n### TableView 编辑行\n使用**setEditing:animated:**方法让tableView进入编辑模式.可以使用**tableView:canEditRowAtIndexPath**方法筛选能进入编辑模式的行：\n```objc\n- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {\n    if(indexPath.row == (10 | 12 | 14)){\n        return NO;\n    }else{\n        return YES;\n    }\n}\n```\n如果不实现该方法，默认为YES。\n\n### TableView 修改删除按钮\n```objc\n- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath{\n    return @\"删除\";\n}\n```\n\n## UINavigationController\n### UINavigationController对象\nUINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。\n\nUINavigationController对象有一个名为**viewControllers**的属性，指向一个负责保存视图控制器的数组。**topViewController**属性是一个指针，指向当前位于栈顶的视图控制器。\n\nUINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有**两个子视图**：一个是**UINavigationBar对象**，一个是**topViewController的视图**。\n\n初始化UINavigationController对象：\n```objc\nUINavigationController *navController = [[UINavigationController alloc]initWithRootViewController:viewController];\n```\n\n### 关联xib\n不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）\n\n在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。\n\n设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。\n\n### 将视图控制器压入栈\n使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。\n```objc\n[self.navigationController pushViewController:detailController animated:YES];\n```\n视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。\n\n### 视图控制器间传递数据\n\n### NavigationBar\nUIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。\n\nUINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。\n\n创建一个buttonItem：\n```objc\n- (void)initNavigationView{\n    UIButton *backBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 26, 44)];\n    [backBtn setImage:[UIImage imageNamed:@\"systemback\"] forState:UIControlStateNormal];\n    [backBtn addTarget:self action:@selector(backButtonPressedForOrder:) forControlEvents:UIControlEventTouchUpInside];\n    UIBarButtonItem *leftItem  = [[UIBarButtonItem alloc]initWithCustomView:backBtn];\n    [self.navigationItem setLeftBarButtonItem:leftItem];\n}\n```\n","slug":"ios编程（第四版","published":1,"updated":"2016-08-03T08:06:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirhk6m8c000hc6ru4gy35lqf","content":"<p>本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。</p>\n<a id=\"more\"></a>\n<h2 id=\"第一个ios应用\"><a href=\"#第一个ios应用\" class=\"headerlink\" title=\"第一个ios应用\"></a>第一个ios应用</h2><h3 id=\"声明插座变量\"><a href=\"#声明插座变量\" class=\"headerlink\" title=\"声明插座变量\"></a>声明插座变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p>声明了一个叫questionLabel的插座变量.<br><strong>IBOutlet</strong>告诉Xcode需要使用Interface Builder关联该插座变量。</p>\n<h3 id=\"声明动作方法\"><a href=\"#声明动作方法\" class=\"headerlink\" title=\"声明动作方法\"></a>声明动作方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showQuestion:(<span class=\"keyword\">id</span>)sender&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>IBAction</strong>关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。</p>\n<h3 id=\"应用图标\"><a href=\"#应用图标\" class=\"headerlink\" title=\"应用图标\"></a>应用图标</h3><p>Images.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。</p>\n<h2 id=\"objective-c\"><a href=\"#objective-c\" class=\"headerlink\" title=\"objective-c\"></a>objective-c</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>实例方法使用的字符是-，类方法使用字符+。<br>类方法作用通常是创建对象，获取类的某些全局属性。</p>\n<h2 id=\"通过ARC管理内存\"><a href=\"#通过ARC管理内存\" class=\"headerlink\" title=\"通过ARC管理内存\"></a>通过ARC管理内存</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。<br>当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。</p>\n<h2 id=\"视图与视图层次结构\"><a href=\"#视图与视图层次结构\" class=\"headerlink\" title=\"视图与视图层次结构\"></a>视图与视图层次结构</h2><h3 id=\"视图层次结构\"><a href=\"#视图层次结构\" class=\"headerlink\" title=\"视图层次结构\"></a>视图层次结构</h3><p>任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。<br>层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。</p>\n<h3 id=\"创建UIView子类\"><a href=\"#创建UIView子类\" class=\"headerlink\" title=\"创建UIView子类\"></a>创建UIView子类</h3><p>UIView子类模板会自动生成一个方法 <strong>initWithFrame:</strong>，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> （<span class=\"keyword\">nonatomic</span>） <span class=\"built_in\">CGRect</span> frame；</div></pre></td></tr></table></figure>\n<p>CGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。<br>创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；</p>\n<p>可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。<br>每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。<br>bounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。</p>\n<h3 id=\"图形绘制\"><a href=\"#图形绘制\" class=\"headerlink\" title=\"图形绘制\"></a>图形绘制</h3><p>没看</p>\n<h2 id=\"视图：重绘与UIScrollView\"><a href=\"#视图：重绘与UIScrollView\" class=\"headerlink\" title=\"视图：重绘与UIScrollView\"></a>视图：重绘与UIScrollView</h2><h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p>设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。<br>在scrollview中addSubView。</p>\n<h2 id=\"视图控制器\"><a href=\"#视图控制器\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h2><h3 id=\"视图控制器-1\"><a href=\"#视图控制器-1\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h3><p>视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。<br>使用UITabBarController的类在两个视图控制器间切换。  </p>\n<p>UIViewController有一个重要属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIView</span> *view;</div></pre></td></tr></table></figure>\n<p>这个view就是视图的根视图。</p>\n<h3 id=\"创建视图层次结构\"><a href=\"#创建视图层次结构\" class=\"headerlink\" title=\"创建视图层次结构\"></a>创建视图层次结构</h3><ol>\n<li><p>覆盖UIViewController的loadView方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)loadView&#123;</div><div class=\"line\">        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = backgroundView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。</p>\n</li>\n<li><p>通过xib创建<br>.m中声明各个控件(注意控件使用弱引用)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p> 再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。</p>\n</li>\n</ol>\n<h3 id=\"设置根视图控制器\"><a href=\"#设置根视图控制器\" class=\"headerlink\" title=\"设置根视图控制器\"></a>设置根视图控制器</h3><p>UIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = hvc;</div></pre></td></tr></table></figure></p>\n<p>setRootViewController其实就是将ViewController的view设置为其subview。</p>\n<h3 id=\"加载nib文件\"><a href=\"#加载nib文件\" class=\"headerlink\" title=\"加载nib文件\"></a>加载nib文件</h3><p>加载不同名的nib文件时，需要使用<strong>initWithNibName:Bundle:</strong>方法。该方法的两个参数，分别用于指定NIB文件文件名和其<strong>所在的程序包</strong>。如果是Bundle传入nil默认是[NSBundle mainBundle];</p>\n<h3 id=\"UITabBarController\"><a href=\"#UITabBarController\" class=\"headerlink\" title=\"UITabBarController\"></a>UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   </p>\n<p>在APPDelegate中创建两个视图控制器，加入Tabbar的<strong>viewControllers</strong>属性中，并将tabbar设置为rootViewController<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITabBarController</span> *tabBarController = [[<span class=\"built_in\">UITabBarController</span> alloc] init];</div><div class=\"line\">tabBarController.viewControllers = @[hvc,rvc] <span class=\"comment\">//两个viewController 可以写在tabbarController的viewDidLoad方法里</span></div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = tabBarController;</div></pre></td></tr></table></figure></p>\n<p>设置标签项，使用<strong>tabBarItem</strong>属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order\"</span>];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImageSel = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order_active\"</span>];</div><div class=\"line\">orderImage = [orderImage imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\">orderImageSel = [orderImageSel imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\"><span class=\"built_in\">UITabBarItem</span> *orderTabBarItem = [[<span class=\"built_in\">UITabBarItem</span> alloc] initWithTitle:<span class=\"string\">@\"订单\"</span> image:orderImage selectedImage:orderImageSel];</div><div class=\"line\">orderNav.tabBarItem = orderTabBarItem;</div></pre></td></tr></table></figure>\n<p>为tabbar添加subview，UITabBarController里有一个<strong>tabBar</strong>的view</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *backview = [[<span class=\"built_in\">UIView</span> alloc] initWithFrame:<span class=\"keyword\">self</span>.tabBar.bounds];</div><div class=\"line\">[backview setBackgroundColor:[<span class=\"built_in\">UIColor</span> whiteColor]];</div><div class=\"line\">[<span class=\"keyword\">self</span>.tabBar addSubview:backview];</div></pre></td></tr></table></figure>\n<h3 id=\"本地通知\"><a href=\"#本地通知\" class=\"headerlink\" title=\"本地通知\"></a>本地通知</h3><p>本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILocalNotification</span> *note = [][<span class=\"built_in\">UILocalNotification</span> alloc] init];</div><div class=\"line\">note.alertBody = <span class=\"string\">@\"xxx\"</span>;</div><div class=\"line\">note.fireDate = date;</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] scheduleLocalNotification:note];</div></pre></td></tr></table></figure></p>\n<h3 id=\"加载和显示视图\"><a href=\"#加载和显示视图\" class=\"headerlink\" title=\"加载和显示视图\"></a>加载和显示视图</h3><p>viewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。<br>另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。</p>\n<p>如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。</p>\n<h3 id=\"与视图控制器及其视图交互\"><a href=\"#与视图控制器及其视图交互\" class=\"headerlink\" title=\"与视图控制器及其视图交互\"></a>与视图控制器及其视图交互</h3><p><strong>application:didFinishLaunchingWithOptions:</strong>    该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。<br><strong>initWithNibName：bundle：</strong>该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。<br><strong>loadView：</strong>覆盖该方法，使用代码方式设置视图控制的的view属性。<br><strong>viewDidLoad：</strong>该方法会在视图控制器加载完视图后被调用。<br><strong>viewWillAppear：</strong>该方法会在视图控制器的view显示在屏幕上时被调用。  </p>\n<h2 id=\"委托与文本输入\"><a href=\"#委托与文本输入\" class=\"headerlink\" title=\"委托与文本输入\"></a>委托与文本输入</h2><h3 id=\"委托（代理模式）\"><a href=\"#委托（代理模式）\" class=\"headerlink\" title=\"委托（代理模式）\"></a>委托（代理模式）</h3><p>当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。<br>例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  </p>\n<p>类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  </p>\n<p>协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束<br>使用@optional指令，可以将写在指令后的全部声明为可选的。<br>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  </p>\n<p>声明示例：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRHypnosisViewController</span>()&lt;<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"设置异常断点\"><a href=\"#设置异常断点\" class=\"headerlink\" title=\"设置异常断点\"></a>设置异常断点</h3><p>当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。</p>\n<h3 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h3><p>这里需要注意：</p>\n<ol>\n<li>类方法可以调用类方法。</li>\n<li>类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。</li>\n<li>类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。<ul>\n<li>实例方法里面的self，是对象的首地址。</li>\n<li>类方法里面的self，是Class.</li>\n</ul>\n</li>\n<li>类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。</li>\n</ol>\n<h2 id=\"UITableView与UITableViewController\"><a href=\"#UITableView与UITableViewController\" class=\"headerlink\" title=\"UITableView与UITableViewController\"></a>UITableView与UITableViewController</h2><h3 id=\"UITableView-的样式\"><a href=\"#UITableView-的样式\" class=\"headerlink\" title=\"UITableView 的样式\"></a>UITableView 的样式</h3><ol>\n<li>UITableViewStylePlain</li>\n<li>UITableViewStyleGrouped</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITableView</span> *tableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span> style:<span class=\"built_in\">UITableViewStyle</span>];</div></pre></td></tr></table></figure>\n<p>其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。</p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源.<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutable</span> Array *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”];</div><div class=\"line\">\t    <span class=\"comment\">//重用cell</span></div><div class=\"line\">\t    <span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t    c.textLabel.text = item;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：<code>[self.taskTable reloadData];</code></p>\n<h3 id=\"重用UITableViewCell对象\"><a href=\"#重用UITableViewCell对象\" class=\"headerlink\" title=\"重用UITableViewCell对象\"></a>重用UITableViewCell对象</h3><p>需要将自定义的cell类和identifier进行关联。<br>在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t[<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView registerClass:[<span class=\"built_in\">UITableViewCell</span> <span class=\"keyword\">class</span>] forCellReuseIdentifier:@“<span class=\"built_in\">UITableViewCell</span>”];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"MineUserInfoCell\"</span> bundle:<span class=\"literal\">nil</span>]  forCellReuseIdentifier:<span class=\"string\">@\"MineUserInfoCellIdentifier\"</span>];</div></pre></td></tr></table></figure></p>\n<h2 id=\"编辑UITableView\"><a href=\"#编辑UITableView\" class=\"headerlink\" title=\"编辑UITableView\"></a>编辑UITableView</h2><h3 id=\"TableView表头视图\"><a href=\"#TableView表头视图\" class=\"headerlink\" title=\"TableView表头视图\"></a>TableView表头视图</h3><p>表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *headerView = [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"HotelReviewsHeaderView\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>]lastObject];</div></pre></td></tr></table></figure></p>\n<p><strong>loadNibNamed:owner:options:</strong>返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t<span class=\"built_in\">UIView</span> *header = <span class=\"keyword\">self</span>.headerView;</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView setTableHeaderView:header];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 <strong>(UIView *)tableView:viewForHeaderInSection:</strong>方法中设置，当只有一个section时效果相同。</p>\n<h3 id=\"TableView-插入行\"><a href=\"#TableView-插入行\" class=\"headerlink\" title=\"TableView 插入行\"></a>TableView 插入行</h3><p>添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataSource addObject:comment];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> lastRow = [<span class=\"keyword\">self</span>.tableView numberOfRowsInSection:<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">NSIndexPath</span> *indexPath2 = [<span class=\"built_in\">NSIndexPath</span> indexPathForRow:lastRow inSection:<span class=\"number\">0</span>];</div><div class=\"line\">[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationTop</span>];</div></pre></td></tr></table></figure></p>\n<p>也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。</p>\n<h3 id=\"TableView-删除行\"><a href=\"#TableView-删除行\" class=\"headerlink\" title=\"TableView 删除行\"></a>TableView 删除行</h3><p>实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。<br>第一个实参是发送该消息的UITableView对象。<br>第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。<br>第三个实参是一个NSIndexPath对象。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView deleteRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-移动行\"><a href=\"#TableView-移动行\" class=\"headerlink\" title=\"TableView 移动行\"></a>TableView 移动行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.<br>实现tableView:moveRowAtIndexPath:方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView moveRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)destinationIndexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sourceIndexPath == destinationIndexPath)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Comment *comment = [<span class=\"keyword\">self</span>.dataSource objectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource insertObject:comment atIndex:destinationIndexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-编辑行\"><a href=\"#TableView-编辑行\" class=\"headerlink\" title=\"TableView 编辑行\"></a>TableView 编辑行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.可以使用<strong>tableView:canEditRowAtIndexPath</strong>方法筛选能进入编辑模式的行：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(indexPath.row == (<span class=\"number\">10</span> | <span class=\"number\">12</span> | <span class=\"number\">14</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不实现该方法，默认为YES。</p>\n<h3 id=\"TableView-修改删除按钮\"><a href=\"#TableView-修改删除按钮\" class=\"headerlink\" title=\"TableView 修改删除按钮\"></a>TableView 修改删除按钮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"删除\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UINavigationController\"><a href=\"#UINavigationController\" class=\"headerlink\" title=\"UINavigationController\"></a>UINavigationController</h2><h3 id=\"UINavigationController对象\"><a href=\"#UINavigationController对象\" class=\"headerlink\" title=\"UINavigationController对象\"></a>UINavigationController对象</h3><p>UINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。</p>\n<p>UINavigationController对象有一个名为<strong>viewControllers</strong>的属性，指向一个负责保存视图控制器的数组。<strong>topViewController</strong>属性是一个指针，指向当前位于栈顶的视图控制器。</p>\n<p>UINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有<strong>两个子视图</strong>：一个是<strong>UINavigationBar对象</strong>，一个是<strong>topViewController的视图</strong>。</p>\n<p>初始化UINavigationController对象：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UINavigationController</span> *navController = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:viewController];</div></pre></td></tr></table></figure></p>\n<h3 id=\"关联xib\"><a href=\"#关联xib\" class=\"headerlink\" title=\"关联xib\"></a>关联xib</h3><p>不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）</p>\n<p>在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。</p>\n<p>设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。</p>\n<h3 id=\"将视图控制器压入栈\"><a href=\"#将视图控制器压入栈\" class=\"headerlink\" title=\"将视图控制器压入栈\"></a>将视图控制器压入栈</h3><p>使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.navigationController pushViewController:detailController animated:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure></p>\n<p>视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。</p>\n<h3 id=\"视图控制器间传递数据\"><a href=\"#视图控制器间传递数据\" class=\"headerlink\" title=\"视图控制器间传递数据\"></a>视图控制器间传递数据</h3><h3 id=\"NavigationBar\"><a href=\"#NavigationBar\" class=\"headerlink\" title=\"NavigationBar\"></a>NavigationBar</h3><p>UIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。</p>\n<p>UINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。</p>\n<p>创建一个buttonItem：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initNavigationView&#123;</div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *backBtn = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">26</span>, <span class=\"number\">44</span>)];</div><div class=\"line\">    [backBtn setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"systemback\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [backBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backButtonPressedForOrder:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    <span class=\"built_in\">UIBarButtonItem</span> *leftItem  = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:backBtn];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationItem setLeftBarButtonItem:leftItem];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>本文是对《ios编程(第四版)》一书学习后摘录的笔记，属于ios开发基础。</p>","more":"<h2 id=\"第一个ios应用\"><a href=\"#第一个ios应用\" class=\"headerlink\" title=\"第一个ios应用\"></a>第一个ios应用</h2><h3 id=\"声明插座变量\"><a href=\"#声明插座变量\" class=\"headerlink\" title=\"声明插座变量\"></a>声明插座变量</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p>声明了一个叫questionLabel的插座变量.<br><strong>IBOutlet</strong>告诉Xcode需要使用Interface Builder关联该插座变量。</p>\n<h3 id=\"声明动作方法\"><a href=\"#声明动作方法\" class=\"headerlink\" title=\"声明动作方法\"></a>声明动作方法</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)showQuestion:(<span class=\"keyword\">id</span>)sender&#123;</div><div class=\"line\">\t……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>IBAction</strong>关键字告诉Xcode会使用Interface Builder关联该数据。之后创建关联。</p>\n<h3 id=\"应用图标\"><a href=\"#应用图标\" class=\"headerlink\" title=\"应用图标\"></a>应用图标</h3><p>Images.xcassets目录下存放着所有图片，其中LaunchImage保存启动图片。</p>\n<h2 id=\"objective-c\"><a href=\"#objective-c\" class=\"headerlink\" title=\"objective-c\"></a>objective-c</h2><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>实例方法使用的字符是-，类方法使用字符+。<br>类方法作用通常是创建对象，获取类的某些全局属性。</p>\n<h2 id=\"通过ARC管理内存\"><a href=\"#通过ARC管理内存\" class=\"headerlink\" title=\"通过ARC管理内存\"></a>通过ARC管理内存</h2><h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>当某个属性是指向其他对象的指针，并且该对象的类有可修改的子类，如string、array时，应该将该属性的内存管理特性设置为copy。相当于发送一个copy消息。<br>当一个不可修改的对象进行copy时，返回原来对象。当一个可修改对象进行copy时，返回新创建的不可修改对象。</p>\n<h2 id=\"视图与视图层次结构\"><a href=\"#视图与视图层次结构\" class=\"headerlink\" title=\"视图与视图层次结构\"></a>视图与视图层次结构</h2><h3 id=\"视图层次结构\"><a href=\"#视图层次结构\" class=\"headerlink\" title=\"视图层次结构\"></a>视图层次结构</h3><p>任何一个应用有且只有一个UIWindow对象。UIWindow包含应用中的所有视图。应用需要在启动时创建并设置UIWindow对象，然后为其添加其他视图。<br>层次结构中每个视图分别绘制自己。视图会将自己绘制到图层(layer)上，每个UIView对象都有一个layer属性，指向一个CALayer类的对象。</p>\n<h3 id=\"创建UIView子类\"><a href=\"#创建UIView子类\" class=\"headerlink\" title=\"创建UIView子类\"></a>创建UIView子类</h3><p>UIView子类模板会自动生成一个方法 <strong>initWithFrame:</strong>，该方法是UIView的指定初始化方法，带有一个CGRect结构类型的参数，该参数会被赋给UIView的frame属性。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> （<span class=\"keyword\">nonatomic</span>） <span class=\"built_in\">CGRect</span> frame；</div></pre></td></tr></table></figure>\n<p>CGRect结构包含另外两个结构：origin和size。origin是CGPoint类型，包含两个float类型的x，y。size是CGSize结构，包含两个float类型的width和height。<br>创建CGRect对象：CGRect firstFrame = CGRectMake（160，240，100，150）；</p>\n<p>可以使用addSubView方法来添加子视图： [self.window addSubview:firstView]。<br>每个UIView对象都还有一个superView属性，将一个视图作为子视图加入另一个视图后，会自动创建相应的反向关联。为避免强引用循环，superview是弱引用。<br>bounds表示的矩形位于自己的坐标系，frame表示的矩形位于父视图的坐标系。</p>\n<h3 id=\"图形绘制\"><a href=\"#图形绘制\" class=\"headerlink\" title=\"图形绘制\"></a>图形绘制</h3><p>没看</p>\n<h2 id=\"视图：重绘与UIScrollView\"><a href=\"#视图：重绘与UIScrollView\" class=\"headerlink\" title=\"视图：重绘与UIScrollView\"></a>视图：重绘与UIScrollView</h2><h3 id=\"ScrollView\"><a href=\"#ScrollView\" class=\"headerlink\" title=\"ScrollView\"></a>ScrollView</h3><p>设置scrollView.contentSize = bigRect.size;这是整个滚动范围的大小。<br>在scrollview中addSubView。</p>\n<h2 id=\"视图控制器\"><a href=\"#视图控制器\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h2><h3 id=\"视图控制器-1\"><a href=\"#视图控制器-1\" class=\"headerlink\" title=\"视图控制器\"></a>视图控制器</h3><p>视图控制器是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图层次结构。<br>使用UITabBarController的类在两个视图控制器间切换。  </p>\n<p>UIViewController有一个重要属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIView</span> *view;</div></pre></td></tr></table></figure>\n<p>这个view就是视图的根视图。</p>\n<h3 id=\"创建视图层次结构\"><a href=\"#创建视图层次结构\" class=\"headerlink\" title=\"创建视图层次结构\"></a>创建视图层次结构</h3><ol>\n<li><p>覆盖UIViewController的loadView方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)loadView&#123;</div><div class=\"line\">        BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] init];</div><div class=\"line\">        <span class=\"keyword\">self</span>.view = backgroundView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 此时view尚未创建，不能对其进行addview操作。只能创建一个view让self.view指向。</p>\n</li>\n<li><p>通过xib创建<br>.m中声明各个控件(注意控件使用弱引用)</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *questionLabel</div></pre></td></tr></table></figure>\n<p> 再通过连线将File’s Owner的view以及各种控件连接到xib的图像上。</p>\n</li>\n</ol>\n<h3 id=\"设置根视图控制器\"><a href=\"#设置根视图控制器\" class=\"headerlink\" title=\"设置根视图控制器\"></a>设置根视图控制器</h3><p>UIWindow对象提供了setRootViewController：方法。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = hvc;</div></pre></td></tr></table></figure></p>\n<p>setRootViewController其实就是将ViewController的view设置为其subview。</p>\n<h3 id=\"加载nib文件\"><a href=\"#加载nib文件\" class=\"headerlink\" title=\"加载nib文件\"></a>加载nib文件</h3><p>加载不同名的nib文件时，需要使用<strong>initWithNibName:Bundle:</strong>方法。该方法的两个参数，分别用于指定NIB文件文件名和其<strong>所在的程序包</strong>。如果是Bundle传入nil默认是[NSBundle mainBundle];</p>\n<h3 id=\"UITabBarController\"><a href=\"#UITabBarController\" class=\"headerlink\" title=\"UITabBarController\"></a>UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器。该对象会在屏幕底部显示一个标签栏，标签栏会有多个标签项，分别对应UITabBarController对象所保存的每一个视图控制器。单击某个标签项，UITabBarController对象就会显示该标签项所对应的视图控制器的视图。   </p>\n<p>在APPDelegate中创建两个视图控制器，加入Tabbar的<strong>viewControllers</strong>属性中，并将tabbar设置为rootViewController<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITabBarController</span> *tabBarController = [[<span class=\"built_in\">UITabBarController</span> alloc] init];</div><div class=\"line\">tabBarController.viewControllers = @[hvc,rvc] <span class=\"comment\">//两个viewController 可以写在tabbarController的viewDidLoad方法里</span></div><div class=\"line\"><span class=\"keyword\">self</span>.window.rootViewController = tabBarController;</div></pre></td></tr></table></figure></p>\n<p>设置标签项，使用<strong>tabBarItem</strong>属性：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order\"</span>];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *orderImageSel = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"tab_order_active\"</span>];</div><div class=\"line\">orderImage = [orderImage imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\">orderImageSel = [orderImageSel imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysTemplate</span>];</div><div class=\"line\"><span class=\"built_in\">UITabBarItem</span> *orderTabBarItem = [[<span class=\"built_in\">UITabBarItem</span> alloc] initWithTitle:<span class=\"string\">@\"订单\"</span> image:orderImage selectedImage:orderImageSel];</div><div class=\"line\">orderNav.tabBarItem = orderTabBarItem;</div></pre></td></tr></table></figure>\n<p>为tabbar添加subview，UITabBarController里有一个<strong>tabBar</strong>的view</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *backview = [[<span class=\"built_in\">UIView</span> alloc] initWithFrame:<span class=\"keyword\">self</span>.tabBar.bounds];</div><div class=\"line\">[backview setBackgroundColor:[<span class=\"built_in\">UIColor</span> whiteColor]];</div><div class=\"line\">[<span class=\"keyword\">self</span>.tabBar addSubview:backview];</div></pre></td></tr></table></figure>\n<h3 id=\"本地通知\"><a href=\"#本地通知\" class=\"headerlink\" title=\"本地通知\"></a>本地通知</h3><p>本地通知需要创建一个UILocalNotification对象并设置其显示内容和提醒时间，然后调用UIApplication单例对象的scheduleLocalNotification:方法就实现了注册通知。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UILocalNotification</span> *note = [][<span class=\"built_in\">UILocalNotification</span> alloc] init];</div><div class=\"line\">note.alertBody = <span class=\"string\">@\"xxx\"</span>;</div><div class=\"line\">note.fireDate = date;</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] scheduleLocalNotification:note];</div></pre></td></tr></table></figure></p>\n<h3 id=\"加载和显示视图\"><a href=\"#加载和显示视图\" class=\"headerlink\" title=\"加载和显示视图\"></a>加载和显示视图</h3><p>viewDidLoad方法检查视图控制器是否已经加载，每个UIViewController对象实现了viewDidLoad方法，该方法会在载入视图后被调用。为了实现视图延迟加载，在initWithNibName方法中不能访问任何view和view的任何子视图。凡是和view或view子视图有关的初始化代码，都应该在viewDidLoad方法中实现。<br>另外一个方法viewWillAppear方法会在视图控制器的view添加到应用窗口之前被调用。</p>\n<p>如果只要在应用启动后设置一次视图对象，那么用viewDidLoad，如果每次看到视图都需要对其进行设置，那么用viewWillAppear，类似于onCreate和onResume的区别。</p>\n<h3 id=\"与视图控制器及其视图交互\"><a href=\"#与视图控制器及其视图交互\" class=\"headerlink\" title=\"与视图控制器及其视图交互\"></a>与视图控制器及其视图交互</h3><p><strong>application:didFinishLaunchingWithOptions:</strong>    该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动后调用一次。如果从其他应用切换回本地应用，该方法不会被调用，如果关闭应用后台在重启才会再次调用。<br><strong>initWithNibName：bundle：</strong>该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。<br><strong>loadView：</strong>覆盖该方法，使用代码方式设置视图控制的的view属性。<br><strong>viewDidLoad：</strong>该方法会在视图控制器加载完视图后被调用。<br><strong>viewWillAppear：</strong>该方法会在视图控制器的view显示在屏幕上时被调用。  </p>\n<h2 id=\"委托与文本输入\"><a href=\"#委托与文本输入\" class=\"headerlink\" title=\"委托与文本输入\"></a>委托与文本输入</h2><h3 id=\"委托（代理模式）\"><a href=\"#委托（代理模式）\" class=\"headerlink\" title=\"委托（代理模式）\"></a>委托（代理模式）</h3><p>当某个特定事件发生时，发生事件的一方会向指定的目标对象发送一个之前设定好的动作消息。<br>例：UITextField对象有一个委托属性，通过为UITextField对象设置委托，委托实现一个协议中的各个方法，UITextField对象会在发生事件时向委托发送相应消息，由委托处理该事件。  </p>\n<p>类似于android中setOnClickListener(this); 继承onClickListener接口，这里则是设置delegate为self，遵守相应协议。不过android可以使用匿名内部类代替这里的this。</p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>凡是支持委托的对象，背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。委托对象需要更具这个协议选取需要的方法实现。如果一个类实现了某个协议中规定的方法，则称类遵守该协议。  </p>\n<p>协议声明使用@protocol指令开头，后面跟协议的名称。最后使用@end结束<br>使用@optional指令，可以将写在指令后的全部声明为可选的。<br>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector的消息。所有oc对象都从NSObject继承 respondsToSelector：方法，该方法在运行时检查对象是否实现了指定的方法。  </p>\n<p>声明示例：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRHypnosisViewController</span>()&lt;<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"设置异常断点\"><a href=\"#设置异常断点\" class=\"headerlink\" title=\"设置异常断点\"></a>设置异常断点</h3><p>当有问题无法找到错误原因时，可以通过添加异常断点定位有问题的代码。</p>\n<h3 id=\"类方法与实例方法\"><a href=\"#类方法与实例方法\" class=\"headerlink\" title=\"类方法与实例方法\"></a>类方法与实例方法</h3><p>这里需要注意：</p>\n<ol>\n<li>类方法可以调用类方法。</li>\n<li>类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。</li>\n<li>类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。<ul>\n<li>实例方法里面的self，是对象的首地址。</li>\n<li>类方法里面的self，是Class.</li>\n</ul>\n</li>\n<li>类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。</li>\n</ol>\n<h2 id=\"UITableView与UITableViewController\"><a href=\"#UITableView与UITableViewController\" class=\"headerlink\" title=\"UITableView与UITableViewController\"></a>UITableView与UITableViewController</h2><h3 id=\"UITableView-的样式\"><a href=\"#UITableView-的样式\" class=\"headerlink\" title=\"UITableView 的样式\"></a>UITableView 的样式</h3><ol>\n<li>UITableViewStylePlain</li>\n<li>UITableViewStyleGrouped</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UITableView</span> *tableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span> style:<span class=\"built_in\">UITableViewStyle</span>];</div></pre></td></tr></table></figure>\n<p>其中CGRectZero表示equivalent to CGRectMake(0, 0, 0, 0).之后代码会改UITableView的Frame，所以暂且都是0。</p>\n<h3 id=\"UITableView对象提供数据\"><a href=\"#UITableView对象提供数据\" class=\"headerlink\" title=\"UITableView对象提供数据\"></a>UITableView对象提供数据</h3><p>UITableView不包含任何数据，需要提供一个数据源.<br>我们将BNRAppDelegate实例设置为UITableView对象的数据源。BNRAPPDelegate必须遵循UITableViewDataSource协议。<br>在BNRAPPDelegate.h文件中，声明BNRAPPDelegate遵循UITableViewDataSource协议<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BNRAppDelegate</span>: <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITableViewDataSource</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableView</span> *taskTable;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutable</span> Array *tasks;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>在.m中向UITableView发送setDataSource消息，将BNRAPPDelegate实例设置为数据源</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.taskTable.dataSource = <span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>\n<p>UITableViewDataSource设置了两个必须方法：</p>\n<ol>\n<li>根据指定的表格索引给出相应表格段包含的行数（tableView：numberOfRowsInSection：）</li>\n<li>根据指定表格段索引和行索引给出相应的UITableViewCell对象（tableView：cellForRowAtIndexPath：）<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BNRAppDelegate</span></span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span>.tasks count];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *c = [<span class=\"keyword\">self</span>.taskTable dequeueReusableCellWithIdentifier:@“cell”];</div><div class=\"line\">\t    <span class=\"comment\">//重用cell</span></div><div class=\"line\">\t    <span class=\"built_in\">NSString</span> *item = [<span class=\"keyword\">self</span>.tasks objectAtIndex:indexPath.row];</div><div class=\"line\">\t    c.textLabel.text = item;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>刷新表格：<code>[self.taskTable reloadData];</code></p>\n<h3 id=\"重用UITableViewCell对象\"><a href=\"#重用UITableViewCell对象\" class=\"headerlink\" title=\"重用UITableViewCell对象\"></a>重用UITableViewCell对象</h3><p>需要将自定义的cell类和identifier进行关联。<br>在ViewController.m中覆盖viewDidLoad方法，向表视图注册应该使用的UITabeViewCell<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t[<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView registerClass:[<span class=\"built_in\">UITableViewCell</span> <span class=\"keyword\">class</span>] forCellReuseIdentifier:@“<span class=\"built_in\">UITableViewCell</span>”];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样UITableViewCell类就和这个string关联起来了。也可以使用nib文件关联<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.tableView registerNib:[<span class=\"built_in\">UINib</span> nibWithNibName:<span class=\"string\">@\"MineUserInfoCell\"</span> bundle:<span class=\"literal\">nil</span>]  forCellReuseIdentifier:<span class=\"string\">@\"MineUserInfoCellIdentifier\"</span>];</div></pre></td></tr></table></figure></p>\n<h2 id=\"编辑UITableView\"><a href=\"#编辑UITableView\" class=\"headerlink\" title=\"编辑UITableView\"></a>编辑UITableView</h2><h3 id=\"TableView表头视图\"><a href=\"#TableView表头视图\" class=\"headerlink\" title=\"TableView表头视图\"></a>TableView表头视图</h3><p>表头视图是指UITableView对象可以在其表格上方显示的特定视图，是和放置针对某个表格段或整张表格的标题和控件。表头视图可以是任意UIView对象。表格视图有两种，分别针对表格段和表格。类似的，还有表尾视图。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *headerView = [[[<span class=\"built_in\">NSBundle</span> mainBundle] loadNibNamed:<span class=\"string\">@\"HotelReviewsHeaderView\"</span> owner:<span class=\"literal\">nil</span> options:<span class=\"literal\">nil</span>]lastObject];</div></pre></td></tr></table></figure></p>\n<p><strong>loadNibNamed:owner:options:</strong>返回的是个数组，保存了xib中的各个view。initWithNibName的实现和该方法类似，其中也会用到该方法。不过initWithNibName用在获取Controller的xib中。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad&#123;</div><div class=\"line\">\t<span class=\"built_in\">UIView</span> *header = <span class=\"keyword\">self</span>.headerView;</div><div class=\"line\">\t[<span class=\"keyword\">self</span>.tableView setTableHeaderView:header];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载完headerView后，将其设置为UITableView对象的表头视图。也可以在 <strong>(UIView *)tableView:viewForHeaderInSection:</strong>方法中设置，当只有一个section时效果相同。</p>\n<h3 id=\"TableView-插入行\"><a href=\"#TableView-插入行\" class=\"headerlink\" title=\"TableView 插入行\"></a>TableView 插入行</h3><p>添加表格行时，必须确保UITableView对象当前显示的行数与数据源提供的行数相同。因此，必须在添加新行前，创建一个新的对象加入datasource。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.dataSource addObject:comment];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> lastRow = [<span class=\"keyword\">self</span>.tableView numberOfRowsInSection:<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">NSIndexPath</span> *indexPath2 = [<span class=\"built_in\">NSIndexPath</span> indexPathForRow:lastRow inSection:<span class=\"number\">0</span>];</div><div class=\"line\">[s]elf.tableView insertRowsAtIndexPaths:@[indexPath2] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationTop</span>];</div></pre></td></tr></table></figure></p>\n<p>也可以使用reloadData达到同样刷新tableview的效果，但是上面方法可以添加插入动画，并且消耗资源少。</p>\n<h3 id=\"TableView-删除行\"><a href=\"#TableView-删除行\" class=\"headerlink\" title=\"TableView 删除行\"></a>TableView 删除行</h3><p>实现tableView:commitEditingStyle:forRowAtIndexPath:方法。传入三个参数。<br>第一个实参是发送该消息的UITableView对象。<br>第二个实参是UITableViewCellEditingStyle类型的常数(删除表格行时，传入的是UITableViewCellEditingStyleDelete)。<br>第三个实参是一个NSIndexPath对象。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView deleteRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-移动行\"><a href=\"#TableView-移动行\" class=\"headerlink\" title=\"TableView 移动行\"></a>TableView 移动行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.<br>实现tableView:moveRowAtIndexPath:方法<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView moveRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)destinationIndexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sourceIndexPath == destinationIndexPath)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        Comment *comment = [<span class=\"keyword\">self</span>.dataSource objectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource removeObjectAtIndex:sourceIndexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.dataSource insertObject:comment atIndex:destinationIndexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TableView-编辑行\"><a href=\"#TableView-编辑行\" class=\"headerlink\" title=\"TableView 编辑行\"></a>TableView 编辑行</h3><p>使用<strong>setEditing:animated:</strong>方法让tableView进入编辑模式.可以使用<strong>tableView:canEditRowAtIndexPath</strong>方法筛选能进入编辑模式的行：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(indexPath.row == (<span class=\"number\">10</span> | <span class=\"number\">12</span> | <span class=\"number\">14</span>))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不实现该方法，默认为YES。</p>\n<h3 id=\"TableView-修改删除按钮\"><a href=\"#TableView-修改删除按钮\" class=\"headerlink\" title=\"TableView 修改删除按钮\"></a>TableView 修改删除按钮</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"删除\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UINavigationController\"><a href=\"#UINavigationController\" class=\"headerlink\" title=\"UINavigationController\"></a>UINavigationController</h2><h3 id=\"UINavigationController对象\"><a href=\"#UINavigationController对象\" class=\"headerlink\" title=\"UINavigationController对象\"></a>UINavigationController对象</h3><p>UINavigationController独享显示多个屏幕信息时，相应的UINavigationController对象会以栈的形式保存所有屏幕信息。初始化UINavigationController对象时，需要传入一个UIViewController对象作为UINavigationController对象的根视图控制器，且根视图控制器将永远位于栈底。</p>\n<p>UINavigationController对象有一个名为<strong>viewControllers</strong>的属性，指向一个负责保存视图控制器的数组。<strong>topViewController</strong>属性是一个指针，指向当前位于栈顶的视图控制器。</p>\n<p>UINavigationController是UIViewController的子类，所以UINavigationController有自己的视图。该视图有<strong>两个子视图</strong>：一个是<strong>UINavigationBar对象</strong>，一个是<strong>topViewController的视图</strong>。</p>\n<p>初始化UINavigationController对象：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UINavigationController</span> *navController = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:viewController];</div></pre></td></tr></table></figure></p>\n<h3 id=\"关联xib\"><a href=\"#关联xib\" class=\"headerlink\" title=\"关联xib\"></a>关联xib</h3><p>不要将子视图设置在view的最顶端。在视图控制器中，view会衬于UINavigationBar下方，导致UInavigationBar遮挡view最顶端内容。（UITabBar同样）</p>\n<p>在xib中按住Control拖拽到类拓展中，可以快速创建一个带IBOutlet前缀的属性。</p>\n<p>设置xib文件时，要确保关联正确，产生错误的常见原因是：修改了某个插座变量的变量名，但是没有更新xib文件中的相应关联。</p>\n<h3 id=\"将视图控制器压入栈\"><a href=\"#将视图控制器压入栈\" class=\"headerlink\" title=\"将视图控制器压入栈\"></a>将视图控制器压入栈</h3><p>使用UINavigationController对象时，通常会由处于栈顶的视图控制器来负责压入另一个视图控制器。<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span>.navigationController pushViewController:detailController animated:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure></p>\n<p>视图控制器发送navigationController消息，可以得到指向UINavigationController对象的指针。</p>\n<h3 id=\"视图控制器间传递数据\"><a href=\"#视图控制器间传递数据\" class=\"headerlink\" title=\"视图控制器间传递数据\"></a>视图控制器间传递数据</h3><h3 id=\"NavigationBar\"><a href=\"#NavigationBar\" class=\"headerlink\" title=\"NavigationBar\"></a>NavigationBar</h3><p>UIViewController对象有一个navigationItem属性，类型为UINavigationItem。和NavigationBar不同，不是UIView的子类，不能显示，而是为UINavigationBar提供绘图所需内容。当UIViewController成为UINavigationController的栈顶对象时，UINavigationBar对象会访问该UIViewController对象的navigationItem，获取和界面显示相关的内容。</p>\n<p>UINavigationItem除了设置title属性外，还可以设置其他属性：leftBarButtonItem，rightBarButtonItem和titleView。titleView可以将原有title的位置替换为一个view。</p>\n<p>创建一个buttonItem：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)initNavigationView&#123;</div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *backBtn = [[<span class=\"built_in\">UIButton</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">26</span>, <span class=\"number\">44</span>)];</div><div class=\"line\">    [backBtn setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"systemback\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [backBtn addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backButtonPressedForOrder:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    <span class=\"built_in\">UIBarButtonItem</span> *leftItem  = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:backBtn];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationItem setLeftBarButtonItem:leftItem];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cirhk6m700000c6ru4t81z0v1","category_id":"cirhk6m7f0003c6ruz66avshm","_id":"cirhk6m7r000bc6ruxuyt7n5x"},{"post_id":"cirhk6m7n0007c6ruq4z8vlo6","category_id":"cirhk6m7f0003c6ruz66avshm","_id":"cirhk6m8c000fc6rub4fnwmk2"},{"post_id":"cirhk6m7p000ac6ruz7el8e3q","category_id":"cirhk6m7o0008c6rucgom2m16","_id":"cirhk6m8f000ic6ruhptgcw3c"},{"post_id":"cirhk6m760001c6ru5ls49xja","category_id":"cirhk6m7o0008c6rucgom2m16","_id":"cirhk6m8i000lc6ruq0mff8pl"},{"post_id":"cirhk6m7s000cc6ru8056hxhe","category_id":"cirhk6m7f0003c6ruz66avshm","_id":"cirhk6m8j000nc6ruh9t6k27a"},{"post_id":"cirhk6m8c000hc6ru4gy35lqf","category_id":"cirhk6m7f0003c6ruz66avshm","_id":"cirhk6m8k000pc6ru44hite3k"},{"post_id":"cirhk6m7g0004c6rubvztawbf","category_id":"cirhk6m7f0003c6ruz66avshm","_id":"cirhk6m8l000rc6rugtcmmmrb"},{"post_id":"cirhk6m7h0005c6ruuagtj066","category_id":"cirhk6m8g000jc6ruk1rb07pq","_id":"cirhk6m8m000sc6ruwmm58hw9"}],"PostTag":[{"post_id":"cirhk6m700000c6ru4t81z0v1","tag_id":"cirhk6m7a0002c6ruv49g4bwf","_id":"cirhk6m7p0009c6ru9s366nag"},{"post_id":"cirhk6m760001c6ru5ls49xja","tag_id":"cirhk6m7m0006c6ruf2hl4jvm","_id":"cirhk6m8c000gc6rubm9my9uf"},{"post_id":"cirhk6m7g0004c6rubvztawbf","tag_id":"cirhk6m88000dc6ruugu06314","_id":"cirhk6m8j000mc6ruuanyb8pc"},{"post_id":"cirhk6m7h0005c6ruuagtj066","tag_id":"cirhk6m8h000kc6rug56pduom","_id":"cirhk6m8k000qc6ru409z71hr"},{"post_id":"cirhk6m7n0007c6ruq4z8vlo6","tag_id":"cirhk6m8k000oc6rud7rtw5nd","_id":"cirhk6m8q000vc6ruexyl616o"},{"post_id":"cirhk6m7n0007c6ruq4z8vlo6","tag_id":"cirhk6m8h000kc6rug56pduom","_id":"cirhk6m8r000wc6rufrbekmk9"},{"post_id":"cirhk6m7p000ac6ruz7el8e3q","tag_id":"cirhk6m8p000uc6ru32nxolbk","_id":"cirhk6m8s000yc6ruxoj4rqby"},{"post_id":"cirhk6m7s000cc6ru8056hxhe","tag_id":"cirhk6m8r000xc6rug7194k16","_id":"cirhk6m8t0010c6rurvcvpveq"},{"post_id":"cirhk6m8c000hc6ru4gy35lqf","tag_id":"cirhk6m8h000kc6rug56pduom","_id":"cirhk6m8t0011c6ruweaefqbr"}],"Tag":[{"name":"GCD","_id":"cirhk6m7a0002c6ruv49g4bwf"},{"name":"hexo","_id":"cirhk6m7m0006c6ruf2hl4jvm"},{"name":"UICollectionView","_id":"cirhk6m88000dc6ruugu06314"},{"name":"读书笔记","_id":"cirhk6m8h000kc6rug56pduom"},{"name":"objective-c","_id":"cirhk6m8k000oc6rud7rtw5nd"},{"name":"杂谈","_id":"cirhk6m8p000uc6ru32nxolbk"},{"name":"UIScrollView","_id":"cirhk6m8r000xc6rug7194k16"}]}}